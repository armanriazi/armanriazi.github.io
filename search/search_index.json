{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"fun/","title":"Entertainment","text":"<p>3D-360-Images</p> <p>3D-360-Videos</p> <p>Music-Video</p> <p>Magazine</p>"},{"location":"links/","title":"Links","text":""},{"location":"links/#development","title":"Development","text":"<ul> <li> <p>Github</p> </li> <li> <p>Gitlab</p> </li> <li> <p>My Meta environment</p> </li> <li> <p>Rust-Lang</p> </li> <li> <p>Linux foundation</p> </li> <li> <p>Web3Dev</p> </li> <li> <p>Dev.to</p> </li> <li> <p>Stackoverflow</p> </li> <li> <p>CodeGrepper</p> </li> <li> <p>Social.Network</p> </li> </ul>"},{"location":"links/#job","title":"Job","text":"<ul> <li> <p>Linkedin</p> </li> <li> <p>Xing</p> </li> <li> <p>Nexxt</p> </li> <li> <p>Linktr.ee</p> </li> <li> <p>RemoteHub</p> </li> </ul>"},{"location":"links/#freelancing","title":"Freelancing","text":"<ul> <li> <p>Freelancer WINA Talent platform</p> </li> <li> <p>Invitation link of WINA Talent</p> </li> </ul>"},{"location":"links/#start-up","title":"Start-Up","text":"<ul> <li>Producthunt</li> </ul>"},{"location":"links/#mentoring","title":"Mentoring","text":"<ul> <li>Nachhilfeunterricht</li> </ul>"},{"location":"links/#multimedia","title":"MultiMedia","text":"<ul> <li> <p>Vimo Channel Blockchain</p> </li> <li> <p>Youtube Channel Blockchain</p> </li> <li> <p>Youtube Channel-Archived</p> </li> <li> <p>Aparat Channel</p> </li> </ul>"},{"location":"links/#science-papers","title":"Science, Papers","text":"<ul> <li> <p>Academia.edu</p> </li> <li> <p>Medium</p> </li> <li> <p>Base Search(showing citation)</p> </li> <li> <p>ArmanRiazi-Doc</p> </li> <li> <p>Read.Cash</p> </li> <li> <p>ResearchGate</p> </li> <li> <p>Ordchid</p> </li> <li> <p>Ecency</p> </li> <li> <p>Repo-Doc-Blockchain</p> </li> <li> <p>Web Of Science</p> </li> </ul>"},{"location":"links/#learning-profiles","title":"Learning Profiles","text":"<ul> <li> <p>Linux Foundation</p> </li> <li> <p>Udemy</p> </li> <li> <p>Educative (1)</p> </li> <li> <p>Educative (2)</p> </li> <li> <p>Educative (3)</p> </li> <li> <p>Classcentral</p> </li> <li> <p>EDX</p> </li> <li> <p>Alison</p> </li> <li> <p>LeetCode</p> </li> </ul>"},{"location":"links/#feedback","title":"Feedback","text":"<ul> <li>Disqus</li> </ul>"},{"location":"links/#direct-contact","title":"Direct-Contact","text":"<ul> <li> <p>Calendly</p> </li> <li> <p>Discord</p> </li> <li> <p>Matrix</p> </li> </ul>"},{"location":"links/#email-addresses","title":"Email addresses","text":"<pre><code>If you require to contact me {\nPlease mention your Name.\nTitle armanriazi.github.io\nTo set scheduled meeting\n}\n</code></pre> <ul> <li> <p>Job</p> </li> <li> <p>Email of website</p> </li> </ul>"},{"location":"links/#i-am-here","title":"I am here","text":"<p>Skype: armanriazi (Video Call)</p> <p>Telegram: <code>@arman_riazi</code>(Instant Message, Call)</p> <p>Twitter: armanriazi.meta</p> <p>Channel: Blockchain-Aramisit, Discord ID: armanriyazi.github.io#5111</p> <p>I recommend signing up channels to keep in connect.</p>"},{"location":"links/#sponsor","title":"Sponsor","text":"<ul> <li>liberapay-Github Sponsership</li> </ul> <ul> <li>MetaMask(MultiNet): 0xde5D732a5AB44832E1c69b18be30834639F44A2c</li> </ul> <ul> <li>Sponsor me on github</li> </ul> <ul> <li>Join to our GitHub-organization): 0xde5D732a5AB44832E1c69b18be30834639F44A2c</li> </ul>"},{"location":"pdfs/","title":"Pdfs","text":"<p>armanriazi-master-science</p> <p>armanriazi-master-science-score</p>"},{"location":"publications/","title":"publications","text":"<p>Certificates</p> AcademicBlockchainRustBook <ul> <li>Using ACO Algorithm to Improve Performance for Container-based Scientific</li> </ul> <ul> <li>Towards Blanket Licensing Digitized Music Decentralized</li> </ul> <ul> <li>Amazon</li> <li>Ultimate Rust Systems Programming_LOU_Reviewer</li> </ul>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#papers","title":"Papers","text":"<p><code>Available for purchase NFTs ownership with your full name</code></p>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#using-aco-algorithm-to-improve-performance-for-container-based-scientific","title":"Using ACO Algorithm to Improve Performance for Container-based Scientific","text":"<p>Cite<sup>1</sup> this Exchangable NFT</p>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#towards-blanket-licensing-digitized-music-nft-decentralized","title":"Towards Blanket Licensing Digitized Music NFT Decentralized","text":"<code>Available for purchase NFT ownership with your full name</code> <p>Cite<sup>2</sup> this Exchangable NFT</p>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#understanding-the-landscape-of-regenerating-finance-and-digital-transformation","title":"Understanding the Landscape of Regenerating Finance and Digital Transformation","text":"Indexed in OpenAIRE <p>Cite<sup>3</sup> this Exchangable NFT</p>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#digital-transformation-in-smart-cities-decentralized-architecture-for-sustainable-development-within-the-web-30-ecosystem","title":"Digital Transformation in Smart Cities: Decentralized Architecture for Sustainable Development within the Web 3.0 Ecosystem","text":"Indexed in OpenAIRE <p>Cite<sup>4</sup> this Exchangable NFT</p>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#digital-multimedia","title":"Digital Multimedia","text":"","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#monorepo-rust-programming","title":"Monorepo &amp; Rust Programming","text":"<ul> <li> <p>Vimo Channel</p> </li> <li> <p>Youtube Channel</p> </li> </ul>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#refi-smartcity","title":"ReFi &amp; Smartcity","text":"","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#web-content","title":"Web content","text":"<ul> <li> <p>Regenerative Finance</p> </li> <li> <p>Smartcity</p> </li> </ul>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#pdf-content","title":"Pdf content","text":"<ul> <li> <p>Sessions of ReFi Talents</p> </li> <li> <p>Pitch Deck of Smartcity</p> </li> </ul>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"publications/#links","title":"Links","text":"<ul> <li> <p>Academia.edu</p> </li> <li> <p>Medium</p> </li> <li> <p>DOCs-Blockchain n Github</p> </li> <li> <p>DOCs on Github</p> </li> </ul> <ol> <li> <p>A. Riazi (2023), Using ACO Algorithm to Improve Performance for  Container-based Scientific Workflows. ScieNFT. https://scienft.com/nfts/155 \u21a9</p> </li> <li> <p>A. Riazi (2023), Towards a new Blanket Licensing Digitized NFT Music Decentralized. ScieNFT. https://scienft.com/nfts/156 \u21a9</p> </li> <li> <p>A. Riazi (2024), Understanding the Landscape of Regenerating Finance and Digital Transformation. ScieNFT. https://scienft.com/nfts/318 \u21a9</p> </li> <li> <p>A. Riazi (2024), Digital Transformation in Smart Cities  Decentralized Architecture for Sustainable Development within the Web 3.0 Ecosystem. ScieNFT. https://scienft.com/nfts/5756 \u21a9</p> </li> </ol>","tags":["achievements","publications","publisher","articles","me","i","paper","armanriazi","riazi","experience","skill","career","recuit"]},{"location":"services/","title":"Presentation of Services","text":"<code>Getting Luxury services that you can afford</code> You may be a co-founder or a developer, and you do not have enough time. So, it would be good idea to let me help you who had been spending a lot of time and effort to learn so far. I have a roadmap for doing this kind of tasks. I am a counselor to help you. (All of the following sections include a wage/fee. Please do not hesistat to contact me). <p>Software_engineer</p> Free deliver system design(Zero-cost)Implementing MicroservicesMonorepo a smart building systemNFT platformCommands <ul> <li>Domain-Driven Design(PDF)</li> <li>Applicant form of DDD</li> </ul> <ul> <li>Based on NestJS </li> </ul> <ul> <li>Monorepo for complex projects</li> </ul> <p>What is the best solution to developing a Web 3.0 application. There are so many solutions in business. But which one has high quality and security, quickly development, has low resources, and has no additional overhead(a light development framework). To keep you tuned, I am going to inter-reference this section. I have engaged on the project, and if I have enough time, you should be in contact with me to explain more about the proposed architecture.MFS as an NFT music platform</p> <p>If you would like getting commands that consist of: Ubuntu, Devops, Blockchain CLIs in form of compacted packages, please send me an Email to armanriyazi.github.io@gmail.com (Title: armanriazi_github_io_Commands_YourPackageName)</p> <p>Research_teaching</p> Teaching RustWritting ProposalMind mapping of Substrate framework <p>How to learn quickly? I have the pleasure of introducing a repository that has over 600 samples and has collected more than six significant references. I made a customised online book that contains md-files, and you can search for any gathered concepts. I was wondering if you wanted to contact me. To gain access online, books with codes have a value of $100.</p> <ul> <li>Rust-All-In-One-Private</li> </ul> <p>Writing in a sort of article or published on a website.</p> <ul> <li>NFT Music </li> <li>Regenerative Finance </li> <li>Smartcity </li> </ul> <p>If you want to get updated-mind-mapping image, send me Email to armanriazi.github.io@gmail.com  (Title: armanriazi.github.io_Substrate_MindMapping) </p> <p>Configuration_devops</p> Configure full/master nodesDevOps <ul> <li>Running Decentralized Ledgers in any kind of network</li> </ul> <ul> <li>Continuous Integrity </li> </ul> <p>Decentralized_finance_consultant</p> DEFI | Trade | Cryptocurrency <ul> <li>Defi-Technical-Fundamental</li> </ul>"},{"location":"todo/","title":"Todo","text":"<p>okay so I want to set a few expectations.</p> <p>I wasn't I wasn't sort of expecting to</p> <p>stand at the front and give any sort of</p> <p>talks so not very much is is is ready in</p> <p>that regard it's really meant to be a</p> <p>workshop for kind of rough coding I</p> <p>wanted to get some people whoever</p> <p>brought their laptop sort of up to speed</p> <p>maybe get substrate downloaded and built</p> <p>and sort of take take people through</p> <p>maybe deploying deploying a new chain</p> <p>maybe writing some modules Sergei here</p> <p>is going to sort of give some give a</p> <p>demonstration of how to deploy a smart</p> <p>contract on our smart contract based</p> <p>substrate base smart contract chain so</p> <p>yeah don't expect too much hand holding</p> <p>on this what else yeah I figured</p> <p>actually I would put it to the audience</p> <p>what it is that you would prefer to see</p> <p>and do do like remember that you know if</p> <p>you say ah we'd like to see a new</p> <p>substrate module being done or I'd like</p> <p>to see how you develop the UI or how I</p> <p>would see something else it is gonna be</p> <p>me sort of bashing away on a keyboard</p> <p>for 85% at the time and if you don't</p> <p>have a keyboard to bash away with</p> <p>in-concert then it's it's going to be</p> <p>pretty boring but feel free to to ask me</p> <p>to demonstrate or sort of educate on</p> <p>what substrate does and how it works and</p> <p>I'll try and use my now freshly compiled</p> <p>substrate code base to help</p> <p>help explain any so any any requests no</p> <p>requests yep</p> <p>Adrian I certainly car would be my</p> <p>greatest pleasure to you to walk through</p> <p>and anything beyond walking through</p> <p>JavaScript's sorry walking through</p> <p>substrate models in JavaScript yeah sure</p> <p>okay</p> <p>sure yep</p> <p>that's gonna be a month or two before we</p> <p>we've already done over that but yeah</p> <p>you can expect that in the new year it's</p> <p>good that Rob's not here otherwise you</p> <p>might meet cringing right now sure yeah</p> <p>okay I guess there's a few things there</p> <p>to be working on okay let's start with</p> <p>the the last question because that's the</p> <p>one I can remember the easiest so if we</p> <p>if we had to depart the code base is</p> <p>this can you actually read that or</p> <p>should i zoom in a bit better or some</p> <p>more yeah okay cause like the more i</p> <p>zoom the less the less easier for me</p> <p>it's gonna be boring it can also make</p> <p>more space are a horizontal space yeah</p> <p>okay cool yeah so a you TXO model it's</p> <p>an interesting sort of one and one that</p> <p>we have just about begun prototyping in</p> <p>parity we've got a team of like two or</p> <p>three people working on it basically the</p> <p>bitcoin style you </p>"},{"location":"todo/#utxo-model","title":"UTXO model","text":"<p>is kind of an interesting hybrid between the</p> <p>stripped/stricked all full nodes must validate</p> <p>everything and and base their validation</p> <p>they the things that they validate sort</p> <p>of they put a state route/root a storage</p> <p>route if you like state route into each</p> <p>block header and that means that like</p> <p>clients when they come along they can</p> <p>actually in principle validate</p> <p>everything all of the state transition</p> <p>logic of every block based purely upon</p> <p>the state route of the last block right</p> <p>so if you trust that the header of the</p> <p>last block is something or other then</p> <p>you can check that state route and you</p> <p>can come you can be provided with a</p> <p>proof that all of the transactions on</p> <p>the current block where executed</p> <p>correctly and therefore that the state</p> <p>route on the current block is is correct</p> <p>and polka dot very much uses this model</p> <p>it's the model that the power chains are</p> <p>based around and it basically means that</p> <p>validators by having just like client</p> <p>logic can actually validate every power</p> <p>chain equally</p> <p>I'm bitcoins a little different in</p> <p>principle if you trust the previous</p> <p>blocks header you can still be provided</p> <p>with a proof that the current block is</p> <p>valid but the proof is potentially all</p> <p>of the Bitcoin blockchain and therefore</p> <p>not super concise this it's this is the</p> <p>case because Bitcoin doesn't keep a</p> <p>track of the current state at every</p> <p>block and place that in the header as a</p> <p>cryptographic hash rather when you want</p> <p>to so make some transaction on Bitcoin</p> <p>and prove that it's a valid transaction</p> <p>you use unspent transaction outputs and</p> <p>those are outputs that it is expected</p> <p>that nodes will record in their database</p> <p>but if you want the actual proof that</p> <p>those outputs are valid you have to go</p> <p>all the way back to the block where they</p> <p>were they were the outputs from a spend</p> <p>in order to be sure that that they're</p> <p>legit and obviously you have to see the</p> <p>entire chain between now and then in</p> <p>order to be sure that they weren't spent</p> <p>already so it's it's much harder to do a</p> <p>you TXO model in literally the same vein</p> <p>as Bitcoin because this kind of light</p> <p>client sort of model doesn't doesn't</p> <p>quite extend to the conciseness theorems</p> <p>does that said if you instead store the</p> <p>unspent transaction outputs in a murkily</p> <p>structure in the same way that aetherium</p> <p>stores its contract state then you are</p> <p>able to basically get a hash of that</p> <p>structure every block and you can you</p> <p>can provide concise proofs that a</p> <p>particular transaction is valid because</p> <p>you can see the you can demonstrate that</p> <p>those and spent transaction outputs</p> <p>appear in this localized structure and</p> <p>that's how we would implement a u TXO</p> <p>style chain within the para chain model</p> <p>and probably how we would implement it</p> <p>in substrate and that's actually going</p> <p>forward how its</p> <p>we built in principle though as I said</p> <p>that you could introduce a raw database</p> <p>into substrate and actually mimic</p> <p>bitcoins model but it would preclude</p> <p>turning it into a para chain without</p> <p>adding some additional layers of</p> <p>indirection and likely are not likely</p> <p>enough trust which we're not so keen on</p> <p>introducing programmatically speaking</p> <p>you'd introduce a UT EXO's at if we go</p> <p>into the code base so I mentioned before</p> <p>like substrate has three levels of kind</p> <p>of you can dive into substrate of three</p> <p>levels so you can dive into at the core</p> <p>which is right there oh and this is if</p> <p>you use substrate you use substrate core</p> <p>and it's got all of the things that you</p> <p>would expect to see in a in a block</p> <p>chain if we look at the modules or the</p> <p>crates as Arista falls them then we you</p> <p>know you can see things like the</p> <p>consensus and the finality and the</p> <p>keystore and the networking and the our</p> <p>PCs and so forth</p> <p>it would likely be implemented as a</p> <p>outside of the SRM L so the SRM L is</p> <p>here because the SRM L is rather</p> <p>designed around a an account and an</p> <p>index model similar to aetherium in</p> <p>principle you could nonetheless create</p> <p>some additional SRM l modules that kind</p> <p>of introduce you to EXO's I mean in</p> <p>principle as modules of turing-complete</p> <p>they've got entry point functions that</p> <p>can be arbitrary bodies and they've got</p> <p>they can they can do basically anything</p> <p>with storage that they want so there's</p> <p>no reason that you couldn't implement it</p> <p>that way but it'd probably be a bit more</p> <p>efficient and make a bit more sense</p> <p>if you implement it as its own runtime</p> <p>and to do it as its own runtime you</p> <p>would basically just</p> <p>use the underlying abstractions in core</p> <p>that were used in order to pass in order</p> <p>to allow things like the execute block</p> <p>function to be to be implemented and for</p> <p>it to be called into by the the rest of</p> <p>the client and and work with that</p> <p>directly and you define your own block</p> <p>format and your own transaction format</p> <p>and in general build the execute block</p> <p>function and that's in Bitcoin from from</p> <p>scratch where as I say parity is is</p> <p>pushing forward with its with a you TXO</p> <p>chain mostly so partly to make sure that</p> <p>the model that we have is actually</p> <p>general it's it's a good sort of sanity</p> <p>check and partly because we actually</p> <p>want to introduce a payment based system</p> <p>that's that's a sorry a payment system</p> <p>that's based around you TX owes and</p> <p>potentially that has some sort of ZK</p> <p>snark functionality in as well and we're</p> <p>doing that with the by reusing as much</p> <p>of the PBGC block parity Bitcoin and</p> <p>code bases become cool I'm not going to</p> <p>start implementing one here am i okay</p> <p>maybe laters cool</p> <p>what were the other three questions</p> <p>theorem compatibility yeah so how does</p> <p>the RPC RPC and JavaScript work this is</p> <p>a yeah this is an interesting question</p> <p>so substrates meant to be pretty generic</p> <p>and if we go to the RBC module it's</p> <p>split into four four sub sub modules</p> <p>author chain state and system author is</p> <p>to do with block authoring and it</p> <p>contains have a look what it contains</p> <p>submit</p> <p>extrinsic there's a couple formats you</p> <p>can submit them in and a Ana pub/sub to</p> <p>let you watch what's happening with</p> <p>those extrinsic s-- so if you actually</p> <p>want to inter inter oh if you want to</p> <p>communicate with substrate through the</p> <p>AH feces then these are the RPC is</p> <p>you're going to use and it's basically</p> <p>like here's an extrinsic it's already</p> <p>signed it's already done and dusted just</p> <p>submit it broadcast it whatever and let</p> <p>me know how it goes and you from this</p> <p>you'll get back various messages I think</p> <p>I know they were on the have a look</p> <p>maybe I've got some messages yeah I</p> <p>don't</p> <p>you'll get various messages to tell you</p> <p>that it's been validated that it's been</p> <p>broadcast that or that it's about to be</p> <p>broadcast that it's been broadcast and</p> <p>that it's been finalized or if it</p> <p>doesn't get finalized if something else</p> <p>gets finalized in its place and that</p> <p>it's now been dumped then you'll be</p> <p>again told that it's been okay so back</p> <p>to substrate 101 yes right to make to</p> <p>make substrate be as general as possible</p> <p>we didn't want to introduce data into</p> <p>the block header that may not be in</p> <p>every block chain that substrate that</p> <p>need not be in every block chain that</p> <p>substrate is gonna cater for rather we</p> <p>want to make the header strictly the</p> <p>information that is required for</p> <p>substrate and the rest of the rest of</p> <p>the information that might otherwise go</p> <p>into a header in normal block chains for</p> <p>example the timestamp instead is</p> <p>provided under a separate model that's</p> <p>outside of the header called the</p> <p>extrinsic and extrinsic just mean that</p> <p>it's like data that is extrinsic to the</p> <p>block chain so it's not it's not</p> <p>intrinsic to the chain</p> <p>it's not like part of its state or</p> <p>anything like that it's not a previous</p> <p>transaction or anything that it can draw</p> <p>upon directly but rather it's just data</p> <p>from the external world is extrinsic to</p> <p>the chain and so data from the external</p> <p>world is provided in this set of of</p> <p>snippets of pieces and each piece is</p> <p>called extra and extrinsic and it's just</p> <p>short for a piece of extra piece of data</p> <p>extrinsic to the chain so right so</p> <p>specifically the transactions that are</p> <p>coming in coming in from the external</p> <p>world they are indeed extrinsic</p> <p>so most block chains possibly all</p> <p>require there they're sort of</p> <p>transactions to be signed like they have</p> <p>a particular signature scheme and if</p> <p>they're not signed or if the signatures</p> <p>wrong then they'll never be considered</p> <p>they won't even make it into the system</p> <p>substrates a bit different so substrate</p> <p>says extrinsic scan there are perfectly</p> <p>valid extrinsic s-- that are not signed</p> <p>they're extrinsic the only thing special</p> <p>about them is that they're a bit of data</p> <p>and they come with some way of</p> <p>determining their length upfront so you</p> <p>you know you can pass them around on the</p> <p>network without worrying how long they</p> <p>are other than that they're they're just</p> <p>arbitrary bits of data they may be</p> <p>signed they may include a signature they</p> <p>may include a multi-sig they may not it</p> <p>doesn't really matter some pieces of</p> <p>data for example the timestamp so</p> <p>there's literal okay I can think of very</p> <p>easy Taric ways how you might possibly</p> <p>argue that a timestamp could be signed</p> <p>and that would make it valid like maybe</p> <p>if the the what's at the atoll the guys</p> <p>are on the atomic clocks like maybe</p> <p>signed it with one of the keys but still</p> <p>someone could steal the keys and then</p> <p>the signature it doesn't make it</p> <p>specifically valid nothing can make a</p> <p>timestamp specifically valid right it's</p> <p>a piece of data from the external world</p> <p>and the only thing that means a time</p> <p>star</p> <p>is correct as if we all agree that it's</p> <p>correct what time is it right now well I</p> <p>can say well it's 38 minutes past 6:00</p> <p>in the evening but it's if your watch</p> <p>says that it's 37 minutes past 6:00 then</p> <p>you know there is no way how without</p> <p>like finding a shared Authority there's</p> <p>no way how we can argue that one is more</p> <p>correct than another and certainly</p> <p>signing it isn't going to help all three</p> <p>authors just an arbitrary name that we</p> <p>call when we say author we just mean</p> <p>block author so this is a block</p> <p>authoring API this is an a this is an</p> <p>RPC that you use when you want to</p> <p>interact with the bit of substrate that</p> <p>is authoring blocks and this is actually</p> <p>incorrectly named it's very good that</p> <p>you brought it up it shouldn't be called</p> <p>extrinsic s-- or at least it's it's it's</p> <p>a little over general to call the</p> <p>extrinsic the only extrinsic that you</p> <p>can submit using this API are</p> <p>specifically signed extrinsic because</p> <p>it's coming from the RPC and therefore</p> <p>you have no other way other than looking</p> <p>for a signature to know that it's</p> <p>anything that's really sensible unsigned</p> <p>extrinsic switch for what it's worth we</p> <p>call inherence because they are we treat</p> <p>them as being inherently valid are are</p> <p>generated within substrate so extrinsic</p> <p>s-- is information that come from the</p> <p>outside of substrate and inherent are</p> <p>our extrinsic that come from within</p> <p>substrate and sorry transactions really</p> <p>come from the outside inherent come from</p> <p>with them they're both forms of</p> <p>extrinsic because they're both forms of</p> <p>data that can be introduced to the</p> <p>blockchain and that might make some</p> <p>sense to the runtime now if you don't if</p> <p>you don't sign some data then it's like</p> <p>well</p> <p>you know how does that how does that</p> <p>possibly work you know data's not signed</p> <p>then it could be anything right and the</p> <p>way that it works is the validators so</p> <p>the guys that basically say that this</p> <p>block is valid are the ones that get to</p> <p>be opinionated over whether this data is</p> <p>sensible or not and that's actually how</p> <p>this works in other blockchains as well</p> <p>so if you look to aetherium if the time</p> <p>stamp is actually just an opinion right</p> <p>a validator when they validate an</p> <p>aetherium block have an opinion over</p> <p>whether this time stamp is sensible or</p> <p>not and if it's not sensible they ignore</p> <p>the block they unilaterally decide to</p> <p>ignore the block and in in that sense</p> <p>substrate is equivalent in its treatment</p> <p>of inherent if a is up to a validator</p> <p>when they're proposing the block to put</p> <p>in sensible inherence and if they don't</p> <p>put in sensible inherence if there's</p> <p>inherent in correct or incorrect in the</p> <p>opinion of the other validators then</p> <p>their block will be considered useless</p> <p>and won't get any further attention so</p> <p>it's up to them to put in sensible</p> <p>values for the inherent extrinsic that</p> <p>are required by the block and this</p> <p>basically means that we can do all sorts</p> <p>of interesting stuff aside from time</p> <p>stamps I mean time stamps are the first</p> <p>use but we can do things like for</p> <p>example with para chained candidates for</p> <p>the polkadot relay chain there are</p> <p>that's another form of inherence why</p> <p>because which candidates you choose in</p> <p>order to in order to to be to be</p> <p>therefore finalizing is necessarily an</p> <p>opinion right it's different validators</p> <p>might choose different para chained</p> <p>candidate blocks to be finalized for</p> <p>that particular relay chain block</p> <p>there's no way of deterministic elite</p> <p>oozing the correct set of these guys</p> <p>it's just whichever ones happen to come</p> <p>come by you but if you put forward</p> <p>blocks that the other validators on the</p> <p>relay chain think are invalid perhaps</p> <p>pick</p> <p>they don't have the Associated data</p> <p>because there's no data availability for</p> <p>them or just perhaps because they're</p> <p>empty perhaps because they they just</p> <p>haven't seen them before whatever reason</p> <p>it is if they don't think that your</p> <p>opinion is is a good one over the</p> <p>selection of these blocks and they're</p> <p>free to ignore you in reality you know</p> <p>they'd have to be quite malevolent</p> <p>before they do ignore valid blocks</p> <p>because they get paid basically for</p> <p>passing these things but by and large</p> <p>it's up to the validators to self-police</p> <p>the content of the inherent transactions</p> <p>the the sorry the inherent extrinsic s--</p> <p>for the transaction extrinsic s-- there</p> <p>they are per se valid or invalid like</p> <p>you can check whether a transaction is</p> <p>valid by virtue of does it have a good</p> <p>signature and whatever account has</p> <p>signed it does it have enough funds at</p> <p>this point in order to pay for the the</p> <p>cost for it to be placed on chain and if</p> <p>those two answers are yes then it's all</p> <p>good and that's the difference between</p> <p>the two so this is the RPC for how you</p> <p>can submit them unlike aetherium we</p> <p>don't provide any account management</p> <p>stuff in here so what you can't do is</p> <p>provide is try and get it to sign in and</p> <p>to sign a transaction all of the signing</p> <p>happens external to the node so the node</p> <p>is minimal</p> <p>we do very well noticed the keystore</p> <p>package is there specifically for for</p> <p>block authors so far the validator nodes</p> <p>just stored their their block authoring</p> <p>keys so basically when you when you set</p> <p>up a node as a validator node which so I</p> <p>got away without doing this on the on</p> <p>the demo that I gave earlier by using</p> <p>the - - dev option which is shorthand</p>"},{"location":"todo/#for-chain-equals-dev-validator","title":"for - - chain equals dev - - validator","text":"<ul> <li>key Alice but I could have typed those</li> </ul> <p>in and it would have done the same thing</p> <p>and so when you pass it the key it will</p> <p>it will use that it will basically put</p> <p>that key into the the key store and then</p> <p>if it notices a key in the keystore is</p> <p>one of the validators and it's set to</p> <p>being a validator it will actually start</p> <p>signing what and and join in with the</p> <p>consensus so that's the key store is</p> <p>really just there for the for managing</p> <p>validators keys for consensus yeah I can</p> <p>see yeah so there'll be some shims or</p> <p>middleware in order to manage some of</p> <p>this some of these are pcs to make to</p> <p>make it compatible now I'll go into I'll</p> <p>go because this is kind of an</p> <p>interesting exploration I think so there</p> <p>are a few other modules chain does</p> <p>pretty much what you'd expect it to do</p> <p>it's it's about blocks and headers it</p> <p>lets you get transactions and as I have</p> <p>been chatting to a meal over the last</p> <p>few weeks and months the the point of a</p> <p>substrate node isn't to provide a</p> <p>generic sort of very generalized</p> <p>database for every all of your uses that</p> <p>you might have I mean etherium was kind</p> <p>of pushing in that direction we provided</p> <p>all sorts of lookups that we didn't</p> <p>really have to substrate keeps it</p> <p>minimal it's it's got a fairly you know</p> <p>that's one of its Maxim's of design and</p> <p>one of the ways that we keep it so one</p> <p>of the ways that this sort of minimal</p> <p>RPC comes out is the fact that you can't</p> <p>look up specific transaction hashes you</p> <p>can I think maybe get oh yes so you can</p> <p>get a block and the block will come with</p> <p>a bunch of extrinsic sand in those</p> <p>extrinsic will be the transactions and</p> <p>that's that's basically if you want to</p> <p>index if you want to have a you know get</p> <p>so get a transaction by its hash</p> <p>you're gonna have to go to a chain</p> <p>Explorer or a</p> <p>party service provider or whatever to</p> <p>get that now you can verify that that</p> <p>that's the case just by getting the</p> <p>block and transaction index and then</p> <p>going back to your node and using this</p> <p>RPC to get that block and then lookup</p> <p>that index in the extrinsic and you'll</p> <p>find your transaction or not but we're</p> <p>not going to do that indexing for you</p> <p>because it's too much work it's it's</p> <p>better done on a dedicated software yeah</p> <p>sure</p> <p>i-i'm sure or are all of the author and</p> <p>other extrinsic s-- you mean the entire</p> <p>chains worth</p> <p>if the blocks not created yet then you</p> <p>can't look it up at all when it's when</p> <p>the blocks being executed no no no so</p> <p>either the block has has made its way</p> <p>into the database it's finalized then</p> <p>it's good or you can't you can't read it</p> <p>at all during what sorry execution of</p> <p>the block or well when a block executes</p> <p>I can show you that that that code but</p> <p>basically there's an execute block</p> <p>function and it gets given you get given</p> <p>a bunch of bytes and it's up to you to</p> <p>execute those bytes so at the lowest</p> <p>level so at core a core level yes SR ml</p> <p>it's a lot easier but that that's full</p> <p>of a lot of opinionation that isn't</p> <p>necessarily indicative of your chain</p> <p>that you're writing on substrate</p> <p>yeah yeah you just get given a bunch of</p> <p>bytes and that's your block and it's up</p> <p>to you to interpret the look of the</p> <p>block as you as you desire okay let me</p> <p>let me go through the are pcs and I'll</p> <p>come back to you so yeah we can get</p> <p>header block block hash and there's also</p> <p>a runtime version that should actually</p> <p>be in state but it was a very late</p> <p>edition Thank You Tomic Thank You Tomic</p> <p>we have system which just gives you a</p> <p>bunch of information about the system</p> <p>just the name version and the chain</p> <p>that's basically just the the current</p> <p>running node for example we also have</p> <p>the JavaScript implementation of much of</p> <p>substrate and that will return different</p> <p>things from from these are PCs finally</p> <p>as the state this is the most</p> <p>interesting thing so again back in if we</p> <p>if we think about what you can query of</p> <p>a block of a blockchain state in other</p> <p>block chains usually it's like account</p> <p>balances whether an output is is spent</p> <p>or not how much is sitting there</p> <p>potentially some state of a contract you</p> <p>might even be able to make a call into a</p> <p>contract and have it execute we're a bit</p> <p>lower level with substrate as as might</p> <p>be imagined from the fact this is a</p> <p>library with a framework with which you</p> <p>build block chains but there are things</p> <p>that you can get from the current state</p> <p>of the chain are storage so we have at</p> <p>the moment this RPC reflects a single</p> <p>storage database so basically we have a</p> <p>merkel Merkel tree there is of arbitrary</p> <p>size keys and Val</p> <p>in pairs right so the tree itself stores</p> <p>basically any key value any set of key</p> <p>value pairs and the root is stored as</p> <p>the state root and that goes into every</p> <p>block as you change the storage as we</p> <p>change these keys and values then you</p> <p>can that that will obviously change the</p> <p>state and you can make it's very handy</p> <p>for building pair of chains because you</p> <p>can make very clear like client proofs</p> <p>that one particular block with one state</p> <p>given these transactions that executed</p> <p>or these extrinsic sigh should say that</p> <p>executed left another particular block</p> <p>with another particular State</p> <p>that's nothing nothing no really not</p> <p>really any different to how etherium</p> <p>works the main difference is that of</p> <p>generalization and with our road map</p> <p>that allow where we want to build</p> <p>multiple different cryptographic</p> <p>databases so if we if we think of the</p> <p>Merc alized</p> <p>key value storage that we have here as a</p> <p>one example of a cryptographic database</p> <p>then we want to actually extend this to</p> <p>other cryptographic databases and also</p> <p>add a a means of having many of them at</p> <p>the same time so if you're familiar with</p> <p>how aetherium works there is a every</p> <p>smart contract actually has its own sort</p> <p>of cryptographic database where it</p> <p>stores its key value pairs it's storage</p> <p>if you like and and then there's one</p> <p>sort of big one that all of these other</p> <p>the by virtue of them having state</p> <p>routes all of these other databases hang</p> <p>off substrate only has one but it's one</p> <p>very general one and in principle though</p> <p>that can now be expanded to have as many</p> <p>as as is desired and they can even be of</p> <p>different types and they can be</p> <p>dynamically added and removed in the</p> <p>similar way to that you would</p> <p>dynamically add and remove them in a</p> <p>theory and when smart contracts go in</p> <p>and out of existence</p> <p>we also have metadata which is a</p> <p>wonderful wonderful RPC that I will</p> <p>spend some time talking about when I</p> <p>address one of the other questions which</p> <p>was the color JavaScript</p> <p>sort of magically works and finally we</p> <p>have a pub sub for storage so you can</p> <p>subscribe to particular storage items</p> <p>and you can get notifications when those</p> <p>storage items change so if you</p> <p>understand how storage works and that's</p> <p>one of the other magical things about</p> <p>metadata that's what it kind of provides</p> <p>that's what it partly provides then you</p> <p>can basically keep an eye on that</p> <p>storage and just be notified when that</p> <p>entry changes yeah so Sergei can go into</p> <p>how smart contracts so this this little</p> <p>symposium will be will be split so I'll</p> <p>answer whatever sort of more general</p> <p>questions about substrate and then</p> <p>Sergey is going to do a little sort of</p> <p>walkthrough of deploying a smart</p> <p>contracting because explain some of the</p> <p>technicals behind the smart contracts</p> <p>and we can go into the events and and</p> <p>smart contract storage there this is</p> <p>specifically for substrate chains as a</p> <p>whole and this will be very likely look</p> <p>like the final RPC an API for para</p> <p>chains so with smart contract so we have</p> <p>a smart contract module and that exists</p> <p>as a module within substrates SR ml so</p> <p>you can basically make a substrate chain</p> <p>that can can manage smart contracts as</p> <p>well as do a bunch of other things like</p> <p>have governance and all the rest of it</p> <p>so we we kind of see smart contracts as</p> <p>a piece of functionality that you can</p> <p>answer your chain or not add to your</p> <p>chain as you see fit the</p> <p>on your use case some use cases that</p> <p>require a generalized sort of smart</p> <p>contract environment some a very sort of</p> <p>specific fixed-function chains and if</p> <p>their specific fixed function chains</p> <p>then like for example a plasma chain a</p> <p>plasma chain doesn't require a smart</p> <p>contract modules and these smart</p> <p>contracts in there right it's a fixed</p> <p>function chain that would that basically</p> <p>manages all of the other chains hanging</p> <p>off it and what to do if those chains</p> <p>want to do an early termination or or</p> <p>settle on the upper layer so I don't</p> <p>imagine all chains to have smart</p> <p>contracts from finality in fact I</p> <p>suspect many chain even perhaps a</p> <p>majority of chains won't have smart</p> <p>contract functionality</p> <p>there'll be they'll settle for having</p> <p>fixed function fixed pipe fixed block</p> <p>processing functionality that's</p> <p>upgradeable we like up readability cool</p> <p>so that's that's basically the our pcs</p> <p>now the interesting thing is how these</p> <p>interact with the JavaScript environment</p> <p>so we're developing because we like to</p> <p>give people Choice we're developing</p> <p>multiple JavaScript API is to interact</p> <p>with substrate and substrate modules</p> <p>now these api's are primarily geared</p> <p>towards interacting with the substrate</p> <p>runtime module library the SRM l so they</p> <p>are fairly their highest level right</p> <p>there are lower level components like</p> <p>for example you can use these pub subs</p> <p>with promises I believe at the</p> <p>JavaScript level but if you want to but</p> <p>we make it easy for you to use to build</p> <p>applications based around custom modules</p> <p>that you code in the SRM so you got a</p> <p>taste of that although it might have</p> <p>sort of flown past you a little bit in</p> <p>the demo because that was trying to get</p> <p>it all finished and more or less on time</p> <p>but I don't know if you noticed but when</p> <p>I wrote that that little sort of toy the</p> <p>I was able to interact with the toy in</p> <p>the browser as soon as the chain had</p> <p>been upgraded I actually in the console</p> <p>got like an object that that let me do</p> <p>it in like that was specific to them the</p> <p>code that I'd literally just written in</p> <p>rusty now I that wasn't a trick I didn't</p> <p>have anything up my sleeves it was it</p> <p>was literally that cool what happened</p> <p>was the runtime got upgraded although I</p> <p>didn't code any new JavaScript stuff</p> <p>what the the code that I wrote and</p> <p>annoyingly I can't really I don't have</p> <p>know let me see if I can find that code</p> <p>should be in substrate node template and</p> <p>if I remember correctly I might even</p> <p>have to I do okay so so if we go back to</p> <p>the substrate node template so this is</p> <p>this is the sort of demo node that I</p> <p>that I forked and started coding and I</p> <p>have this demo module and if you</p> <p>remember I did something like this I</p> <p>said I did post sender and then decoded</p> <p>this this little address and then also</p> <p>for the call</p> <p>it's calls demo dot set payment and that</p> <p>just worked despite me not actually</p> <p>having changed anything in the</p> <p>JavaScript</p> <p>I didn't even reload the page I think I</p> <p>certainly shouldn't have had to what</p> <p>happened was when I coded this module</p> <p>with play and set payment and when I</p> <p>coded this storage with the two entries</p> <p>here payment and pot part of this macro</p> <p>generates some metadata about what these</p> <p>functions are and what these storage</p> <p>items are and this includes the types</p> <p>this metadata is compiled into a sort of</p> <p>blob and then amalgamated with all the</p> <p>other metadata from all the other</p> <p>modules by virtue of this macro here</p> <p>construct runtime that you might have</p> <p>remembered I put the demo line in this</p> <p>then gets passed to through this macro</p> <p>which implements the api's into as a</p> <p>something that can be called into from</p> <p>the client so we have here one specific</p> <p>trait that we can implement called</p> <p>metadata as a metadata trait if we</p> <p>implement it it means that metadata RPC</p> <p>will work and what it will do is it will</p> <p>check to make sure it's actually</p> <p>implemented call into it which means</p> <p>dispatching into the newly compiled</p> <p>runtime that's been compiled into</p> <p>webassembly</p> <p>and interpreting this metadata and all</p> <p>this this this function does is it grabs</p> <p>the metadata from the runtime and that</p> <p>was caught that was built from this</p> <p>constructor and time and that was built</p> <p>from all of the individual modules which</p> <p>are each are built from their</p> <p>declarations of what they're stripped</p> <p>their storage are and what their what</p> <p>their module is that in terms of their</p> <p>function entry points and this gets</p> <p>passed into the JavaScript and as part</p> <p>of the substrate JavaScript libraries we</p> <p>have a couple of libraries that you can</p> <p>choose to use one is based on</p> <p>observables one is based on the bomb's</p> <p>framework that I did last year and these</p> <p>libraries will in interpret this</p> <p>metadata blob and turn into real</p> <p>JavaScript utility objects that reflect</p> <p>and</p> <p>[Music]</p> <p>and will dispatch to and utilize all of</p> <p>the all of the module specific stuff so</p> <p>if we go to the way they put it</p> <p>no just live demo yeah so if we go to</p> <p>demo then it will actually interpret</p> <p>will basically make Marshall all the</p> <p>arguments and dispatch it through the</p> <p>transaction dispatch system into yeah</p> <p>and similarly if we query what the pot</p> <p>is it will work out where this runtime</p> <p>given this this module stores the pot in</p> <p>its storage and then go into storage and</p> <p>check that using these storage are PCs</p> <p>and if you part of bonds is the fact</p> <p>that it's reactive so if you tie that</p> <p>into a reactive component if you</p> <p>remember at the end of the demo I very</p> <p>quickly did a little label that that</p> <p>tracked the pot going up and down what</p> <p>it's doing there is it's setting up a</p> <p>pub sub with the thing that it figured</p> <p>out all on its own with the storage</p> <p>location for pot and track the value it</p> <p>knew what the type was because it looked</p> <p>that to see that this pot type is T</p> <p>balanced and decoded it into a balanced</p> <p>type and then put that into a label</p> <p>formatted it correctly and put it on the</p> <p>screen and it did all of that without me</p> <p>really having to do anything other than</p> <p>implement it right here in rust so the</p> <p>idea with this is to make it not just</p> <p>painless but actually fun to code</p> <p>modules and the U is four modules what</p> <p>was one of the other that was another</p> <p>question mempool yes this is an</p> <p>interesting one so we rewrote the meant</p> <p>well</p> <p>Tomek I should say rewrote the mempool</p> <p>recently we call it the transaction pool</p> <p>same thing</p> <p>we wanted something that was general but</p> <p>also easy to use and it took a little</p> <p>bit of thought but what we came up with</p> <p>was a a pool that basically allows</p> <p>runtimes to specify dependency graphs</p> <p>arbitrary dependency graphs of</p> <p>transactions easily we wanted something</p> <p>that would work equally well between UT</p> <p>EXO model and a account and index model</p> <p>so basically a transaction pool that was</p> <p>equally viable to be used for something</p> <p>like Bitcoin and aetherium with the idea</p> <p>being that if we made something general</p> <p>enough for both of them it would</p> <p>probably be pretty general sufficiently</p> <p>at least for doing interesting other</p> <p>chains in the future so the way it</p> <p>basically works is the runtime gets</p> <p>queried and I can show you where this</p> <p>comes in the runtime gets queried</p> <p>through this validate transaction as</p> <p>part of a transaction Q trait so this is</p> <p>a trait that you have to implement in</p> <p>order for this transaction queue to work</p> <p>transaction pool actually just</p> <p>references the executive here so the</p> <p>executive is like a sort of overarching</p> <p>SRM L module that looks after just</p> <p>executing a block in general in</p> <p>particular it runs through each of the</p> <p>extrinsic and dispatches them off into</p> <p>the module that is expecting to that the</p> <p>extrinsic is sort of trying to call into</p> <p>all extrinsic in the SRM L framework</p> <p>have a they they may or may not have a</p> <p>sender they may or may not have a</p> <p>signature they may or may not have an</p> <p>index they may or may not have an error</p> <p>we actually allow we actually force or</p> <p>not force we actually facilitate</p> <p>extrinsic soar transactions to limit the</p> <p>number of blocks that they're valid for</p> <p>inherit</p> <p>right so you can make an extrinsic the</p> <p>transaction I should say that is valid</p> <p>for the 16 blocks between a thousand and</p> <p>twenty four and a thousand and forty</p> <p>right and it after a block a thousand</p> <p>and forty it's just no longer valid it</p> <p>can never possibly be make its way into</p> <p>a block chain this is needed for a bunch</p> <p>of other things particularly for having</p> <p>dust collection which I can go into</p> <p>after after I've talked about this if</p> <p>that's of interesting the transaction</p> <p>the way that the validate transaction</p> <p>thing works the important thing I want</p> <p>to show you is the inputs and the output</p> <p>so the inputs are the transaction fair</p> <p>enough</p> <p>the outputs are the trend is this</p> <p>transaction validity object let's see if</p> <p>I can find where this is defined this is</p> <p>basically a means of we see so we can</p> <p>see it's got like three potential states</p> <p>invalid valid or unknown l invalid oh no</p> <p>no and a pretty obvious what they mean</p> <p>valid so for a valid transaction we have</p> <p>a bunch of we have four sort of fields</p> <p>that we have to define priority so how</p> <p>what's this transactions priority</p> <p>amongst peers for which everything else</p> <p>is the same</p> <p>right so assuming this that everything</p> <p>else is is all other things being equal</p> <p>which one should we favor to put into a</p> <p>block for in aetherium style chain this</p> <p>would basically be what's the gas price</p> <p>if the gas price is higher then we just</p> <p>favorite more we also have requires and</p> <p>provide so requires is and we have this</p> <p>vector of transaction tags transaction</p> <p>tags are just Veck vu8 so in rust lack</p> <p>of UI it's basically just an arbitrary</p> <p>bunch of bytes right it's just a by the</p> <p>string yeah</p> <p>and these tanks they're therefore</p> <p>entirely up to the it's entirely up to</p> <p>the runtime how it what tags it uses it</p> <p>can tag them by hashes it could tighten</p> <p>them by integers it really doesn't</p> <p>matter could tag it by account IDs it</p> <p>could you know concatenate a bunch of</p> <p>these things and that could be the tag</p> <p>they're entirely arbitrary all that a</p> <p>transaction list transaction validity</p> <p>function has to state is what does it</p> <p>what tags does it require and what tanks</p> <p>does it provide now we can imagine for a</p> <p>for an aetherium style chain it would</p> <p>require the tags that requires are all</p> <p>of the tags actually let's start with</p> <p>the tax that it provides tags that</p> <p>provides our one tag that's formed by</p> <p>the concatenation of the account ID the</p> <p>sender ID and the current index the</p> <p>index of the transaction right the nonce</p> <p>yeah so you pop those two together</p> <p>that's your tag right that's just an</p> <p>identifier for the the thing that this</p> <p>transaction provides what it allows us</p> <p>to do is to then state what other</p> <p>transactions require in those terms so</p> <p>suppose you have a my transaction is</p> <p>sent from me my account dev and it's got</p> <p>an index of 10 right so for that to work</p> <p>in the etherium model there has to be a</p> <p>sent by me one with index 0 1 with index</p> <p>yeah and that would make 10 to be the</p> <p>next valid transaction so what it</p> <p>requires is all of those tags now that's</p> <p>a bit unwieldy for when we get into the</p> <p>thousands of or tens of thousands of</p> <p>transactions coming from a single</p> <p>account so what we say is only requires</p> <p>the tags that have not yet made their</p> <p>way onto the chain yeah and if if we get</p> <p>into the silly numbers like hundreds</p> <p>then we just say either unknown or</p> <p>invalid and we just say look this this</p> <p>transaction is just way ahead of</p> <p>schedule send it back sometime</p> <p>future and that that actually is more or</p> <p>less the way that the etherium the the</p> <p>parity etherium transaction queue sort</p> <p>of worked just not in these terms now if</p> <p>you're on a UT EXO chain then it's</p> <p>actually quite a bit easier because a UT</p> <p>EXO model like basically you've got what</p> <p>the tags are they're tags are just</p> <p>transaction output hashes yeah so your</p> <p>tags are it requires these unspent</p> <p>transactions or unspent transaction</p> <p>outputs so those transactions that are</p> <p>providing those outputs are specifically</p> <p>the things that are required and it</p> <p>provides well it provides its own hash</p> <p>its transaction hash so you can very</p> <p>quickly build a very easily build a</p> <p>dependency graph from aut EXO chain that</p> <p>fits the Maps quite fairly well on to</p> <p>this and we also have a longevity so</p> <p>longevity is basically it's valid now</p> <p>but for how many blocks will it continue</p> <p>to be valid in the future 4-bit Connor</p> <p>and aetherium that's infinity basically</p> <p>transactions don't become invalid just</p> <p>because time has passed but for for our</p> <p>substrate chains we have this notion as</p> <p>I said before of errors and the ability</p> <p>to inherently make a make a an extrinsic</p> <p>or a transaction in they're inherently</p> <p>invalid merely after the passing of time</p> <p>specifically blocks and that's what this</p> <p>sort of lets the transaction so yeah</p> <p>that's pretty much how transactions work</p> <p>in substrate this is more for the SR ml</p> <p>it is meant to be general so in theory</p> <p>it can be used perfectly easily from the</p> <p>core from if you want to build like your</p> <p>own from scratch substrate chain in</p> <p>principle this can be used fine but</p> <p>you're also free</p> <p>to write your own like there's there's</p> <p>nothing you can you can plug in your own</p> <p>cue if you want to write your own cue if</p> <p>you have something that this model can't</p> <p>can't manage to embed the nice thing</p> <p>about this though is that it goes to the</p> <p>runtime for all of its rules which means</p> <p>if you want to update your transaction</p> <p>formats and you want to introduce all</p> <p>sorts of new and crazy interesting stuff</p> <p>as long as you can put it in terms of</p> <p>priority requires provides and longevity</p> <p>then you can implement whatever it is</p> <p>that you want and when you upgrade the</p> <p>chain all of the full nodes all of the</p> <p>authoring nodes will all automatically</p> <p>use your new transaction semantics and</p> <p>they'll the transaction queues will</p> <p>function accordingly yep</p> <p>the only you can't modify so can you</p> <p>modify a transaction in the that's in</p> <p>the queue so what you can do is you can</p> <p>if a transaction has made its way into</p> <p>the queue because it said hey it's valid</p> <p>and you want another transaction to be</p> <p>able to to beat that one to it you know</p> <p>if the to a mutually one can you can</p> <p>make it mutually exclusive by by simply</p> <p>giving it the same tag but higher</p> <p>priority that will that will get the</p> <p>transaction kids are sort of boot it out</p> <p>the transaction queue only feeds</p> <p>transactions into the block if you just</p> <p>want a transaction to just become</p> <p>invalid before it's been finalized or</p> <p>before it's been before it makes its way</p> <p>into a block you can do that just as</p> <p>easily by having a sort of you know if</p> <p>in the execute block function if one of</p> <p>the transactions is this transaction</p> <p>then invalid block right and what will</p> <p>happen is the the unlucky guy who's</p> <p>using this transaction queue to to make</p> <p>a block will will find that adding this</p> <p>transaction makes their block invalid</p> <p>and</p> <p>and it's kind of bad form to do it that</p> <p>way you should try and like make it as</p> <p>much of a part of the queue as possible</p> <p>but if for whatever reason you can't do</p> <p>that then yeah you can make it invalid</p> <p>just by virtue of changing the runtime I</p> <p>get in the office</p> <p>Tomic can probably offer a little bit</p> <p>more insight into this basically</p> <p>priority is the is the first thing that</p> <p>it will select on and beyond that so for</p> <p>the transactions that have not yet</p> <p>become valid then basically it's just</p> <p>randomly choose randomly discarding</p> <p>one's not that random is is particularly</p> <p>great but it also minimizes any</p> <p>potential issues regarding censorship so</p> <p>if you've got like tons of nodes on the</p> <p>network and you really try to prevent</p> <p>some particular transaction from getting</p> <p>through and you're doing that just by</p> <p>spamming transaction out onto the</p> <p>transactions out onto the network we</p> <p>minimize the the worst case by by</p> <p>choosing transactions at random to</p> <p>discard because it's likely that</p> <p>eventually one node will eventually will</p> <p>mine that that that transaction that</p> <p>ultimately if lots and lots of people</p> <p>want to transact at the same time then</p> <p>there will be congestion so it's it's</p> <p>really just the case of randomly</p> <p>choosing transactions that come through</p> <p>I mean in principle priority here is</p> <p>that's precisely what priority is for</p> <p>times of congestion the runtime can</p> <p>basically state which transactions</p> <p>should be favored above which others but</p> <p>if if priority isn't enough or for</p> <p>whatever reason maybe everyone's got the</p> <p>same gas price I don't know whatever or</p> <p>you don't introduce any particularly</p> <p>compelling priority prioritization</p> <p>mechanism then random is is the best we</p> <p>can do</p> <p>cool Oh what was the what was the thing</p> <p>after transaction</p> <p>I've forgotten no is there something</p> <p>else to discuss yep okay anything before</p> <p>smart contracts yeah ah yeah okay yeah I</p> <p>can go into that so so the runtime</p> <p>encodes a lot a lot about what what the</p> <p>blockchain does how it works</p> <p>it doesn't encode everything in the</p> <p>substrate model because we don't want</p> <p>some things to be to be special what we</p> <p>could do is literally just put a rest</p> <p>executable on the chain and when that</p> <p>changes you have to kind of download the</p> <p>new one and run it but we don't like</p> <p>that there are I think I may well need</p> <p>to be corrected here but I think there</p> <p>are there is a certain other project</p> <p>that's trying to do governance and</p> <p>upgrade ability and that's more or less</p> <p>the model that it takes so it sort of</p> <p>basically puts its executable on the</p> <p>chain and it's up to the nodes to kind</p> <p>of download the new executable and run</p> <p>that I don't like that model I prefer to</p> <p>be a little bit more conservative about</p> <p>the specific component that can be</p> <p>upgraded and when we accept that part of</p> <p>the logic doesn't sit on chain for</p> <p>example the peer-to-peer networking</p> <p>library I don't think it's sensible to</p> <p>put that logic on the chain and there's</p> <p>even questions about putting consensus</p> <p>logic on the chain it could be that if</p> <p>consensus logic is on the chain then you</p> <p>have this kind of monoculture almost</p> <p>monocultural strategy for the consensus</p> <p>and that may lead to</p> <p>attack vectors by virtue of knowing that</p> <p>all of the nodes use the same strategy</p> <p>so if we're happy with not putting all</p> <p>of our logic onto the chain then the</p> <p>question is given that we need to have</p> <p>the same data structures ostensibly on</p> <p>the chain like in the runtime that's</p> <p>upgradeable and off the chain in the</p> <p>sort of general node itself how do we</p> <p>how do we manage the fact that sometimes</p> <p>those structures will be those data</p> <p>structures like transactions for example</p> <p>could be changed over the course of a</p> <p>chains life how do we how do we like</p> <p>manage the fact that these transactions</p> <p>have to then be sent they have to be</p> <p>stored in a transaction queue and they</p> <p>have to be sent over the network there</p> <p>have there has to be some way of</p> <p>handling these things right so we need</p> <p>some sort of object and that's where</p> <p>these opaque objects come in we need to</p> <p>a block needs to have some</p> <p>characteristics and there has to be some</p> <p>object that we can call a block but we</p> <p>don't need to go into the specific</p> <p>meaning of a block beyond basic the</p> <p>basic semantics of here's how to read a</p> <p>block number here's how to read the</p> <p>parent hash and these these very basic</p> <p>types or what we call the opaque types</p> <p>and they are the fundamental types of a</p> <p>block chain that don't change from</p> <p>Genesis onwards the in principle they're</p> <p>basically fixed now you say oh well hold</p> <p>on the extrinsic format is fixed and the</p> <p>block format is fixed and you know then</p> <p>surely you can't upgrade and it's like</p> <p>well actually it that's the reason that</p> <p>they are opaque is because most of the</p> <p>data that they contain is not stored in</p> <p>terms of specific fields like the the</p> <p>real meaning</p> <p>but rather it's just a blob a generic</p> <p>blob and it's only the bits of the data</p> <p>that we actually need to know for</p> <p>example we need to know the length of</p> <p>the transaction yep the extrinsic we you</p> <p>know because if we're going to send it</p> <p>around we need to how long it is and so</p> <p>what we do is we if we're going to</p> <p>concatenate it together into a block</p> <p>then we need to know how long each</p> <p>particular piece of the concatenation is</p> <p>so we we say write the one bit of a</p> <p>transaction of an extrinsic transactions</p> <p>format is going to be the length at the</p> <p>prefixed length but everything beyond</p> <p>that we're going to leave undefined as</p> <p>to its meaning we're just going to tell</p> <p>you how to decode and encode it you</p> <p>decode it by reading the length and then</p> <p>reading that many other bytes I'm not</p> <p>going to tell you what those bytes mean</p> <p>but that's how you decoded it and you</p> <p>encode it by seeing how long it is and</p> <p>then putting the length at the beginning</p> <p>and then following up with the other</p> <p>things by avoiding defining this stuff</p> <p>we can then define it in the runtime and</p> <p>then as runtimes upgrade we're not left</p> <p>with incompatible data structures that</p> <p>for handling these things in the client</p> <p>now it's important that so this isn't</p> <p>something that we do with every type</p> <p>it's just the fundamental cut types that</p> <p>clients do tend to have to be able to</p> <p>handle basically because we need to pass</p> <p>these types around the network or</p> <p>because we have to interpret them for</p> <p>the consensus algorithm so block headers</p> <p>one type extrinsic</p> <p>one of the type and I think hashes may</p> <p>be although hashes are paint data anyway</p> <p>I think it's basically just those two</p> <p>types yeah yeah although again</p> <p>signatures are opaque data anyway</p> <p>specific so you've got two types of</p> <p>signatures that float around in</p> <p>substrate you have to consent there are</p> <p>signatures on the consensus side and</p> <p>signatures on the signed on the</p> <p>transaction side so signatures on the</p> <p>transaction side they don't need to be</p> <p>the same and the runtime entirely</p> <p>interprets those I can well imagine</p> <p>extra</p> <p>substrate chains that don't have any</p> <p>signing any cryptographic signing on</p> <p>them at all that they're they're just</p> <p>you know the validators choose which</p> <p>things come along they you know from</p> <p>maybe some trusted corporate centralized</p> <p>database and they're just funneling this</p> <p>data in and it's going into the chain</p> <p>and just being recorded and maybe</p> <p>there's some state transitions that</p> <p>happen on the chain but basically it's</p> <p>that that's there's no need for</p> <p>signatures the consensus side yes there</p> <p>are signatures but I guess the consensus</p> <p>algorithm to define their own</p> <p>cryptography anyway I mentioned what</p> <p>sorry yeah so I I kind of spent a while</p> <p>describing that but I mean I can I guess</p> <p>I can probably if I can launch a node do</p> <p>I have one already oh yeah sure</p> <p>okay so yeah I have a node running okay</p> <p>so this is I think the demo node I'm</p> <p>gonna upgrade it okay so</p> <p>yeah okay so is that too small I guess</p> <p>that's way too small right how do i is</p> <p>that still too small it's too big okay</p> <p>so this is template node V - which I</p> <p>think means the demo is in but I can I</p> <p>can check this by so I mentioned there</p> <p>was the run time object fun time okay so</p> <p>the run time has a bunch of these are</p> <p>the various modules in the run time</p> <p>right so balances consensus core demo</p> <p>that's the one I just coded earlier</p> <p>today system timestamp upgrade key and</p> <p>version these as I mentioned come from</p> <p>the metadata so I can I can show you the</p> <p>code I mean it's it's I don't know how</p> <p>interesting is if we go into the</p> <p>double-oh-seven</p> <p>if we go into the double-oh-seven</p> <p>library and then the double-oh-seven</p> <p>substrate and then the bonds this is</p> <p>where they get created let me see if I</p> <p>can make this a bit bigger okay</p> <p>can you read that just about</p> <p>yeah I need a I need the drum player</p> <p>okay so these are these are the sort of</p> <p>easy ones that just they're just sort of</p> <p>hard-coded height header head fash name</p> <p>version and chain I mean you saw the RPC</p> <p>end of these we have this node service</p> <p>that just ensures there's a single</p> <p>WebSockets connection to the node so</p> <p>it's like a singleton and then we can I</p> <p>assure a request and these these are</p> <p>these are single shot requests some of</p> <p>these like head there subscriptions so</p> <p>there they use the pub sub functionality</p> <p>we have runtime version so I can eat I</p> <p>can I can give you a lighter quick and</p> <p>runtime I think it was in the core and</p> <p>then console log and that's what comes</p> <p>back very simple got the api's this this</p> <p>exactly represents this structure in</p> <p>rust that is in runtime template yeah so</p> <p>this this represents exactly this</p> <p>structure if I change this structure and</p> <p>upgrade the upgrade the chain then this</p> <p>will automatically update if I run this</p> <p>this thing again it will it will give me</p> <p>the new values yeah and it's the meta</p> <p>it's actually it's not the metadata that</p> <p>encodes that I think but that is that is</p> <p>fetched in this from the runtime in the</p> <p>same way that the metadata is fetched so</p> <p>the meta metadata is built automatically</p> <p>per module in the runtime amalgamated</p> <p>together by virtue of a couple of macros</p> <p>and then pass the line into the</p> <p>JavaScript and in the JavaScript we have</p> <p>a so we actually have a serialization</p> <p>library very very lightweight basically</p> <p>just memory representation serialization</p> <p>library and we have the opposite in</p> <p>JavaScript so we can serialize and</p> <p>deserialize in rest and we have the same</p> <p>thing in JavaScript and we can kind of a</p> <p>bit like a bit like JSON or whatever</p> <p>except binary and sort of designed to be</p> <p>very fast and very minimal lightweight</p> <p>yeah that's yeah the you mean these</p> <p>modules yeah so these are indeed there</p> <p>is a web pack running somewhere yeah</p> <p>yeah</p> <p>so got like MPM sitting around in the</p> <p>background updating are checking for</p> <p>changes and packing it all together ok</p> <p>so there's there's two things going on</p> <p>so the first is the these module these</p> <p>UI components those you have to code</p> <p>independently so they don't come from</p> <p>rust they're not automatically made you</p> <p>actually if you want to add a new a new</p> <p>module you have to sort of get get yeah</p> <p>typing fingers out and and and go into</p> <p>wherever it was that I went into now</p> <p>here we go yeah where is it now here so</p> <p>this is the yeah this is the UI and this</p> <p>isn't special at all this is just</p> <p>standard reacts semantic UI with web</p> <p>pack and NPM packing things in there</p> <p>looking out and watching it and packing</p> <p>it in the background so there's nothing</p> <p>I don't I don't so if I if I add any</p> <p>module then I have to press controller</p> <p>yeah but what happens I didn't press</p> <p>control I just now to get sorry if I do</p> <p>a blockchain upgrade I don't I don't</p> <p>have to press ctrl R now because the</p> <p>metadata automatically gets updated in</p> <p>the background so that doesn't come from</p> <p>the thing I was mentioning earlier with</p> <p>the hard-coded things so the bonds these</p> <p>bonds here the version bond and the the</p> <p>name chain the hi header hash these are</p> <p>all hard-coded they don't change their</p> <p>fundamental are PCs that substrate</p> <p>provides but the other things the things</p> <p>like if I go to run time and like I</p> <p>don't know balances if I want to get the</p> <p>balance of an account or accounts do I</p> <p>have let's decode an account let's</p> <p>decode this account so I want to get the</p> <p>balance of this guy then I can decode</p> <p>that into an account ID and give it to</p> <p>balance and then print the output and</p> <p>it's going to tell me that this guy</p> <p>doesn't have any money I think yeah</p> <p>balanced zero and then if I if I gave</p> <p>this guy some money so let's send some</p> <p>funds to him or her it's a hex address</p> <p>I'm not sure if they have gender do I</p> <p>have any Alice has got some I guess</p> <p>Alice is a girl and I'm going to send I</p> <p>don't know if I send a thousand units</p> <p>that's going through sent and then if I</p> <p>go back to balance is then we go now</p> <p>it's got a thousand yeah so this stuff</p> <p>when we go into specific run time</p> <p>modules they're not built they're not</p> <p>they don't come in by virtue of this</p> <p>code this code builds them</p> <p>programmatically from the metadata</p> <p>is has a pub/sub relationship with the</p> <p>with the node itself so as the nodes</p> <p>runtime gets upgraded this finds out</p> <p>about the upgrade grabs the metadata and</p> <p>rebuilds all of those objects and data</p> <p>structures and letters now interact with</p> <p>with the new runtime in a organic</p> <p>fashion but if we want to add UI</p> <p>components then we have to go in and do</p> <p>them ourselves and press controller the</p> <p>real a chain what what does it use</p> <p>so polka-dot uses power to codec</p> <p>polka-dot uses basically all of</p> <p>substrate like there's not much in</p> <p>substrate smart contracts is the only</p> <p>thing it doesn't use and yeah other than</p> <p>that it looks pretty similar to our</p> <p>basic substrate node so it's got all of</p> <p>the sort of functionality in apart from</p> <p>a smart contract but it does have an</p> <p>extra module that's specific to polka</p> <p>dot called</p> <p>para chains module so I haven't I'm not</p> <p>like it's been a little while since I</p> <p>looked at the para Chains module but</p> <p>that's something that will become pretty</p> <p>important</p> <p>over the next POC so PRC 3 was dedicated</p> <p>mainly to our new consensus algorithm</p> <p>that would be the final our algorithm</p> <p>for polka dot shaft</p> <p>or grandpa I don't know you know I mean</p> <p>I do know obviously shaft but some</p> <p>people don't not everyone agrees yeah</p> <p>sure so shaft is a actually is al here</p> <p>so al al invented shaft at the time it</p> <p>was called afge Al's finality gadget but</p> <p>we're kind of renaming it and basically</p> <p>it's a progressive adaptive progressive</p> <p>finality consensus algorithm designed</p> <p>specifically for polkadots use case and</p> <p>the idea is that it's a it adapts to</p> <p>network situations and validator</p> <p>pluralities if you have lots of</p> <p>validators sorry if you have few</p> <p>validators and a really good network</p> <p>then shaft will finalize as quickly as</p> <p>instant an instant finality algorithm</p> <p>like tender mint or rhododendron which</p> <p>is our sort of take on pbft for the</p> <p>blockchain but even if you have slower</p> <p>Network and lots of validators it will</p> <p>finalize as fast as it can behind the</p> <p>scenes and the way it does that is by</p> <p>having a transitive relationship over</p> <p>the blocks so the way that pbft derived</p> <p>algorithms work in general is you have a</p> <p>candidate block so every every block</p> <p>number that you want to finalize every</p> <p>block that you want to finalize there is</p> <p>a candidate right it's not yet finalized</p> <p>so it's just one of many and then you</p> <p>put it to a bunch of vault authorities</p> <p>or validators that the participants in</p> <p>this consensus game and they will each</p> <p>if it's a pbft based thing they'll do a</p> <p>a pre commit</p> <p>to basically say this is the one that we</p> <p>think should win and then if they see</p> <p>enough other pre-commit they'll they'll</p> <p>move on to a commit and there were rules</p> <p>about how you whether you can change</p> <p>from a pre given that you've pre</p> <p>committed on one thing whether you can</p> <p>change your you know what what you're</p> <p>allowed to commit to and if you've</p> <p>committed on one thing whether you're</p> <p>allowed to switch that commitment and</p> <p>these rules basically guarantee that</p> <p>assuming no more than two thirds plus</p> <p>one Byzantine nodes or Byzantine</p> <p>participants in the game that you will</p> <p>always come to an agreement on what it</p> <p>is that on a particular candidate now</p> <p>this is fine it's a perfectly reasonable</p> <p>way to go but the problem is that block</p> <p>it's not optimal because block chains</p> <p>have relationships blocks have</p> <p>relationships between each of them so</p> <p>blocks that are all of the same number</p> <p>so they're all at the same level they're</p> <p>just can different candidates for the</p> <p>same potential slot don't have much of a</p> <p>relationship beyond being mutually</p> <p>exclusive but blocks that appear before</p> <p>so parents or ancestor blocks have a</p> <p>very very strong relationship right</p> <p>cryptographic relationship we store</p> <p>their hash which means as an implication</p> <p>that if you voted for block I don't know</p> <p>that that 68 references by virtue of its</p> <p>parent hash you're you've also voted for</p> <p>that right you've also voted for 66 or</p> <p>Genesis block assuming that the network</p> <p>conditions are such that you are not</p> <p>going to be able to afford to finalize</p> <p>every block then a vote for 68 should</p> <p>definitely imply a vote for 64 67 and so</p> <p>forth but for that 67 yep so if there's</p> <p>two folks if there's a fork and what</p> <p>it's made its way to block deep</p> <p>okay maybe asn't made yeah actually you</p> <p>could have in principle have made it's</p> <p>way too much deep just at the production</p> <p>stage then it's important that any vote</p> <p>not allowed to do under this transitive</p> <p>model is both commit to 68 on one fork</p> <p>and to the 67 on the other fork and that</p> <p>that's one of the things that now</p> <p>becomes illegal but because that's</p> <p>illegal it what it means is that we can</p> <p>interpret a vote for 68 as a vote for</p> <p>all of the blocks that haven't yet been</p> <p>finalized on that on that fork and if</p> <p>suppose we suppose where that last the</p> <p>most recently finalized block is</p> <p>terrible network conditions the most</p> <p>recent recent finalized block is like</p> <p>say block 50 yeah so we're running 18</p> <p>blocks in advance of the of the most</p> <p>recent sort of had agreed on head of the</p> <p>chain then if we've seen let's suppose</p> <p>we have 10 validators and they're</p> <p>basically just validate they're just</p> <p>voting for the blocks that they see we</p> <p>can only get out one vote per block and</p> <p>it's our vote so actually that's not</p> <p>I've got 20 validators and we can only</p> <p>get out one vote per block what would</p> <p>happen is that under Undershaft these</p> <p>votes we would always be running at the</p> <p>actually no because we only need \u2154 so</p> <p>it'd be the 13<sup>th</sup> or 14<sup>th</sup> most recent</p> <p>vote vote because we can accept all of</p> <p>the votes that are that are were on</p> <p>blocks after let's say where were 50 so</p> <p>suppose we're trying to finalize like I</p> <p>don't know 53 yeah all of the votes on</p> <p>that fork after 53 so every validator is</p> <p>like doing one vote per block so one of</p> <p>them is voted on 54 one of them is voted</p> <p>on 55 one</p> <p>voted on 56 all the way up to 67 or 68</p> <p>where every were then it's likely that</p> <p>every new block \u2154 plus 1 will have</p> <p>voted on one more than the last block in</p> <p>total access account ensures</p> <p>every new block that's being produced</p> <p>that validator will be voting on that</p> <p>new block which will imply they voted on</p> <p>all of the blocks up until that new</p> <p>block which will imply you've got one</p> <p>more vote assuming a constant cycling of</p> <p>validators one more vote on that chain</p> <p>in general and so because that chains</p> <p>been brought forward by a block because</p> <p>everyone's voting on that chain then the</p> <p>the the the most recent block to be</p> <p>finalized will probably be a bit further</p> <p>along as a network conditions improve we</p> <p>can get invalidated can get more</p> <p>messages out then that will catch up</p> <p>naturally because the greater number of</p> <p>votes will be recent and and therefore</p> <p>again transitive relationships being</p> <p>what they are you'll be able to</p> <p>basically form a consensus that two</p> <p>thirds plus one validators agree that in</p> <p>fact 62 is the most recent shared block</p> <p>that they can all finalize it's a pain</p> <p>to spot when a validator has behaved</p> <p>badly basically because the rules are</p> <p>transitive sorry yeah rules are</p> <p>transitive and so you have to enter into</p> <p>this in the worst case enter into this</p> <p>game of querying well hold on you you as</p> <p>a validator voted for this block on this</p> <p>chain but yet you voted for that block</p> <p>on that chain why what were you seeing</p> <p>what what signatures did you see that</p> <p>made you switch chains and they can</p> <p>either equivocate and say move don't</p> <p>know because they actually they switch</p> <p>chains in</p> <p>invalidly or they can provide you with</p> <p>the signatures in which case you have to</p> <p>go to the next guy along and say well</p> <p>you signed for this chain but you you</p> <p>know and the game continues basically</p> <p>it's quite a an unwieldy game and it's a</p> <p>it's a bit of a pain it's a bit tedious</p> <p>to play but it's it's something that can</p> <p>happen on chain and it's not the end of</p> <p>the world beyond that it's it's got some</p> <p>very nice proofs about how live it stays</p> <p>in an asynchronous environment and its</p> <p>optimal over the it uses the notion of</p> <p>block transitivity optimally in</p> <p>determining under a pbft style mechanism</p> <p>which is the most recent lock that it</p> <p>can be considered final okay</p> <p>under optimal Network conditions</p> <p>assuming the validators are well</p> <p>connected with each other and that their</p> <p>plurality because I mean it's pbft so</p> <p>you can't get around this N squared</p> <p>message passing stuff requirements but</p> <p>assuming that they're well connected and</p> <p>and there aren't too many of them then</p> <p>you know I don't I mean you know this is</p> <p>where empirical measurements come in but</p> <p>certainly with our test net so far</p> <p>there's no reason to think that we can't</p> <p>handle</p> <p>final final is finalizing most blocks so</p> <p>not staying very far behind the block</p> <p>production head at all so the block</p> <p>production is handled by a separate</p> <p>consensus mechanism that doesn't provide</p> <p>finality at the moment we're moving</p> <p>towards or and which is a randomized</p> <p>shuffled version of hora which basically</p> <p>just sounds for Authority round and you</p> <p>just go around a bunch of round-robin</p> <p>style block production game but it's our</p> <p>intention eventually to move to probably</p> <p>something similar to a ruborous which is</p> <p>a it's basically like proof of authority</p> <p>mapped on a proof-of-work mapped onto a</p> <p>proof of authority schema so all thority</p> <p>get given lucky slots whereby they can</p> <p>mine a block and and it's a way of</p> <p>generating generating these lucky slots</p> <p>and and I'm ministering them in such a</p> <p>way that that you get given a bunch of</p> <p>guarantees about Byzantine tolerance</p> <p>so Network network topology or</p> <p>peer-to-peer networking in general we're</p> <p>using lib p2p which is pretty modular I</p> <p>would in principle there's nothing that</p> <p>would stop you from writing a new module</p> <p>that would provide the sort of</p> <p>networking that yeah I mean if you want</p> <p>something like Onion Routing on like</p> <p>mixed nuts yeah I don't see why that</p> <p>wouldn't be possible using the existing</p> <p>network module system worst case it's</p> <p>probably like implementing it as a as a</p> <p>new API but that's something we'd look</p> <p>into now I think I think it's what you</p> <p>can can build on top of it I mean we'd</p> <p>certainly be interested to sort of</p> <p>explore if the API is a sufficient in</p> <p>order to provide that but I suspect they</p> <p>might be okay more questions when how</p> <p>long it was at 8 p.m. do we want to</p> <p>maybe you think yeah yeah I it will be a</p> <p>little bit harsh but yeah I think ok</p> <p>let's let's erm maybe move the questions</p> <p>towards the end and do a I don't know</p> <p>some exciting stuff do you want to plug</p> <p>in the HDMI oh yeah I'm glad that you're</p> <p>doing this cuz I need to go to toilet</p> <p>yeah yeah sure thing use do we do we</p> <p>have working toilets yeah yeah</p> <p>outside so gay oh cool</p> <p>so let's get started this demo is like</p> <p>well it wasn't prepared at all because</p> <p>of his ins and I and I had to improvise</p> <p>so yeah um yeah let's get started so</p> <p>because I basically don't have any UI</p> <p>because of as I mentioned reasons I have</p> <p>to do like I have to craft in extrinsic</p> <p>by hand</p> <p>basically yeah but I have some little</p> <p>code snippets that actually can help me</p> <p>with that so it's not that problematic</p> <p>is it okay yeah</p> <p>okay so let's start this let's start</p> <p>with a fresh chain for that that make</p> <p>that maybe might take some time</p> <p>yep yep it's basically the branch a</p> <p>second I know I would say now because</p> <p>yeah for some reason I chose to use the</p> <p>soft shoe type oh yeah so let's clear</p> <p>the DB and then let's launch this new</p> <p>chain yeah so it seems to be working and</p> <p>yeah so so to make an extrinsic we need</p> <p>some to do some boilerplate code and for</p> <p>that we need a genetics hash so like it</p> <p>it is required to create extreme six</p> <p>that that can be executed on this</p> <p>particular change so we need to first</p> <p>fetch the block hash of the Ganesha's</p> <p>and for that I will I'm going to use</p> <p>the RPC cash so I will call block hash</p> <p>function this argument zero which which</p> <p>is for Genesis block and so oh yeah</p> <p>actually it's already there yeah and</p> <p>after that I will regenerate all extreme</p> <p>six so yeah so this extrinsic this big</p> <p>blob of up our data is contains</p> <p>instructions to deploy a certain</p> <p>contract and the the most of this data</p> <p>actually represents webassembly smart</p> <p>contract and yeah let's let's actually</p> <p>submit that extrinsic up have this one</p> <p>but it doesn't yeah oh yeah</p> <p>yep so to verify that it actually</p> <p>executed well let's see the substrate UI</p> <p>oh do you have an idea how to look up or</p> <p>a nonce of Ellis yeah yeah yeah</p> <p>as I said network I can connect to you</p> <p>ah yeah it's def okay yeah in JavaScript</p> <p>oh sorry sorry guys I can't stop I come</p> <p>on okay so the runtime and then balances</p> <p>is where the hold on it's not system by</p> <p>the index is stored and then I can't</p> <p>nonce and then which I can't ah</p> <p>Ellis Oh Alice and we should get Alice's</p> <p>so we need to introduce a the seed for</p> <p>Alice which is a pain to do if you don't</p> <p>do you have some key I yep and try to</p> <p>just execute it in here yeah</p> <p>it's okay yeah it just works</p> <p>oh but is it the latest version of</p> <p>something it's from air each hour but</p> <p>I'm not sure yes later</p> <p>yeah does work cool totally I expect</p> <p>okay</p> <p>oh how can I help you I want to get</p> <p>these Safari oh okay</p> <p>right so we put that scene in there you</p> <p>put it yeah so while this has this yeah</p> <p>now this is a short oh yeah this is</p> <p>something that should go over actually</p> <p>because this is kind of cool but I'll do</p> <p>it afterwards so we can try that</p> <p>everyone can see what's happened there</p> <p>right okay</p> <p>Oh doesn't suffice all that well</p> <p>I wouldn't be surprised actually okay</p> <p>[Music]</p> <p>maybe it's not about ten part I mean</p> <p>maybe yeah nons account okay</p> <p>maybe should open fire</p> <p>let's just check decode and then Alice's</p> <p>ID okay so that's done something that</p> <p>wasn't a type error but it's so that</p> <p>means that our transaction actually got</p> <p>in and we deployed the test contract so</p> <p>now I'm gonna show what kind of contract</p> <p>this is yeah so so this contract is</p> <p>basic counter which has actually two</p> <p>functions to action that we can actually</p> <p>execute on it let me do ya so the first</p> <p>one is in command that takes you 32</p> <p>parameter which specifies by the value</p> <p>by which we should document this counter</p> <p>and get function which basically returns</p> <p>the value and when the contract is</p> <p>executed we just read input data it's</p> <p>basically the same as in Hulme and</p> <p>decode it into this action</p> <p>in a very enumeration and then depending</p> <p>on what actual variant of this you know</p> <p>we performing the action and this in</p> <p>case of increment we just query the</p> <p>contract storage by certain key which is</p> <p>the specified value and then save it</p> <p>back into the storage encoding it and</p> <p>before that and get is basically just we</p> <p>read the storage and return that value</p> <p>and that's it yeah</p> <p>so this contract is already on on the</p> <p>this chain and yeah so there is a</p> <p>extrinsic that which with which we can</p> <p>call this specific contract and it takes</p> <p>address of that contract and address is</p> <p>calculated by the constructor code of</p> <p>this contract and the original address</p> <p>which sent this which sent the create</p> <p>extrinsic and this so again yeah</p> <p>actually it's used and so it's specified</p> <p>right here so for the first transaction</p> <p>it was zero extrinsic and for the second</p> <p>one it's one yeah okay I see what you</p> <p>mean for determining contract address</p> <p>nonce is not used only code of</p> <p>constructor a region and just like</p> <p>input data and that's it yeah yeah</p> <p>basically yes but you can alleviate it</p> <p>with providing different data so we push</p> <p>this issue to user side yeah</p> <p>and yes so we doing call this to the</p> <p>contract at the specified address this</p> <p>we thinking some funds to it and also</p> <p>specifying how much gas we want to</p> <p>allocate to that and also we're</p> <p>providing the input data for the</p> <p>contract and this data is actually just</p> <p>encoding the index of the action so in</p> <p>in our case it's 0 so it corresponds to</p> <p>this variant and these four bytes</p> <p>encodes basically number by which we</p> <p>increment yeah</p> <p>and let's let's execute this yeah for</p> <p>now it's the only way but like we</p> <p>basically don't have either cell right</p> <p>now and it's the thing that is</p> <p>developing right now yeah so yes</p> <p>and so these extreme six extrinsic is</p> <p>for calling this contract</p> <p>yep so I think it is executed and to</p> <p>verify that it's actually performing the</p> <p>the task let's just check the substrate</p> <p>storage for for this corresponding</p> <p>storage key of that contract and I have</p> <p>because it's kind of hard to my to know</p> <p>which address is that I have a special</p> <p>function that actually calculates this</p> <p>for me and yeah and let's take it and</p> <p>[Music]</p> <p>it's really yeah so okay here's the</p> <p>result</p> <p>and it's corresponds to one in encoded</p> <p>in little endian format and this is a</p> <p>specific thing for encoding the length</p> <p>of this data so yeah it basically worked</p> <p>and then let's try to increment it once</p> <p>again by I don't know</p> <p>yeah wait a second I don't understand</p> <p>that</p> <p>so this extrinsic is in memory pool and</p> <p>let's wait until it actually yep it's</p> <p>mind and then let's query the storage</p> <p>and yeah it looks like it's eight yeah</p> <p>sure yeah that's a good question let me</p> <p>show you know so basically it's more</p> <p>more like a few Mike environment and so</p> <p>for now we basically have bare minimum</p> <p>for writing contracts and it's I get</p> <p>said storage and then call create which</p> <p>basically is very similar to thin ones</p> <p>return checking input size and also like</p> <p>this it also have has a scratch buffer</p> <p>and it's something that is not in Hulme</p> <p>so because of yeah I didn't mention that</p> <p>that storage in</p> <p>substrate contracts have like arbitrary</p> <p>size at values so you can put not only</p> <p>you query it you you can basically</p> <p>return it in this user specified area</p> <p>I mean contracts it's fight area of</p> <p>memory but then like it's like if the</p> <p>contract doesn't track track the size of</p> <p>the values that it actually puts in in</p> <p>this in storage then it could easily</p> <p>overwrite the like memory of the</p> <p>contract and this can be a bad thing so</p> <p>because of this we all arbitrary size</p> <p>that values are put into scratch buffer</p> <p>and then contract can actually query</p> <p>this buffer to actually load data from</p> <p>it yeah so it depends actually so you</p> <p>can't use I know anything that depends</p> <p>on files trading and things like that</p> <p>but like everything that doesn't require</p> <p>my saturating system things like files</p> <p>and things like that and can be compile</p> <p>it to the assembly and then probably</p> <p>fine</p> <p>yeah so basically this system is very</p> <p>similar to a theme and we basically have</p> <p>like a smattering very similar to a</p> <p>theme I mean like every year Vice</p> <p>Minister action is metrid and like I</p> <p>mean every instruction in the block just</p> <p>Metford as the price of the dairy prices</p> <p>are similar up and just deducted from</p> <p>some counter and if it goes to the zero</p> <p>then there's out of gas succession yeah</p> <p>so we are planning on bringing in</p> <p>chromatic gas yeah yeah and also they</p> <p>think I wanted to mention that we about</p> <p>the API that we are also thinking about</p> <p>giving the contractor on time</p> <p>chance to call different modules outside</p> <p>of I mean inside the run time so it can</p> <p>actually call do Kevin and well yeah so</p> <p>means governance modules even the power</p> <p>chain module that would forward any</p> <p>potentially could could have open an</p> <p>entry point a function call to forward</p> <p>messages into a para train so we can</p> <p>imagine is a smart contract sitting on</p> <p>one pair of chain sending out messages</p> <p>to a smart contract on another pair of</p> <p>chain or sending messages into a</p> <p>governance system so a smart contract</p> <p>chain like the edgeware chain that was</p> <p>mentioned today could have smart</p> <p>contracts that you know manage people's</p> <p>voting preferences yeah that's something</p> <p>I mean yeah for the gas it differs a</p> <p>little from aetherium one of the things</p> <p>that I wanted to bring into a theorem</p> <p>like when it was too late to bring it in</p> <p>was this notion of chromatic gas which</p> <p>is basically having three different</p> <p>kinds of gas one of them for processing</p> <p>one of them for memory usage and one for</p> <p>storage with the idea being that</p> <p>basically we can compute maximum gas per</p> <p>block in terms of resource usage for</p> <p>each of these three but doesn't make</p> <p>sense that if someone gives up some</p> <p>processing power that they can instead</p> <p>bloat the chain by some storage right</p> <p>then the two are not the two are not</p> <p>somehow mutually exclusive so what we do</p> <p>is we actually have the resource usage</p> <p>independently for each three and then</p> <p>every contract gets basically whenever</p> <p>you spend one gas on processing you sort</p> <p>of get one gas on the other two for free</p> <p>or vice versa</p> <p>the gas sort of comes in in in white</p> <p>light where you get all of the</p> <p>independent gases sort of tied together</p> <p>and then you can use them as you as you</p> <p>want and what you don't use either irem</p> <p>really decided but it either gets sort</p> <p>of ignored or goes back into the pot so</p> <p>that other things can in principle</p> <p>overspend but what this does it</p> <p>basically means you've got much better</p> <p>resource usage utilization and you don't</p> <p>have the issue whereby you can bloat the</p> <p>chain by 3x what you should be able to</p> <p>just by using all of your gas to enter</p> <p>into storage and none of your gas or</p> <p>memory or processing which is what the</p> <p>sort of scenario we're stuck with</p> <p>aetherium oh why not GPU as well well</p> <p>maybe version 2</p> <p>yeah we'll go into the contracts right</p> <p>so yeah this so for like the gas system</p> <p>is only a concern of contract model and</p> <p>any other modules doesn't know about it</p> <p>at all yeah I think so</p> <p>then cool so I'll mention one other</p> <p>thing which is the account indexing</p> <p>which is what we saw earlier do you want</p> <p>to know I can do it on yours I think I</p> <p>mean yes but it's it's a nice little</p> <p>thing so it's worth it's worth knowing</p> <p>it well can you how do I get to Safari</p> <p>okay so if you noticed before while I</p> <p>was mucking around down here can I make</p> <p>this bigger somehow you can do this</p> <p>little trick oh just so there is a if</p> <p>you hold ctrl you can scroll it like</p> <p>that yeah so if you notice up up here</p> <p>Alice has a so I we've got two accounts</p> <p>here default and Alice default is this</p> <p>big long big long address analysis this</p> <p>lovely little address right so this is a</p> <p>legit these are both legit addresses and</p> <p>if you you know in principle if if a</p> <p>substrate chain gets listed on an</p> <p>exchange then in principle you can get</p> <p>one of these addresses this is just an</p> <p>address like in Bitcoin in etherium</p> <p>right but they both are so Alice this</p> <p>isn't some cunning name registry or</p> <p>something this is an address we</p> <p>understand yeah we're going with this</p> <p>[Music]</p> <p>in principle yeah it will mean different</p> <p>things on different chains because it</p> <p>will reference a different account just</p> <p>this just as the other one the long one</p> <p>would so the long one is a they're both</p> <p>based 58 representations they both got a</p> <p>checksum in them they both got a version</p> <p>byte in them the difference is that the</p> <p>first one is a 32 byte public key from</p> <p>that represents a point on the edy 255 1</p> <p>nine public key and the other one is an</p> <p>index and that's why it can be so short</p> <p>so every account in in a if you use the</p> <p>SRM L in substrate every account has a</p> <p>an index associated with it I should say</p> <p>every nonzero balance account writes</p> <p>every account that's active has an index</p> <p>associated with it if an account doesn't</p> <p>have doesn't have any balance then it</p> <p>doesn't get one of these nice short IDs</p> <p>because there's no index I so it can't</p> <p>like then you marry every account then</p> <p>you may as well just use the 32 byte</p> <p>identifier but if it's got something in</p> <p>it then you can use this use this index</p> <p>instead to identify it and we've got a</p> <p>mechanism whereby if it's within the</p> <p>first 200 or so then you get to just use</p> <p>one byte and if it's in the next sixty</p> <p>or thousand then you get to use the next</p> <p>byte they're two bytes and I think</p> <p>there's only like tens of thousands of</p> <p>active accounts on of active accounts</p> <p>that have any real significant funds in</p> <p>on like aetherium so i don't i suspect</p> <p>on substrate chains we'll probably see</p> <p>most addresses to be fewer basically be</p> <p>like four six five or six characters and</p> <p>it basically can look that up in its</p> <p>enumeration of all addresses and and as</p> <p>these things become free so if an</p> <p>account goes to zero substrates SRM our</p> <p>balances module will automatically claim</p> <p>reclaim that that address right so it</p> <p>basically deletes everything to do with</p> <p>it</p> <p>and this including this enumeration and</p> <p>so if someone like has one of the</p> <p>earlier Guinea I can't imagine that</p> <p>there's gonna be something like clamor</p> <p>to get the first to enjoy the accounts</p> <p>that have you know these four four</p> <p>letter addresses cause like there's only</p> <p>so many of them and before long they'll</p> <p>go but if someone like reduces their</p> <p>balance disease or to the minimum below</p> <p>the minimum allowed balance there's this</p> <p>notion of an existential deposit which</p> <p>is basically the minimum amount of</p> <p>balance you must have for your account</p> <p>not just to be deleted dying like that</p> <p>if they're iam Bitcoin don't really have</p> <p>this which leads to an awful lot of dust</p> <p>accounts that have like a none spend</p> <p>ibly small amount of of ether in it so</p> <p>small that you know you can't actually</p> <p>send the transaction to but yet they're</p> <p>still recorded by the state so they're</p> <p>still taking up a lot of space on disk</p> <p>exchanges are particularly bad for these</p> <p>things but you know they they leave a</p> <p>bit of gas on the spent and that just</p> <p>that's just a tiny little bit of ether</p> <p>just clogging up the train chain to the</p> <p>like 10,000 accounts a day sort of job</p> <p>so this is why in principle yes so if</p> <p>this account becomes a discount like</p> <p>reduces below the existential deposit</p> <p>and then someone else claims it then</p> <p>that address won't last forever so</p> <p>there's couple of ways of dealing with</p> <p>that the first is that that address has</p> <p>in it a checksum and that checksum</p> <p>refers to not that address itself but to</p> <p>the account that that address points to</p> <p>so if they were to if they were to do it</p> <p>maliciously it wouldn't happen</p> <p>accidentally the checksum would look</p> <p>after that they were to do it</p> <p>maliciously they'd have to mine an</p> <p>address that whose checksum was the same</p> <p>and these accounts these small ones you</p> <p>can choose which address you want to use</p> <p>yes sorry you can choose which address</p> <p>format you want to use and some of the</p> <p>address formats have like eight byte</p> <p>checksums so they'd have to mine an</p> <p>address that had like eight whole byte</p> <p>that shared an eight byte</p> <p>start of a hash with with the address</p> <p>that sort with the address that's IO</p> <p>that's that so I mean I can see this not</p> <p>being so so much of an issue and to be</p> <p>honest if you want if you want an</p> <p>address that's like you know permanent</p> <p>then sure just use the big big long one</p> <p>yeah</p> <p>but if if you want something that's like</p> <p>a payment address or if you absolutely</p> <p>sure that you're never going to go below</p> <p>the minimum amount then as these small</p> <p>addresses should be fine and they're a</p> <p>lot easier to remember and the other</p> <p>notable other point is that if we delete</p> <p>accounts and this came up in aetherium</p> <p>so parity we apparently made a proposal</p> <p>on the IPS to sort of say look we should</p> <p>have disk election that was actually</p> <p>implemented on covin right we rolled it</p> <p>out to covin and the issue one of the</p> <p>issues is that it means that nan</p> <p>basically transactions can be replayed</p> <p>if you're not careful because when you</p> <p>delete an address you don't just delete</p> <p>the balance and reduce that zero but you</p> <p>also delete the nonce which is counting</p> <p>how many transactions it's sent which</p> <p>means the first transactions can now be</p> <p>replayed or the very first transaction</p> <p>in particular can be replayed and then</p> <p>the second third and fourth can if that</p> <p>goes through successfully and that's</p> <p>problematic or it could be problematic</p> <p>because if those transactions do</p> <p>something other than spending the</p> <p>balance then you can actually put</p> <p>balance into the now zero account so</p> <p>it's now got cash to spend</p> <p>and then replay those transactions to do</p> <p>this to replay the side effects this is</p> <p>why we brought in the transaction errors</p> <p>so the idea is that when you construct a</p> <p>transaction it's only valid for a</p> <p>particular period for the future so you</p> <p>can make a trend you can construct a</p> <p>transaction that's valid indefinitely we</p> <p>allow for that but if you do that you've</p> <p>got to accept the fact that if someone</p> <p>else if your account gets deleted then</p> <p>the first transactions can be replayed</p> <p>primarily because there may be well</p> <p>firstly cause we you know we're</p> <p>generalists and we like to you know</p> <p>allow for as much as possible and it's</p> <p>up to our users who we we believe our</p> <p>our esteemed you know we esteem them in</p> <p>terms of their intelligence and we</p> <p>believe that they know what they're</p> <p>doing I mean you know everything goes</p> <p>wrong at some point I I don't believe in</p> <p>making tools you know I don't believe in</p> <p>making kind of safety scissors for you</p> <p>know for people I think that you know</p> <p>the level at least that were at you know</p> <p>we should we should be working with</p> <p>sharp knives for sure official and but I</p> <p>would put this on the user level so I</p> <p>think this is for you know if you read</p> <p>some of the other chains they issue kind</p> <p>of not warnings but directives to their</p> <p>middleware and use a user level like UI</p> <p>engineers say look this you can cut</p> <p>yourself the chain doesn't protect users</p> <p>from doing the stupid thing so it's up</p> <p>to you to protect them by putting in</p> <p>these warnings and we will do the same</p> <p>so for example if you're if you've</p> <p>issued if your wallet knows you've</p> <p>issued transaction resolve doesn't know</p> <p>that you haven't issued IRRI limited</p> <p>transactions and sees that a transaction</p> <p>you're about to issue would remove your</p> <p>account with the would delete it would</p> <p>take you below the minimum amount then</p> <p>it will would basically bring up this</p> <p>big what it would either not let you do</p> <p>it or bring up a big warning saying are</p> <p>you sure you know what you're doing yeah</p> <p>yeah so if you know we don't want to</p> <p>like hamstring people at developing on</p> <p>the platform we want to inform them and</p> <p>we want to inform them when they should</p> <p>hamstring the people who were using</p> <p>their what they're developing or at</p> <p>least give them information to make sure</p> <p>that they don't shoot themselves in the</p> <p>foot</p> <p>yeah it's true I mean there's maybe a</p> <p>trade-off to be made here checksum</p> <p>seemed a perfectly reasonable thing I</p> <p>mean most address formats have checked</p> <p>sums in the original aetherium didn't</p> <p>and that was a really big pain so that</p> <p>was that was just less and learnt in</p> <p>this case I don't think there has been a</p> <p>lesson yet to be learnt and I think it's</p> <p>such a really easy thing to protect</p> <p>against like either wallets shouldn't</p> <p>let you construct transactions without</p> <p>errors that should be a niche thing that</p> <p>you have to build your own applications</p> <p>to do I mean the cambia that I can</p> <p>imagine applications where errors don't</p> <p>fit for example suppose you've got</p> <p>something like a plasma plasma kind of</p> <p>chain and or a state a state channel and</p> <p>you need this transaction to potentially</p> <p>last indefinitely</p> <p>because that's the only guarantee that</p> <p>the other side has that you won't just</p> <p>pull out after the era is ended yeah</p> <p>it's like there's no other way of doing</p> <p>it and there you just have to ensure</p> <p>that for your specific niche use case</p> <p>there is no way of reducing that balance</p> <p>below the existential deposit but in</p> <p>most use cases user level tools can make</p> <p>sure that you don't shoot yourself in</p> <p>the foot say again</p> <p>oh when you see well it's a transaction</p> <p>hold on so when you serialize a</p> <p>transaction I see what you mean yes can</p> <p>we carry yes the answer is yes we can</p> <p>carry our concise address format into</p> <p>transactions as well so normally we</p> <p>would have to put a 32 by identifier for</p> <p>each address for the sender and the</p> <p>receiver irritatingly so one of the</p> <p>things that if you read about Edie two</p> <p>four five one nine they'll be like oh</p> <p>yeah it's really good it's got like</p> <p>compact signatures its signatures are</p> <p>smaller there are only 64 bytes instead</p> <p>of 65 what they don't tell you is that</p> <p>unlike unlike ECDSA you do need to put</p> <p>the sender address in there so yes you</p> <p>might you might shave a bite off in</p> <p>terms of the signature but you have to</p> <p>add an extra 32 bytes on because you</p> <p>have to tell it who the sender is</p> <p>I mean Bitcoin doesn't kind of Bitcoin</p> <p>provides both but you know whatever</p> <p>that was just a questionable decision if</p> <p>there him doesn't we go we don't bother</p> <p>encoding the sender in the transaction</p> <p>because we derive it directly from the</p> <p>signature you can't do that with EDD si</p> <p>sorry with Edie 2 5 1 9</p> <p>so actually signatures are 96 bytes</p> <p>we have a binary format so we don't have</p> <p>padding we have a binary format that</p> <p>basically uses 33 bytes to encode one</p> <p>other 32 byte addresses and uses one</p> <p>byte to encode the small ones and and so</p> <p>forth and you can determine what it is</p> <p>from the first few bits yeah so it did</p> <p>if you use these small addresses you</p> <p>shave off like 60 bytes potentially a</p> <p>couple more from the transactions and</p> <p>that's that's a pretty decent saving it</p> <p>basically cuts transactions by \u2156 as</p> <p>the relay train yeah I mean so the</p> <p>substrate comes from the relay chain so</p> <p>when we started coding polka dot well</p> <p>when we started coding substrate what</p> <p>has become substrate that was just</p> <p>called polka dot and although even</p> <p>before we started I had in my mind it</p> <p>was going to turn into substrate I</p> <p>didn't really mention that to the other</p> <p>devs so they were a little surprised</p> <p>when I started renaming stuff but yeah</p> <p>it's the biggest the biggest challenge</p> <p>is kind of thing that I mentioned it's</p> <p>getting that level of generalism while</p> <p>still making things be easy too</p> <p>while still making it easy to write the</p> <p>things that you want to be able to write</p> <p>so that that's what you know any design</p> <p>of language or API comes down to this</p> <p>getting this trade-off right and it</p> <p>ultimately comes down to expressivity</p> <p>so expressivity of a of a language in a</p> <p>domain is really just how well you can</p> <p>make it easy to do the things that you</p> <p>want to do and make it possible to do</p> <p>everything</p> <p>yeah and bringing those two closer</p> <p>together is is what we call expressivity</p> <p>or what we call a good language or a</p> <p>good a good domain language</p> <p>and you know substrate has a similar</p> <p>challenge getting it getting it general</p> <p>is not so easy</p> <p>it's something I've you know kind of</p> <p>wanted to do even since CPP aetherium</p> <p>but not having had all of the experience</p> <p>it wasn't so easy to do it the early</p> <p>days but it gets it gets a bit easier</p> <p>with having coded a couple more Sega is</p> <p>data deleted when it's deleted</p> <p>okay so what was the question again</p> <p>okay so specifically with smart</p> <p>contracts or with runtime modules and</p> <p>and the the substrate in general not</p> <p>really but smart contracts kind of have</p> <p>to do their own thing to some degree but</p> <p>okay I'll talk about substrate in</p> <p>general because that's what I can answer</p> <p>yes I see I know what you mean now I</p> <p>know what you mean yes no contracts work</p> <p>differently</p> <p>okay so we have we have archive mode</p> <p>that keeps everything around forever it</p> <p>doesn't run an archive mode by by you by</p> <p>by default it runs in a standard pruning</p> <p>mode by default which basically Clips</p> <p>any state from blocks that are old</p> <p>enough after a 100 or 200 or so if what</p> <p>you're talking about is like in a theory</p> <p>and when a contract delete something if</p> <p>that contract if that call into that</p> <p>contract turns out to be exceptional and</p> <p>everything gets rolled back then that</p> <p>delete doesn't happen in substrate in</p> <p>the basic runtime module in the basic</p> <p>sort of core we don't do roll backs</p> <p>right so as soon as something gets</p> <p>written into storage or deleted from</p> <p>storage it's actually deleted and unless</p> <p>the entire block gets rolled back</p> <p>because it panics then it's done that</p> <p>thing's deleted and there's no way you</p> <p>can you don't have checkpointing in</p> <p>there if you want checkpointing which</p> <p>you may well want it goes into the it</p> <p>goes into the as a runtime module</p> <p>library and the contract runtime module</p> <p>library that the smart contract actually</p> <p>implements checkpointing so it's it</p> <p>implements something that is basically a</p> <p>minimal form of aetherium but has most</p> <p>of the stuff of the etherium environment</p> <p>and the only difference is that it</p> <p>doesn't run in a VM it runs in</p> <p>webassembly</p> <p>of course web assemblies kind of cool</p> <p>and sexy unfashionable and hipster</p> <p>yeah I mean you know to some degree</p> <p>runtime upgrades and these sort of</p> <p>out-of-band</p> <p>state changes are are specifically what</p> <p>we do how we manage what happens when</p> <p>things go south in other ways so</p> <p>ultimately there's the same safeguard if</p> <p>you want to call it that that any other</p> <p>chain would have that doesn't have a</p> <p>governance system which is it can always</p> <p>be hard forked even if the governess</p> <p>system of the polka dot substrate</p> <p>whatever goes Ori I I sort of take a</p> <p>two-prong approach and say well on the</p> <p>one hand we want to be reasonably</p> <p>conservative and try to get solid</p> <p>reviews of our proposed governance</p> <p>mechanism and/or use governance</p> <p>mechanisms that already exist in real</p> <p>life and that we have some idea will</p> <p>probably work okay with the other prong</p> <p>being try it out as much as possible on</p> <p>test nets that actually have value</p> <p>before we put it on to a network that</p> <p>has lots of value potentially and this</p> <p>is you know where the edgeware project</p> <p>could be very helpful and potentially</p> <p>others like it to really provide a</p> <p>network where you know no one's losing</p> <p>anything if it's if it there's no cost</p> <p>to it going down or being problematic or</p> <p>having to suffer a reversion but there</p> <p>is real value at stake</p> <p>because it's got tokens that are worth</p> <p>something</p> <p>and that's that I think is a really nice</p> <p>middle ground to sort of go and try a</p> <p>bunch of stuff that we think probably</p> <p>works okay but we can't be sure to</p> <p>really try you know empirical testing</p> <p>try it in real life in much the same way</p> <p>that when the psychologists want to run</p> <p>a new experiment you know they they get</p> <p>a bit of money and they sort of say look</p> <p>if you if you do this right you get</p> <p>fifty quid and you know this is the</p> <p>instructions offer you go kind of the</p> <p>same thing and we did something similar</p> <p>with the Olympic test net back in PRC</p> <p>nine PRC ten days for the theorem to try</p> <p>and get people to kick the tires of what</p> <p>would become the the main net before we</p> <p>released I actually I think Olympic was</p> <p>a not a failure but I don't think it was</p> <p>a great success not that many people</p> <p>took part in it and it didn't really it</p> <p>didn't discover it didn't uncover one or</p> <p>two of the books that came up which you</p> <p>know we would have otherwise hoped and I</p> <p>think a test net that has real value</p> <p>maybe less value than it would otherwise</p> <p>have but still real value is probably a</p> <p>much more market-oriented and therefore</p> <p>probably more successful way of of</p> <p>trying to incentivize people to to break</p> <p>it or otherwise test it</p> <p>yeah so I mean you know</p> <p>etherium had the consensus tests it had</p> <p>a decent first testing although I will</p> <p>note that when we implemented parity we</p> <p>found two points where the consensus</p> <p>test didn't cover and we had to we had</p> <p>to add new consensus test it's a hard</p> <p>thing to do with with substrate we kind</p> <p>of work around it a little bit by saying</p> <p>there's a single was a reference on</p> <p>chain so it's basically like a machine</p> <p>executable reference spec I think it's</p> <p>it's questionable whether that's such a</p> <p>great thing I mean the Bitcoin guys love</p> <p>that idea because it's like they've got</p> <p>their reference implementation Bitcoin</p> <p>core I kind of like the yellow paper for</p> <p>not being machine executable but yeah I</p> <p>mean in polka dot and substrates case it</p> <p>was largely forced upon us anyway</p> <p>in principle there could be multiple</p> <p>implementations at the same runtime I</p> <p>could you know that's something that I</p> <p>explicitly provide for in the versioning</p> <p>I'm not sure if it will happen the</p> <p>foundation the web sorry foundation is</p> <p>looking to fine teams that yeah cool</p> <p>okay yeah so I mean I'd like to see it</p> <p>happen but as for whether as for whether</p> <p>we could really come out come up with</p> <p>better consensus tests than what we have</p> <p>for theorem I'm not sure it's a really</p> <p>tough thing to do without literally</p> <p>paying someone to painstakingly go</p> <p>through the specification every single</p> <p>conditional write a test for and I mean</p> <p>this gets potential exponentially</p> <p>complex as the different modules I mean</p> <p>you're looking at kind of two to the</p> <p>number of conditions potential number of</p> <p>tests that would have to cover</p> <p>everything it's it's crazy so I would</p> <p>probably just go for</p> <p>taking out a month's rental of a</p> <p>supercomputer and running a huge amount</p> <p>of first test I think with a with a</p> <p>well-designed for sir that that should</p> <p>probably provide as much protection as</p> <p>as you would otherwise get in polkadot</p> <p>so there's there is a mechanism sperm</p> <p>free transactions basically for</p> <p>transactions under the substrate model</p> <p>which polkadot adheres to transactions</p> <p>must sorry under the substrate the SR ml</p> <p>model which polka dot adheres to I</p> <p>should say transactions must pay for</p> <p>their space on the chain so there's a</p> <p>fixed fee for a transaction and there's</p> <p>always I mean can set it to zero if you</p> <p>want but you know in principle there's a</p> <p>fixed fee that a chain can leverage and</p> <p>this is a something that can be changed</p> <p>and upgraded and all the rest of its if</p> <p>it's the parameter and there's also a</p> <p>per byte fee that's charged per byte of</p> <p>the transaction and as it's encoded on</p> <p>the chain so that's non negligible</p> <p>that's sorry that's non-negotiable they</p> <p>have to be paid beyond that there is an</p> <p>if you want to charge additional fees</p> <p>for what the transaction is doing then</p> <p>that's up to the chain and the runtime</p> <p>modules and the sort of the the code</p> <p>that you're writing yourself you can</p> <p>charge for what you want polka dot will</p> <p>probably have some yeah fees associated</p> <p>with the creation of balances with the</p> <p>occasion of accounts so the balances</p> <p>module has a fee schedule that you can</p> <p>again customize if you've depending on</p> <p>you know how much you want to charge for</p> <p>the sorts of things of creating new</p> <p>accounts reaping all the counts</p> <p>transferring balances as a bunch of</p> <p>things that you can</p> <p>customize what else other modules I</p> <p>think most modules actually don't</p> <p>specify much of a much of a fee schedule</p> <p>because most of the modules are yeah</p> <p>there are the governance modules do have</p> <p>a fairly complex system of deposits</p> <p>that's mainly to address sort of a game</p> <p>theoretic concern of a potential</p> <p>quadratic quadratic attacks where</p> <p>quadratic cost attacks where certain</p> <p>algorithms are order N squared to rent</p> <p>or order MN to run and you have to make</p> <p>sure that you know m and n can't both</p> <p>get too big it's ok if one of them gets</p> <p>kind of big but you need to make sure</p> <p>that they can't both get too big</p> <p>otherwise you end up sort of going off</p> <p>off into the distance in terms of the</p> <p>cost and that's managed through as I say</p> <p>a set of deposits and basically</p> <p>incrementally increasing the cost of one</p> <p>or the other depending on how big the</p> <p>other one is I think that's probably</p> <p>about it I'm not so worried about</p> <p>literally charging every single clock of</p> <p>processing like gas would do partly</p> <p>because a lot of a lot of operations are</p> <p>order one and/or they have like a</p> <p>reasonable maximum that is not that you</p> <p>know they don't really go proportional</p> <p>the user can't force or the trans actor</p> <p>can't force a anything over a particular</p> <p>maximum that maximum is relatively and</p> <p>significant and I would look upon it</p> <p>more or less as the Bitcoin chain does</p> <p>where it's fine</p> <p>basically to just charge for space on</p> <p>the chain for the size of the</p> <p>transaction and not think too much about</p> <p>the processing costs because they will</p> <p>be dwarfed by the storage costs</p> <p>obviously in smart contract land it's</p> <p>much more important to charge for the</p> <p>for everything because you know users</p> <p>can potentially write infinite loops and</p> <p>all the rest of it so their contracts</p> <p>module does indeed make sure that</p> <p>there's a proper costing mechanism for</p> <p>them</p> <p>it's not a final design decision to be</p> <p>honest but part of the reason is that it</p> <p>makes a lot of sense when block</p> <p>production is on a individual basis like</p> <ul> <li>so - are competing with each other to</li> </ul> <p>produce these blocks it's not really the</p> <p>case in the consensus are mechanisms or</p> <p>block production mechanisms that I see</p> <p>substrate working under you in in</p> <p>substrates case that's really more of a</p> <p>sort of collective thing and it doesn't</p> <p>really make sense to reward one over</p> <p>another and partly it's I guess remember</p> <p>the other reason I think there was</p> <p>so in some sense when you burn fees it's</p> <p>a little like paying all of the other</p> <p>participants I guess yeah okay so the</p> <p>reason that that miners collected fees</p> <p>in etherium was because that's what they</p> <p>did in Bitcoin and the reason that -</p> <p>collected fees in Bitcoin was because</p> <p>eventually the block reward was going to</p> <p>go down to zero and that would be the</p> <p>only thing that incentivized - to do</p> <p>anything that's not the case in in</p> <p>polka-dot in poker ah the the validators</p> <p>are are incentivized like permanently</p> <p>through the reward system it basically</p> <p>means though dilution will happen there</p> <p>they're sort of percent or their ratio</p> <p>of their state compared to everyone else</p> <p>will remain the same they're sort of</p> <p>dilution protected and everyone else</p> <p>gets everyone who's not part of the</p> <p>validation nomination sort of system</p> <p>will get diluted and because that's in</p> <p>place it doesn't make so much sense to</p> <p>then</p> <p>reward them extra for for the</p> <p>transaction fees that said it's not a</p> <p>final decision as I said and I'm like</p> <p>you know something to talk about over</p> <p>the next few months and see if there's a</p> <p>compelling reason yeah I mean</p> <p>potentially I'm not sure we really see</p> <p>that in in real life there's plenty of</p> <p>instances where you know aetherium</p> <p>transactions go through four zero gas</p> <p>price censorship you know as always can</p> <p>always happen you know it's just if</p> <p>you're going out of your way to censor</p> <p>some transactions there's a cost</p> <p>associated that selection mechanism and</p> <p>that cost may be insignificant but that</p> <p>cost may be the price you're willing to</p> <p>pay maybe and it may be substantially</p> <p>greater than the cost of you know not</p> <p>collecting a couple of micro sense of</p> <p>fees so for sure but if they do then</p> <p>adding a small transaction fee isn't</p> <p>really going to make much difference</p> <p>unless unless you know the transactions</p> <p>that they're dealing with our micro</p> <p>transactions in which case</p> <p>yeah yeah I mean that's it so staking is</p> <p>more of a sort of collective pursuit</p> <p>rather than something cutthroat yeah I</p> <p>got a feeling there was another reason</p> <p>but I can't remember what it was now but</p> <p>as I say it's not something that I'm</p> <p>happy for this to be a continuing</p> <p>conversation and you know if it turns</p> <p>out that it does make sense for the</p> <p>block producer to to take these fees</p> <p>then this point is just the simplest</p> <p>code like I don't it's one line of code</p> <p>for you basically</p> <p>suppose you have 20% of the chain that</p> <p>is 20% of the total capital contained on</p> <p>the chain total tokens that is part of</p> <p>the staking system and market the market</p> <p>effects are such that 5% of that 20% so</p> <p>the total are being replicated to root</p> <p>for their rewards so I mean this is a</p> <p>half the reward right 25 percent but</p> <p>whatever then in order to prevent the</p> <p>rich get richer situation of the chain</p> <p>where validators just everyone gets</p> <p>diluted and all of that dilution is</p> <p>favoring the validators their percentage</p> <p>of the total state just keeps going up</p> <p>and up and up and up until eventually</p> <p>their total of the amount of the chain</p> <p>approach is like 100 percent to avoid</p> <p>that situation we place a well if we</p> <p>save 20 to 80 then we place an according</p> <p>amount so for X in our 20 to 80 ratio of</p> <p>the amount of that reward goes into a</p> <p>pot right so</p> <p>so we've got 20% a quarter of that gets</p> <p>paid to the to the validators so we're</p> <p>going to mint 25% of of the chains</p> <p>tokens again yep so we're going to</p> <p>dilute by 25% we take a fifth of that</p> <p>so validators whatever so that's that</p> <p>and with the other 20% which which</p> <p>basically is \u2155 of 80</p> <p>sorry \u00bc of 84 fits over 25 that gets</p> <p>placed into a sort of community Dow for</p> <p>the chain not too dissimilar from you</p> <p>know the thing on - or or even like the</p> <p>Dow although let's boogie hopefully and</p> <p>that will be used as like there's</p> <p>already a treasury module in here it's</p> <p>very simple but there's the treasury</p> <p>module actually sort of put forward ways</p> <p>of spending and and they can be voted on</p> <p>and then the idea is to basically allow</p> <p>additional modules to spend money from</p> <p>this pot and they can be sort of</p> <p>integrated through chain upgrades it</p> <p>could also be a lottery it can also be a</p> <p>reward for people that like accounts</p> <p>that are willing to bet on the price</p> <p>going up if you got an oracle feed of</p> <p>the price so if you're willing to bet</p> <p>that the price goes up and the price</p> <p>does indeed go up after a period of time</p> <p>then then you can get paid from this pot</p> <p>and if it goes down then you can your</p> <p>money gets put into the pot so there's</p> <p>all sorts of interesting don't think</p> <p>about that too hard there's all sorts of</p> <p>interesting oh yeah you can like what I</p> <p>showed you like the thing is what I was</p> <p>trying to think of a toy runtime module</p> <p>that would extol like that I could code</p> <p>live you know that wasn't so big that I</p> <p>couldn't code live but also that sort of</p> <p>got across</p> <p>a degree of sort of generality that this</p> <p>provides and unfortunately everything</p> <p>that you can code live pretty much will</p> <p>look like a smart contract because smart</p> <p>contracts are just tiny little bits of</p> <p>code that you add to block chains but</p> <p>what I did with with the extra module</p> <p>although it looked a bit like a smart</p> <p>contract it worked very differently</p> <p>right this this was a deployment of code</p> <p>that would be run natively and that</p> <p>would sit in principle in the same place</p> <p>as the smart contract as the smart</p> <p>contract bit of the etherium state</p> <p>transition function or the EVM or</p> <p>whatever else you want to think about</p> <p>code I won't even consider coding an EVM</p> <p>interpreter as a smart contract that</p> <p>would just be zany right I'll just be</p> <p>Cray would run so slow and it'd be</p> <p>really horrible but you could do that in</p> <p>one of these modules because it operates</p> <p>at like a 10 X low lower level so you</p> <p>get that 10 X in in performance and in</p> <p>well it uses that it uses some substrate</p> <p>runtime module for its pyro change</p> <p>management yeah I don't call it</p> <p>delegation because that's kind of got a</p> <p>loaded meaning now that EOS uses it in</p> <p>particular when you delegate a stake you</p> <p>don't get punished if the if the party</p> <p>that you delegate to misbehaves</p> <p>and that's usually problematic in terms</p> <p>of getting incentive correctness so we</p> <p>call it nominating and they're critical</p> <p>as I say the critical difference is that</p> <p>when you nominate a validator with your</p> <p>stake they you lose your stake if they</p> <p>misbehave I mean they lose those first</p> <p>but if they don't have enough to pay for</p> <p>the misbehavior then you lose yours</p> <p>yeah yeah so you this is to get around</p> <p>the nothing at stake issue long term</p> <p>long range attack yeah so yeah there's</p> <p>it it's bonded the moment the assumption</p> <p>is it'll be about three months bonding</p> <p>period but it will be at least as big as</p> <p>the expected period between releases of</p> <p>the of the binary of any software that</p> <p>sort of interprets this chain so no the</p> <p>assumption is that the most recent</p> <p>checkpoint will go into the software</p> <p>itself and the bonding period is</p> <p>sufficiently large that and the software</p> <p>will be released sufficiently frequently</p> <p>that the most recent bond most recent</p> <p>software release will be holding current</p> <p>validators currently bonded validators</p> <p>to account okay Sagan you can if you put</p> <p>it in yourself I use fixed point for</p> <p>anything that needs point one more if</p> <p>you're a move floating point then it's</p> <p>deterministic cool okay I call an end to</p> <p>this are you do you want to do it you</p> <p>wanna do the end</p>"},{"location":"public/GLOSSARY/","title":"Shortwords","text":""},{"location":"public/GLOSSARY/#ama","title":"AMA","text":"<p>Ask Me Anything.  usually, an online event where a person of note will spend time answering questions from the community.</p>"},{"location":"public/GLOSSARY/#aape-ing","title":"AAPE (ING)","text":"<p>aping is when a cryptocurrency trader buys a token shortly after the token project launch without conducting thorough research, usually because they are fearful of missing out on potential gains that could be lost if they hesitate in order to conduct due diligence.</p>"},{"location":"public/GLOSSARY/#adegen","title":"ADEGEN","text":"<p>stemming from degenerate, it is now an affectionate term for those in the crypto space.  a degen will be the first to find a new amazing project or collection.</p>"},{"location":"public/GLOSSARY/#adox","title":"ADOX","text":"<p>doxxing yourself means that you reveal your true identity, for example through a selfie or by name.</p>"},{"location":"public/GLOSSARY/#adyor","title":"ADYOR","text":"<p>Do Your Own Research.  meaning that you should always look into the projects you want to invest in and research thoroughly.</p>"},{"location":"public/GLOSSARY/#afloor","title":"AFLOOR","text":"<p>floor refers to floor price - the lowest price listed for a collection, generally used as a metric to determine the health of a project.</p>"},{"location":"public/GLOSSARY/#alfg","title":"ALFG","text":"<p>LET'S F***ING GO!</p>"},{"location":"public/GLOSSARY/#awagmi","title":"AWAGMI","text":"<p>We\u2019re All Gonna Make It!</p>"},{"location":"public/myvideos/","title":"NestJS Backend","text":""},{"location":"public/myvideos/#2024","title":"2024","text":"NestJS Miceoservices [Main Link](https://vimeo.com/883191398)"},{"location":"public/myvideos/#rust-substrate","title":"Rust &amp; Substrate","text":""},{"location":"public/myvideos/#2023","title":"2023","text":"Vimeo All of 3 Parts [Main Link](https://vimeo.com/883191398)  Part 1 Part 2 Part 3"},{"location":"public/myvideos/#rust-2021-a-scratch-blockchain","title":"Rust 2021 A Scratch Blockchain","text":"<p>Interlink</p> Part 1 [Interlink](../public/programming/rust/rust-scratch-blockchain.md)  Part 2"},{"location":"public/myvideos/#monorepo","title":"Monorepo","text":"<p>Interlink</p> Monorepo"},{"location":"public/myvideos/#solidity","title":"Solidity","text":"<p>Interlink</p> Solidity"},{"location":"public/myvideos/#guide-website","title":"Guide-Website","text":"<p>Guide-Website</p> Guide"},{"location":"public/myvideos/#about-me","title":"About Me","text":"<p>About me</p> AboutMe"},{"location":"public/public/","title":"Walk-through","text":""},{"location":"public/public/#index","title":"Index","text":"<ul> <li> <p>Blockchain</p> <ul> <li> <p>ReFi</p> </li> <li> <p>DeFI</p> </li> </ul> </li> <li> <p>Programming</p> <ul> <li>Rust</li> </ul> </li> </ul> <ul> <li> <p>DevOps Engineer</p> <ul> <li>Message Brokers </li> </ul> </li> </ul> <ul> <li> <p>Master Thesis</p> </li> <li> <p>Preferred Films of Website</p> </li> <li> <p>Archived Projects</p> </li> </ul> <ul> <li> <p>How to learn quickly</p> </li> <li> <p>RoadMap</p> </li> <li> <p>Other Links</p> </li> </ul> <ul> <li>GLOSSARY</li> </ul>"},{"location":"public/archive/archive-2016-2019/","title":"[[Archived]]-2016-2019","text":"<p>Devops Engineer</p> <p>Demo version of organization portal</p> <p>Angular 6 GraphQl SqlServer Rest Api 2018</p> <p>Management e-commerce</p> <p>Deployed On Container &amp; Orchestration with Kubernetes MongoDB Asp.#NetCore 3.1 2020</p> <p>Management e-commerce 1</p> <p>Management e-commerce 2</p> <p>Management e-commerce 3</p>"},{"location":"public/archive/archive-2019-2020/","title":"[[Archived]]-2019-2020","text":"<ul> <li> <p>Devops Engineer</p> </li> <li> <p>Reactjs-API-CouchDB</p> </li> <li> <p>API-CouchDB-IBMCloud</p> </li> <li> <p>Crypto Trading</p> </li> </ul>"},{"location":"public/archive/archive-until-2016/","title":"[[Archived]]-until-2016","text":"<p>Website Cultural Store</p> <p>CMS builder</p> <p>Website Carpet Factory</p> <p>Website Computer Store</p> <p>Resume WebSite</p> <p>Website Sales Photo</p> <p>Dadyar-Advocacy Software</p> <p>CNG Warehouse Software</p> <p>University Archive Software</p> <p>Website Conference Base on Network-P2P</p> Info <p></p>"},{"location":"public/archive/archive/","title":"Programming projects(archived)","text":"<p>2019-2020</p> <p>2016-2019</p> <p>Until-2016</p>","tags":["github","Angular","GraphQl","Sql","Js","JQuery","DevOps","Rancher","SqlServer","MongoDB","Asp.Netcore","Container","Orchestration","Kubernetes","cSharp"]},{"location":"public/archive/cms-builder/","title":"CMS Builder [[Archived]]","text":"<ul> <li>Use AngularJs &amp; WebApi technology</li> <li>Responds to all your operations without the need to refresh the page</li> <li>Single Page Application SPA</li> <li>Define tree structure</li> </ul>"},{"location":"public/archive/cms-builder/#angular","title":"#Angular","text":""},{"location":"public/archive/cms-builder/#spa","title":"#SPA","text":""},{"location":"public/archive/cms-builder/#cms","title":"#CMS","text":"Info"},{"location":"public/archive/cng/","title":"CNG Warehouse Software [[Archived]]","text":"<ul> <li>Advanced reporting features with a variety of search filters by Crystal Report</li> <li>Computing facilities in the accounting department and presenting invoices to the Customer</li> <li>Very user friendly interface</li> <li>Dynamic content presentation</li> <li>Security facilities for anonymous people to enter</li> <li>Ability to remind checks on the main page of the application</li> </ul>"},{"location":"public/archive/cng/#reporter","title":"#Reporter","text":""},{"location":"public/archive/cng/#desktop","title":"#Desktop","text":""},{"location":"public/archive/cng/#windows","title":"#Windows","text":""},{"location":"public/archive/cng/#telerik","title":"#Telerik","text":"Info"},{"location":"public/archive/dadyar/","title":"Advocate-Dadyar [[Archived]]","text":"<ul> <li>Advanced reporting features with a variety of search filters by Crystal Report</li> <li>Dynamic printing facilities for all types of petition forms and ...</li> <li>Has a very strong and stylish user interface</li> <li>Record client details</li> <li>Has dynamic content presentation</li> <li>Security facilities for anonymous people to enter</li> </ul>"},{"location":"public/archive/dadyar/#windows","title":"#Windows","text":""},{"location":"public/archive/dadyar/#crystalreporter","title":"#CrystalReporter","text":""},{"location":"public/archive/dadyar/#printer","title":"#Printer","text":""},{"location":"public/archive/dadyar/#telerik","title":"#Telerik","text":"Info <p>None</p>"},{"location":"public/archive/main/","title":"Main","text":"<ul> <li> <p>Archive 2019-2020</p> </li> <li> <p>Archive 2016-2019</p> </li> <li> <p>Archive before 2016</p> </li> </ul>"},{"location":"public/archive/my-old-website/","title":"My Old Resume WebSite [[Archived]]","text":"<ul> <li>Used MVC architecture</li> <li>Script features to display the slide section as well as on the main page of the site</li> <li>Define dynamic photos and upload for display in the Slide Show section</li> </ul> <p>##### #MVC</p> <p>##### C#</p> <p>##### #JQuery</p> Info <p></p>"},{"location":"public/archive/trading-archive-2021/","title":"[[Archived]] Trade 2021","text":"Captured Films Without translating To English Monetization and how to use the digital currency platform-Part 1 Monetization and how to use the digital currency platform-Part 2 Spot trading in low-risk-Binance-Part 1 Future trading-Binance-Part 2-1 Future trading-Binance-Part 2-2 Trading on the Binance-Part 3"},{"location":"public/archive/university-archive-software/","title":"University Archive Software [[Archived]]","text":"<ul> <li>Advanced reporting features with a variety of search filters by Crystal Report</li> <li>The software is under the network within the organization</li> <li>User friendly interface</li> <li>Dynamics in content presentation and reporting</li> <li>Archive files with serial number and barcode</li> </ul>"},{"location":"public/archive/university-archive-software/#archive-software","title":"Archive #Software","text":""},{"location":"public/archive/university-archive-software/#network","title":"Network","text":""},{"location":"public/archive/university-archive-software/#sqlserver","title":"#SqlServer","text":""},{"location":"public/archive/university-archive-software/#socket","title":"Socket","text":""},{"location":"public/archive/university-archive-software/#windows","title":"#Windows","text":""},{"location":"public/archive/university-archive-software/#c","title":"C","text":"Info"},{"location":"public/archive/website-carpet-factory/","title":"WebSite Carpet Factory [[Archived]]","text":"<ul> <li>Possibility of electronic payment </li> <li>Send promotional SMS as well as after each customer purchase</li> <li>Post a poll without refreshing the browser</li> <li>Script features to display the gallery section and also on the main page of the site</li> <li>Ability to insert news dynamically</li> <li>It has got separate CRM section</li> </ul> <p>##### [[CRM]]</p> <p>##### Electronic Payment</p> <p>##### [[ASP.NET]]</p> <p>##### #SMS</p> <p>##### [[Payment]]</p> <p>[[Archive]]</p> Info <p></p>"},{"location":"public/archive/website-computer-store/","title":"Website Computer Store [[Archived]]","text":"<ul> <li>Used MVC architecture</li> <li>Event-oriented Drag &amp; Drop home screen</li> <li>Script features to display the slide section as well as on the main page of the site</li> <li>Define dynamic photos and upload for display in the Slide Show section</li> <li>Define their category management of products</li> <li>Possibility of electronic payment by PEC WebServices  </li> </ul>"},{"location":"public/archive/website-computer-store/#mvc","title":"#MVC","text":""},{"location":"public/archive/website-computer-store/#jquery","title":"#JQuery","text":""},{"location":"public/archive/website-computer-store/#cms","title":"#CMS","text":""},{"location":"public/archive/website-computer-store/#electronic-payment","title":"#Electronic Payment","text":""},{"location":"public/archive/website-computer-store/#c","title":"C","text":"Info"},{"location":"public/archive/website-conference/","title":"Website Conference Base on Network-P2P [[Archived]]","text":"<ul> <li>No need to install any software through the Silverlight web browser plugin/extension.</li> <li>Contains management software of the desktop application type on the server as well as coded (Socket-SilverLight) on web clients that call the server ID on their browser.</li> <li>Ability to text chat and send files simultaneously and online</li> </ul>"},{"location":"public/archive/website-conference/#conference","title":"#Conference","text":""},{"location":"public/archive/website-conference/#network-conference-site","title":"Network Conference Site","text":""},{"location":"public/archive/website-conference/#webapp-chat","title":"#WebApp Chat","text":""},{"location":"public/archive/website-conference/#network-software","title":"Network #Software","text":""},{"location":"public/archive/website-conference/#simultaneous-chat-schedule","title":"Simultaneous chat schedule","text":""},{"location":"public/archive/website-conference/#silverlight","title":"#Silverlight","text":""},{"location":"public/archive/website-conference/#c","title":"C","text":"Info"},{"location":"public/archive/website-cultural-store/","title":"Website Cultural Store [[Archived]]","text":"<ul> <li>Used AngularJs &amp; WebApi technology</li> <li>Respond to all user operations synchronously without to need to refresh the page</li> <li>Single Page Application</li> <li>Having a shopping cart dynamically and simultaneously</li> <li>Display the contents of orders completely simultaneously</li> <li>Used BootStrap</li> <li>Dynamic categories from the Category attribute with getting updates from the database</li> </ul> <p>##### #Angularjs</p> <p>##### #Electronic Payment</p> <p>##### #SPA</p> <p>##### #BootStrap</p> <p>##### C#</p> Info <p></p>"},{"location":"public/archive/website-sales-photo/","title":"WebSite Sales Photo [[Archived]]","text":"<ul> <li>Ability to online payment</li> <li>Ability to upload and download multiple image files simultaneously</li> <li>Having a website visitor statistics section</li> <li>Ability to search advanced images in the gallery</li> <li>Script features to display the gallery section and also on the main page of the site</li> <li>Ability to insert news dynamically</li> <li>Having a separated CRM section</li> </ul>"},{"location":"public/archive/website-sales-photo/#crm","title":"[[CRM]]","text":""},{"location":"public/archive/website-sales-photo/#electronic-payment","title":"Electronic Payment","text":""},{"location":"public/archive/website-sales-photo/#editor","title":"Editor","text":""},{"location":"public/archive/website-sales-photo/#filter","title":"Filter","text":""},{"location":"public/archive/website-sales-photo/#crop","title":"Crop","text":""},{"location":"public/archive/website-sales-photo/#aspnet","title":"[[ASP.NET]]","text":""},{"location":"public/archive/website-sales-photo/#c","title":"[[C#]]","text":"<p>[[Archive]]</p> Info <p></p>"},{"location":"public/blockchain/Blockchain-tutorials/","title":"Blockchain tutorials","text":"<ul> <li>\u25d8 BlockV</li> <li>BlockV - Enterprise Plug &amp; Play Interoperability, TV, VR<ul> <li>\u25d8 UniBright</li> </ul> </li> <li>UniBright- Dashboard with Any block,360\u00b0 Security token platform(Token Generator), Cross-chain functionality, Voting template, Milestone Payment template.<ul> <li>\u25d8 Blockstream</li> </ul> </li> <li>Blockstream - Liquid Swaps, multi-part payments by c-lightning plugins. Prometheus Plugin and Grafana, Script can be used to represent complex conditions required to release a transaction by Miniscript.<ul> <li>\u25d8 Blockstack</li> </ul> </li> <li>Blockstack - Modular, supply minimal infrastructure for hosting the application code, don't need to worry about maintaining and securing databases, universal usernames.<ul> <li>\u25d8 DTube</li> </ul> </li> <li>DTube - Design new model Avalon social blockchain - Simplify User Experience<ul> <li>\u25d8 Quorum</li> </ul> </li> <li>Quorum - Tools: Cakeshop IDE,Quorum Wizard npm,anonymous-zether payment system.<ul> <li>\u25d8 IBM</li> </ul> </li> <li>IBM - Contains \"vscode\" extensions.<ul> <li>\u25d8 SkyCoin</li> </ul> </li> <li>SkyCoin</li> </ul> <p>Blockchain popular [[platforms]] </p> <p></p>"},{"location":"public/blockchain/Blockchain-tutorials/#blockv","title":"\u25d8 BlockV","text":""},{"location":"public/blockchain/Blockchain-tutorials/#blockv-enterprise-plug-play-interoperability-tv-vr","title":"BlockV - Enterprise Plug &amp; Play Interoperability, TV, VR","text":""},{"location":"public/blockchain/Blockchain-tutorials/#unibright","title":"\u25d8 UniBright","text":""},{"location":"public/blockchain/Blockchain-tutorials/#unibright-dashboard-with-any-block360-security-token-platformtoken-generator-cross-chain-functionality-voting-template-milestone-payment-template","title":"UniBright- Dashboard with Any block,360\u00b0 Security token platform(Token Generator), Cross-chain functionality, Voting template, Milestone Payment template.","text":"<p>Unibright Framework: (Workflow Designer),(Lifecycle Manager),(Connector),(Explorer) Unibright Framework consists of 4 components to visually define business processes (Workflow Designer), publish and maintain automatically generated smart contracts to different blockchains (Lifecycle Manager), integrate these contracts with on- and off-chain system landscapes (Connector) and visually monitor all ongoing processes (Explorer).</p>"},{"location":"public/blockchain/Blockchain-tutorials/#blockstream","title":"\u25d8 Blockstream","text":""},{"location":"public/blockchain/Blockchain-tutorials/#blockstream-liquid-swaps-multi-part-payments-by-c-lightning-plugins-prometheus-plugin-and-grafana-script-can-be-used-to-represent-complex-conditions-required-to-release-a-transaction-by-miniscript","title":"Blockstream - Liquid Swaps, multi-part payments by c-lightning plugins. Prometheus Plugin and Grafana, Script can be used to represent complex conditions required to release a transaction by Miniscript.","text":"<p>Miniscript: efficient analysis, composition, generic signing. Transaction: Data Feed(History Transaction), low transaction weights Main Systems: (Liquid),(Elements),(Satellite network)</p>"},{"location":"public/blockchain/Blockchain-tutorials/#blockstack","title":"\u25d8 Blockstack","text":""},{"location":"public/blockchain/Blockchain-tutorials/#blockstack-modular-supply-minimal-infrastructure-for-hosting-the-application-code-dont-need-to-worry-about-maintaining-and-securing-databases-universal-usernames","title":"Blockstack - Modular, supply minimal infrastructure for hosting the application code, don't need to worry about maintaining and securing databases, universal usernames.","text":"<p>(build high-quality applications).(Tunable Proofs election system to securely bootstrap a new blockchain).(on-chain expressibility). (security and predictability of smart contracts). (admitting static analysis for all transactions.)(decentralized storage system, called Gaia).(A universal ID and authentication system, called Blockstack Auth),(do not need to worry about running servers or databases.)(Blockstack's \ufb01rst-generation blockchain operated logically on top of Layer-1 (L1), and each transaction was in 1-to-1 correspondence with an L1 Bitcoin transaction).(Have a Browser) Ease of Use, Scalability User Control Minimal logic and state at the blockchain layer Localized state changes vs. global state changes Reliable cloud-like storage vs. peer storage Full-stack SDKs for developers A novel peer network (Atlas).Blockstack DApps are not required to use smart contracts at all.v2 general-purpose smart contracts written in a non-Turing-complete language</p>"},{"location":"public/blockchain/Blockchain-tutorials/#dtube","title":"\u25d8 DTube","text":""},{"location":"public/blockchain/Blockchain-tutorials/#dtube-design-new-model-avalon-social-blockchain-simplify-user-experience","title":"DTube - Design new model Avalon social blockchain\u200a-\u200aSimplify User Experience","text":"<p>Users on the DTube Chain will now earn 1 single liquid cryptocurrency token: the DTC (instead of 3 on Steem). Spending Voting Power (VP) is simplified and all rewards are collected in real time. Ease adoption Creating an account on DTube Chain will be instant and as easy as 2 clicks (versus a few weeks on Steem) \u00a0Increase retention On DTube Chain, VP stacks up indefinitely to incentive returning visitors (on Steem, voting power caps after a few days of user inactivity). Foster long term user growth with a dynamic inflation\u200a-\u200aBenefits of the DTube Chain: More efficient governance DTube Chain is a decentralized organization governed by leaders. It is much easier to obtain a consensus and implement changes for the DTube community where all stakeholders interests are aligned rather than on Steem where more than 400 Apps share the same chain and economy, yet gave different interests and visions. (Higher scalability). DTube Chain, which is exclusively dedicated to the DTube app, can handle thousands of transactions per second (i.e. tens of millions of daily active users). On Steem, DApps need to share bandwidth generation which limits the overall capacity of each app. Focus on Transaction manager is very good. Transaction manager\u200a-\u200aQurioum node\u200a-\u200aGood Api -Local state database on node and Transaction manager. DTube, at the first implemented on Steem Network\u200a-\u200ait's own DTube Chain, DTC (Type of IEO), DTube Chain is a \"onechain-oneapp\" model where each App uses its own blockchain database in opposition to the classic model where all users and programs share \u00a0and pay a transaction fee to the same Chain.</p>"},{"location":"public/blockchain/Blockchain-tutorials/#quorum","title":"\u25d8 Quorum","text":""},{"location":"public/blockchain/Blockchain-tutorials/#quorum-tools-cakeshop-idequorum-wizard-npmanonymous-zether-payment-system","title":"Quorum - Tools: Cakeshop IDE,Quorum Wizard npm,anonymous-zether payment system.","text":"<p>Based on the official Go implementation of the Ethereum.We're powered by strong partnerships with Microsoft and JPMorgan.</p>"},{"location":"public/blockchain/Blockchain-tutorials/#ibm","title":"\u25d8 IBM","text":""},{"location":"public/blockchain/Blockchain-tutorials/#ibm-contains-vscode-extensions","title":"IBM - Contains \"vscode\" extensions.","text":"<p>Simplified DevOps in a seamless environment for your team to move easily from development to test to production. Peer, Ordering Service, Certificate Authority. Start small, with no upfront investment. Then pay as you grow and upgrade easily through Kubernetes. Connect to nodes running in any environment (on-premises, public, hybrid clouds). Easily connect a single peer to multiple industry networks.</p>"},{"location":"public/blockchain/Blockchain-tutorials/#skycoin","title":"\u25d8 SkyCoin","text":""},{"location":"public/blockchain/Blockchain-tutorials/#skycoin_1","title":"SkyCoin","text":"<p>Lightning Fast Zero Fees Secure Private Sustainable Incentivized Utility Backed Free Fee Transaction Skycoin: fast and secure currency backed by bandwidth. Skywire: anonymous, decentralized mesh-Internet. Skyminer: hardware and access point for Skywire. Fiber: decentralized open blockchain network. Skysuite: suite of decentralized applications.</p> <p>Github documents and articles</p>"},{"location":"public/blockchain/Blockchain/","title":"Arman Riazi","text":""},{"location":"public/blockchain/Blockchain/#blockchain","title":"Blockchain","text":"Blockchain 4.0 Blockchain Canvas Blockchain Taxonomy Blockchain Stack Substrate MindMapping <p> I was wondering If you want to get the update-mind-mapping image. It is worth 25$ to get an updated board. <p> Send me Email: Title: </p> <p>armanriazi.Github.Io_MindMapping_Substrate</p> <p> To Email Address </p> <p>armanriazi.github.io@gmail.com</p> Don't miss it <p>Write some smartcontract and customized consensus algorithm based on Substrate framework</p> <p>Certificates_and_seen_toturials</p> Blockchain CertificatesPassed Self-Study Tutorials <ul> <li>blockchain-certificates</li> </ul> <ul> <li>blockchain-tutorials</li> </ul> <p>Refi_and_defi</p> Regeneraive FinanceDecentralized Finance 2023 <ul> <li>Regeneraive Finance ReFi 18 Weeks</li> </ul> <ul> <li>DeFi 6 Weeks</li> </ul> <p>Experience_2020-2023</p> Rust Implemented in BlockchainStart-Up 2023Towards ImplementationReportResearch <ul> <li> <p>Scratched Implementation of Blockchain(Latest)</p> </li> <li> <p>Rust-Lang</p> </li> </ul> <p>What is the best solution to developing a Web 3.0 application. There are so many solutions in business. But which one has high quality and security, quick development, low resources, and no additional overhead(a lightweight development framework).MFS is a NFT music platform</p> <ul> <li> <p>Substrate</p> </li> <li> <p>Kusama</p> </li> <li> <p>Polkadot</p> </li> <li> <p>ParaState</p> </li> </ul> <ul> <li>EIP-4337</li> <li>Monorepo</li> </ul> <ul> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Part(1)</p> </li> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Part(2)</p> </li> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/CrowdLoan/Part(3)</p> </li> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/ParaState/Part(4)</p> </li> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/EWASM/Part(5)</p> </li> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/SecondState/Part(6)</p> </li> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Rust-Lang/Part(7)</p> </li> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/NodeSetup/Part(8)</p> </li> </ul> <p>Experience_2019-2020</p> ImplementedResearch <ul> <li>Solidity</li> <li>Hyperledger</li> <li>Corda-r3 Samples have been run on test networks:</li> <li>DAapp university by web3.js (Reactjs,Js)-Solidity</li> <li>Solidity (build a game)</li> <li>Build a scratch blockchain by Golang (Websocket)</li> </ul> <ul> <li>Blockchain-tutorials</li> </ul>"},{"location":"public/blockchain/Blockchain/#intro-blockchain-summery","title":"Intro Blockchain Summery","text":""},{"location":"public/blockchain/Blockchain/#blockchain_1","title":"Blockchain","text":"<p><code>Layers</code></p> <ul> <li> App and presentation: The application layer is made up of smart contracts, DApps (Decentralized Applications), and chaincode. Its protocols are divided into the application and execution layers. It is composed of the programs that end-users utilize for communicating with the blockchain networks. Some other parts of the application layer include APIs (Application Programming Interfaces), frameworks, scripts, and user interfaces.</li> <li> Consensus: This layer is mandatory for the existence of blockchain platforms. It is the most critical layer for any blockchain platform. This layer validates blocks, orders them, and ensures that everyone agrees upon them.</li> <li> Network: This layer is also known as the propagation layer and P2P layer and is responsible for inter-node communication. A P2P network is a computer network where nodes are distributed to share.</li> <li> Data: There are two fundamental elements of the blockchain data structure: Pointers, A linked list</li> <li> HD/Infra:The hardware structure layer consists of servers. Blockchain is a prevalent example of this P2P network. In a P2P network, the computer is designated as a node.</li> </ul>"},{"location":"public/blockchain/Blockchain/#decentralization","title":"Decentralization","text":"<p>Decentralization is a type of network redundancy that ensures that the network control is not under a few entities.</p>"},{"location":"public/blockchain/Blockchain/#blockchain-layers","title":"Blockchain Layers","text":""},{"location":"public/blockchain/Blockchain/#game-theory","title":"Game Theory","text":"<p>Is the study of the mathematical models for making strategic interactions between rational decision-makers.</p>"},{"location":"public/blockchain/Blockchain/#cryptography","title":"Cryptography","text":"<p>Among several benefits of blockchain, the most profound is that it eliminates intermediaries, reduces costs, and improves efficiency by being a transparent and secure platform.</p>"},{"location":"public/blockchain/Blockchain/#core-of-blockchain","title":"Core Of Blockchain","text":"<p>Since no central authority or government controls the blockchain, the DLT (Distributed Ledger Technology) performs the task of verifying any information via cryptography. Any member of a blockchain network witnesses their information being verified via DLT.</p>"},{"location":"public/blockchain/Blockchain/#components-of-the-blockchain-trilemma","title":"Components of the blockchain Trilemma","text":"<ul> <li> Security</li> <li> Scability</li> <li> Decentralization</li> </ul>"},{"location":"public/blockchain/Blockchain/#blockchain-scalability","title":"Blockchain Scalability","text":"<p>Scalability refers to an increased system throughput rate measured in transactions per second in the blockchain. In this formula, throughput is the number of transactions a system handles per second. The blockchain\u2019s scalability is its ability to handle a greater amount of transactions</p>"},{"location":"public/blockchain/Blockchain/#blockchain-storage-decentralized","title":"Blockchain Storage Decentralized","text":"<p>The CAP (Consistency, Availability, and Partition Tolerance) theorem.</p> <p>that any decentralized data storage (e.g. blockchain) can satisfy only two of the three ingredients of the CAP theorem.</p>"},{"location":"public/blockchain/Blockchain/#blockchain-security","title":"Blockchain Security","text":"<p>This refers to the ability to secure data on the blockchain from different attacks and blockchain\u2019s defense against double-spending.</p>"},{"location":"public/blockchain/Blockchain/#connection-between-scalability-and-security","title":"Connection Between Scalability and Security","text":"<p>Now, if the two blockchains (with same proof-of-work) have the equal degree of decentralization along with the security as their hash rate, </p> <p>the confirmation time will be decreased with the increase in hash rates. Similarly, </p> <p>the scalability will rise with the improvement of security. This shows that: Scalability is directly proportional to security (if decentralization remains constant)</p> <p>Since all of the three components of the blockchain trilemma are unable to interact with each other at the same time, the blockchain has to make trade-offs. A prominent example of this was Ethereum which saw a rise in usage because of the growth of DeFi (Decentralized Finance) applications. Due to this sudden rise in demand, transaction fees also surged to a level where many people were unable to engage with the blockchain.</p>"},{"location":"public/blockchain/Blockchain/#blockchain-layers_1","title":"Blockchain Layers","text":"<p>The Role of Blockchain Layers in Increasing Scalability.</p> <p>Currently, work is underway to increase the scalability of the blockchain networks. - [x] The Layer One Blockchain has been designed for providing speed, security, and expansion. - [x] The Layer Two Blockchain refers to technological enhancements and products for utilizing the expansion of scalability of blockchain networks already present.</p>"},{"location":"public/blockchain/Blockchain/#merkle-tree","title":"Merkle Tree","text":"<p>In the blockchain, the Merkle tree refers to a binary tree of hashes.  Inside each block, there is a root hash of the Merkle tree and other information, such as block\u2019s hash, nonce, block version number, current difficulty goal, and timestamp. In Blockchain, the Merkle tree protects the integrity and security of the blockchain data. </p>"},{"location":"public/blockchain/Blockchain/#benefits-of-digital-signature","title":"Benefits of Digital Signature","text":"<ul> <li> The role of digital signature in this scenario is to detect any manipulation in information.</li> <li> They also ensure unity as the data is encrypted. Therefore, any manipulation being made will result in the invalidity of the signature</li> <li> The data cannot be discovered due to being encrypted with digital signatures</li> <li> The data cannot be tampered</li> </ul>"},{"location":"public/blockchain/Blockchain/#the-metaverse-nft-web-30-evolution-of-internet","title":"The Metaverse, NFT &amp; Web 3.0 - Evolution of Internet","text":""},{"location":"public/blockchain/Blockchain/#web-30","title":"Web 3.0","text":"<p>Now after this period, the internet is quickly moving towards Web 3.0, where a virtual environment and virtual interaction between users would be possible. This is referred to as Metaverse. The primary focus of Web 3.0 is using technologies like AI to provide relevant content to every user. AI will also prevent manipulation and falsification of search results.</p> <ul> <li> Blockchain technology will serve as the backbone of Web 3.0.</li> <li> Decentralized web browsers and NFTs could be very early signs of Web 3.0.</li> <li> We might employ VR technology (which will be discussed in later topics) to enter tomorrow\u2019s internet. So by using that we may travel between virtual worlds as digital avatars.</li> <li> Web 3.0 could also be experienced just like the contemporary internet, with computers and smartphones.</li> <li> The future of the internet will include the benefits of today, but with novel elements from Web 3.0 and the metaverse</li> </ul>"},{"location":"public/blockchain/Blockchain/#nft","title":"NFT","text":"<p>A non-fungible token (NFT) is a unit of data stored on a blockchain. It is non-interchangeable on the blockchain that can be sold and traded. Metaverse and NFTs are also thought to be one of the important components of Web 3.0. NFTs are distinct cryptographic tokens that are based on a blockchain model and cannot be replicated or reproduced or broken. NFTs in the metaverse can exhibit real-world items for instance artwork, unique commodities, and real estate. NFTs will tokenize the real-world tangible assets and will improve the processes of buying, selling, and trading, thus making it more efficient while minimizing the likelihood of fraud. Any article that can be transformed into a digital form can be an NFT. Everything from a person's drawing, photos, GIF, music, videos, in-game, selfies, and even a little tweet can be transformed into an NFT, which can then be traded online utilizing cryptocurrency. can be regarded as the property rights of the internet. can provide your proof-of-ownership of a digital item.</p>"},{"location":"public/blockchain/Blockchain/#the-nftnyc-conference","title":"The NFT.NYC Conference","text":"<p>The inaugural ceremony of 2019 NFT.NYC ceremony witnessed NFT-controlled access. The entry in the event was conditioned based on an NFT-based ticket. The conference allowed its participants to participate in dinner along with the opportunity of displaying custom messages on Times Square billboard.</p>"},{"location":"public/blockchain/Blockchain/#how-can-nfts-be-used-in-the-metaverse","title":"How Can NFTS Be Used in the Metaverse?","text":"<ul> <li> Allowing VIP access to real-time conventions and festivals</li> <li> Allowing access to metaverse events</li> <li> Airdropping tokens of branded merchandise, etc.</li> </ul>"},{"location":"public/blockchain/Blockchain/#the-metaverse","title":"The Metaverse","text":"<ul> <li> Meta means Virtual </li> <li> Verse refers to the Universe</li> </ul> <p>The metaverse can be called as a virtual fashion industry.</p> <p>This term was first introduced by Neal Stephenson, an American fiction writer. He coined the term in his 1992 novel, Snow Crash. He mentioned a 3D virtual space where human beings live as programmable avatars in his book. These avatars interact with each other as well as with software agents.</p> <p><code>Examples of Companies Investing in Metaverse</code> - [x] An investment company Grayscale conducted research in which it indicated that the global revenue that will be generated from virtual gaming can surpass $400 billion by 2025.  - [x] Sotheby is a famous art gallery. - [x] Microsoft $68.7 billion - [x] NVIDIA - [x]Fashion Ind     - [1] Givenchy     - [2] Gucci     - [3] Dolce &amp; Gabbana, and     - [4] Adidas</p> <p>It furnishes enticing, interactive experiences that are not possible in the real world.</p> <p>The metaverse has the possibility to change the way people interact and meet with each other. </p> <p>This means that it will change the entire cosmos, work or employment model, retail and commercial model, gaming industry, and more. </p> <p><code>The four different layers of the metaverse pyramid are</code> - [x] True    - [1] Real-life examples    - [2] Unlimited creation of the virtual environment    - [3] Economic system of the virtual environment - [x] Content: Games providing multiple virtual worlds - [x] Infrastructure    - [1] Hardware industry    - [2] Technologies for builders, and    - [3] Blockchain - [x] Foundation: Internet </p>"},{"location":"public/blockchain/Blockchain/#impacts-of-metaverse-on-online-retail","title":"Impacts of Metaverse on Online Retail","text":"<ul> <li> Metaverse has modified the retail experiences in the following ways</li> <li> Enhancing physical experiences</li> <li> Providing personalization opportunities</li> <li> Providing new sales channels</li> <li> Preventing theft and counterfeiting: By kinking their virtual and real-time products with NFTs, retailers can protect their products from piracy and online damage.</li> </ul>"},{"location":"public/blockchain/Blockchain/#gui","title":"GUI","text":"<p>The following computer interface that is now emerging does not have a single name. Instead, it is known by many names, such as Augmented Reality, Mixed Reality, Extended Reality, Extended Reality, or Mixed Computing. Although there might be subtle differences between all of these concepts, the one thing that they all have in common is the use of 3D space. Hence, these concepts are also known as spatial computing.</p>"},{"location":"public/blockchain/Blockchain/#digital-twin","title":"Digital Twin","text":"<p>A vital idea to be mentioned here is the digital twin. This refers to the physical objects using gaming engines and sensor data to create their simulated software copy inside a computer. The humans can then interact with this software copy, just like they interact with a computer.</p>"},{"location":"public/blockchain/Blockchain/#virtual-environments","title":"Virtual environments","text":"<p>Virtual environments are artificially created environments. Two popular platforms mentioned in this regard are Twitter and Discord. Second Life where users can engage in trading activities using the platform\u2019s currency, Linden Dollars. The virtual world Second Life mentioned previously has its currency, and it supports an annual economy of $500 million. In fact, its GDP surpasses the GDP of many real-world countries.</p>"},{"location":"public/blockchain/Blockchain/#real-world-augmented-reality-environments","title":"Real-World Augmented Reality Environments","text":"<p><code>For example Pokman</code></p>"},{"location":"public/blockchain/Blockchain/#purely-digital-environments","title":"Purely Digital Environments","text":"<p>The purely digital environments are those traditional virtual environments where we have to sit in front of the computer screen or wear a VR headset.</p>"},{"location":"public/blockchain/Blockchain/#xr","title":"XR","text":"<p>Extended Reality (XR) refers to immersing computer texts and graphics into real-world and virtual environments. XR encompasses VR, MR, and AR under its umbrella. </p> <p>Virtual reality is an artificial digital environment that completely substitutes the real world.</p> <p>Augmented reality is the superimposition of digital content over the real-world environment.</p> <p>In mixed reality, virtual content is not only superimposed on the real environment but is tied up and engages with that environment. </p> <p>Extended reality focuses on all real and virtual environments and human-machine interactions developed by computer technology and wearables.</p> <p><code>The core components of all XR devices include</code> - [x] Visual input methods of object - [x] Gesture tracking - [x] Gaze tracking - [x] Perception - [x] Mapping</p>"},{"location":"public/blockchain/Blockchain/#ar","title":"AR","text":""},{"location":"public/blockchain/Blockchain/#sample-of-ar","title":"Sample of AR","text":"<p>Takes an image from your phone\u2019s camera and processes it in real-time after which it displays all the contextual information or delivers gaming for social experiences that appear to be part of our real world. Although AR has seen quite an improvement in the last decade, its applications are very limited in number. This is because the gurus of AR are focusing more on delivering a holistic experience with the help of AR glasses. In order for these glasses to work, it is necessary that they contain an ultra-low power processor having multiple sensors (including tracking and depth perception). The aim is to make these glasses comfortable enough so that users can wear them for a prolonged period.</p>"},{"location":"public/blockchain/Blockchain/#vr","title":"VR","text":"<p><code>This technology has three main components</code></p> <ul> <li> A smartphone or a wearable AR device</li> <li> Virtual objects</li> <li> Superimposed characters in real-world environments</li> </ul>"},{"location":"public/blockchain/Blockchain/#ar-vs-vr","title":"AR VS VR","text":"<p>In contrast to VR, AR headsets require features, such as intuitive and secure navigation. Other features that can be part of an AR headset are depth, orientation, pose, position, location, and eye and gesture tracking.</p>"},{"location":"public/blockchain/Corda-r3/","title":"Corda-R3","text":"<p>The platform defines blockchain network standards; </p> <p>It provides smart contracts and tokens that work with JVM virtual machines. It is similar to EVM to execute designed protocols.</p> Quote <p>It seems to me that could use the Corda for the simulation of blockchain.</p>","tags":["java","simulation","corda"]},{"location":"public/blockchain/Hyperledger/","title":"Hyperledger","text":"","tags":["hyperledger","devops","ibm"]},{"location":"public/blockchain/Hyperledger/#hyperledger-ibm","title":"HyperLedger-IBM","text":"Quote <p>I remember, used hyperledger-fabric with composer, kubernetes, and even Node-Red.The framework is suit for specialist who have experience with [[Devops]] and I can say that Composer is good idea for this developing.</p> <p>Using standards defined: flexibility, scalability, availability of service under any circumstances, the above mentioned through another branch of technology called DevOps that is compatible with web applications and blockchain, the ability to implement and strengthen the blockchain The author of this project has been working on it.</p> <p>Due to the learning of [[Blockchain]], we are faced with several technologies. The use of HyperLedger, which is provided under the supervision of Linux and is also used by #IBM, and the second case is the use of Ethereum, the second version of which is scheduled to be released by the end of 2021 based on the POS consensus algorithm.</p> <p></p> <p>The figure above shows the fact that large companies today rely on open source tools for their infrastructure components, and what you see is all free, but the company has been able to establish an effective communication platform base on the cloud.</p> <p>In short, we are not dealing with occasional challenges, but rather \"wheels will not move unless the engine works right.\"</p>","tags":["hyperledger","devops","ibm"]},{"location":"public/blockchain/Hyperledger/#hyperledger-golang","title":"Hyperledger-Golang","text":"","tags":["hyperledger","devops","ibm"]},{"location":"public/blockchain/Hyperledger/#features","title":"Features","text":"","tags":["hyperledger","devops","ibm"]},{"location":"public/blockchain/Hyperledger/#golang","title":"Golang","text":"<p>On-permise</p> <p>Define Blockchain as manual and changeable</p> <p>Scratch Structure</p> <p>Deploy on docker</p> <p>Scale-up by Kubernetes</p> <p>No need for pay-as-you-go services</p> <p>Complex implementation</p>","tags":["hyperledger","devops","ibm"]},{"location":"public/blockchain/Hyperledger/#hyperledger-azure","title":"Hyperledger-Azure","text":"","tags":["hyperledger","devops","ibm"]},{"location":"public/blockchain/Hyperledger/#features_1","title":"Features","text":"<p>Blockchain as a service</p> <p>Scale-up with Kubernetes</p> <p>Docker-Compose</p> <p>Wrote by Hyperledger-Compose</p> <p>Pay-as-you-go</p> <p>Secured by Microsoft</p> <p></p> <p>[[IBM]]</p>","tags":["hyperledger","devops","ibm"]},{"location":"public/blockchain/Kusama/","title":"Kusama","text":""},{"location":"public/blockchain/Kusama/#kusama","title":"Kusama","text":""},{"location":"public/blockchain/Kusama/#implement","title":"Implement","text":"<p>Comming Soon...</p>"},{"location":"public/blockchain/Kusama/#research","title":"Research","text":"<p>Crowdloan-Research-Intro</p> <p>[[Polkadot-Ecosystem-Research]]</p>"},{"location":"public/blockchain/ParaState/","title":"ParaState","text":"","tags":["polkadot_ecosystem","substrate","project","sample","research","ewasm"]},{"location":"public/blockchain/ParaState/#parastate","title":"ParaState","text":"","tags":["polkadot_ecosystem","substrate","project","sample","research","ewasm"]},{"location":"public/blockchain/ParaState/#implementation","title":"Implementation","text":"<p>Comming Soon...</p>","tags":["polkadot_ecosystem","substrate","project","sample","research","ewasm"]},{"location":"public/blockchain/ParaState/#research","title":"Research","text":"<p>Parastate-Research-Intro</p> <p>[[Polkadot-Ecosystem-Research]]</p>","tags":["polkadot_ecosystem","substrate","project","sample","research","ewasm"]},{"location":"public/blockchain/Polkadot/","title":"Polkadot","text":"","tags":["polkadot_ecosystem","substrate","project","sample","research"]},{"location":"public/blockchain/Polkadot/#polkadot","title":"Polkadot","text":"","tags":["polkadot_ecosystem","substrate","project","sample","research"]},{"location":"public/blockchain/Polkadot/#implementation","title":"Implementation","text":"<p>Comming Soon...</p> <p>Related-Polkadot-Is-Substrate</p>","tags":["polkadot_ecosystem","substrate","project","sample","research"]},{"location":"public/blockchain/Polkadot/#research","title":"Research","text":"<p>Polkadot-Research-Intro</p> <p>[[Polkadot-Ecosystem-Research]]</p>","tags":["polkadot_ecosystem","substrate","project","sample","research"]},{"location":"public/blockchain/SecondState/","title":"SecondState","text":"<p>[[Polkadot-Ecosystem-Research]]</p> <p>Secondstate-Research-Intro</p>","tags":["wasm"]},{"location":"public/blockchain/Solidity/","title":"Solidity","text":"","tags":["smartcontract","ethereum_ecosystem"]},{"location":"public/blockchain/Solidity/#sample-projects","title":"Sample Projects","text":"<p>Smart Contract-Sales-Energy</p> <p>Smart Contract-RealState</p> <p>Smart Contract-Sale Product</p> <p>Smart Contract-Vote</p>","tags":["smartcontract","ethereum_ecosystem"]},{"location":"public/blockchain/Substrate/","title":"Arman Riazi","text":"","tags":["polkadot_ecosystem","project","sample","substrate","github"]},{"location":"public/blockchain/Substrate/#substrate","title":"Substrate","text":"<p>If you want to get updated-mind-mapping image, send me Email to armanriazi.github.io@gmail.com  (Title: armanriazi.github.io_Substrate_MindMapping)</p> <p></p>","tags":["polkadot_ecosystem","project","sample","substrate","github"]},{"location":"public/blockchain/Substrate/#implementation","title":"Implementation","text":"Vimeo 37min  [Main Link](https://vimeo.com/883191398)  Youtube Part 1-3 <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/NodeSetup/Part(8)</p>","tags":["polkadot_ecosystem","project","sample","substrate","github"]},{"location":"public/blockchain/Substrate/#research","title":"Research","text":"<p>Substrate-Framework-Research-Intro</p> <p>[[Polkadot-Ecosystem-Research]]</p>","tags":["polkadot_ecosystem","project","sample","substrate","github"]},{"location":"public/blockchain/WASM/","title":"WASM","text":"<p>[[Polkadot-Ecosystem-Research]]</p> <p>Ewasm-Research-Intro</p>","tags":["wasm","ewasm"]},{"location":"public/blockchain/learning/blockchain-certificate/","title":"Blockchain certificate","text":""},{"location":"public/blockchain/learning/blockchain-certificate/#2023","title":"2023","text":"Expert Priod By Supported By Inquiry Documents Regenerative Finance  2023-2024 18W Frankfurt University School of the Blockchain&amp;Business ECOTA 1 C BLOC529-MC Decentralized Finance(Spring 2023) 5W Nicosia University UNIC 1 C Blockchain-DistributedSys-CyberSec 20H educative.io educative 1,2,3 C-Bundled,G Blockchain of Solana-TypeScript-Rust 7H Udemy Udemy.com 1 C Blockchain of Polkadot-Substrate-Rust 02:30 H Udemy.com Udemy 1 C Web3-Blockchain-SmartContracts-Crypto-Practice-Tests 310 Q Udemy.com Udemy Redirect C-Boundled Foundations and functions of blockchain technology and cryptocurrencies 22H Sharif University Blockchain-Lab Iran Financial Center(IFC) 1270291696 IFC-PDF BaaS-Enterprise Cloud Solutions 2023 23H IBM,AWS,Hyperledger,Corda,Eth Alison Alison.com C-Boundled Rust-(Solidity-JS in Blockchain) 9H Alison.com Alison Boundled C NFT Web 3.0, The Metaverse 4H Alison.com Alison.com CredentialUrl Boundled"},{"location":"public/blockchain/learning/blockchain-non-cert-toturials/","title":"Blockchain non cert toturials","text":""},{"location":"public/blockchain/learning/blockchain-non-cert-toturials/#video-toturials-self-study","title":"Video Toturials Self-Study","text":"<p>Learnt</p> Video courses 2023Video courses 2021-2022Video courses 2019-2021 <ul> <li>Substrate workshop with Dr.Gavin Wood and Sergei Shulepov</li> <li>Substrate based ParaChains (Polkadot) support via Parastate</li> <li>Substrate Recipes Workshop - Learn to Build a Custom Blockchain</li> <li>Build a Bitcoin-like Blockchain with Substrate</li> </ul> <ul> <li>EatTheBlocks</li> <li>Substrate workshop with Dr.Gavin Wood and Sergei Shulepov</li> <li>Intro to Substrate-1-10</li> </ul> <ul> <li>INE Understanding Crypto Currencies Bitcoins and Blockchains</li> <li>Lynda Ethereum Building Blockchain Decentralized Apps DApps</li> <li>Packtpub Blockchain for Business 2018 The New Industrial Revolution</li> <li>Packtpub Blockchain Real World Projects</li> <li>StoneRiverElearning Building Cryptocurrencies and Smart Contracts</li> <li>StoneRiverElearning Starting with NEM (Not yet)</li> <li>TechnicsPublications Data Modeling and Blockchain</li> <li>Build a Blockchain and a cryptocurrnecy from scratch</li> <li>IBM Blockchain Solutions </li> </ul>"},{"location":"public/blockchain/learning/blockchain-non-cert-toturials/#followed-youtube-channels","title":"Followed Youtube Channels","text":"<pre><code>* Polkadot\n* Kusama\n* Alchemy\n* Hyperledger\n* IBM \n* DApp university\n* Skycoin\n* Blockstack\n* Ethereum\n</code></pre> <p>\u25d8 And so many bookmarks that taked my attention and time archived draft of blockchain issued proposals  \u25d8</p>"},{"location":"public/blockchain/learning/blockchain-non-cert-toturials/#sharable-research-white-papersarchived-2020","title":"Sharable Research White Papers(archived 2020)","text":"<p>OneNote-Online </p>"},{"location":"public/blockchain/parastate/parastate-research-intro/","title":"Parastate research intro","text":"<p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Parastate(4)</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p>","tags":["parastate","polkadot_ecosystem","pos"]},{"location":"public/blockchain/parastate/parastate-research-intro/#introducing","title":"Introducing","text":"<p>ParaState is a proof-of-stake blockchain platform that says its goal is to ParaState aims to become a Polkadot parachain that extends the frontier of Ethereum with substrate framework. By supporting 20+ programming languages to create Ethereum-compatible multi-chain smart contract.</p> <p></p> <p>@State-Token</p> <p>ParaState is a decentralized autonomous organization (DAO) funded by license fees (as a percentage of gas fees) generated by transactions on other networks using ParaState technology.</p> <p>Any blockchain project that is interested in taking advantage of the technical advantages of ParaState EWASM will be charged licensing fees in the native currencies of these blockchains. Therefore, the intrinsic value of STATE is backed by a basket of native cryptocurrencies from these blockchain projects.</p> <p></p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p> <p>Polkadot (bridge assets via Snowfork/Interlay).</p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>","tags":["parastate","polkadot_ecosystem","pos"]},{"location":"public/blockchain/parastate/parastate-research-intro/#literature","title":"Literature","text":"<p>intermediate representation = IR</p> <p>Substrate-Glossary</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Reseacher &amp; Organized by:</p> <p>\ud83d\ude4fArman-Riazi\ud83e\udd1d </p> <p>[[Polkadot-Ecosystem-Research]]</p> <p>[[Substrate]]</p>","tags":["parastate","polkadot_ecosystem","pos"]},{"location":"public/blockchain/secondstate/secondstate-research-intro/","title":"Secondstate research intro","text":"<p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Secondstate(6)</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p>","tags":["secondstate","iot"]},{"location":"public/blockchain/secondstate/secondstate-research-intro/#introducing","title":"Introducing","text":"<p>For automakers, the runtime isolation reduces complexity in integration and operation. For parts makers, the virtualized runtime supports \u201cwrite once run on any car\u201d. Second State is developing a real-time, deterministic, and efficient runtime sandbox for automotive applications. It is completely open source and already used by leading auto suppliers. </p> <p>Rust could be\u00a025x faster than Python\u00a0for machine learning.  </p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["secondstate","iot"]},{"location":"public/blockchain/secondstate/secondstate-research-intro/#ssvm","title":"SSVM","text":"<p>The Second State Functions is based on the Second State WebAssembly VM (SSVM). It is specifically optimized for server-side applications.</p> <p>SSVM is a high-performance WebAssembly runtime for server-side apps. It is safer and 10x faster than Docker. It supports OS access (WASI), AOT compiler, stateful apps, seamless integration with Node.js, and access to hardware (AI chips).</p> <p>Second State\u00a0provides an open-source WebAssembly implementation (Second State Virtual Machine, or SSVM) that is specifically optimized for server side applications. It is</p> <p>Best in-class in performance. It is 1000x faster than Docker for cold starts.It starts and runs much faster than VM or container-based alternatives. It excels in compute intensive media, data, and edge AI apps.</p> <p>Seamlessly supports server application frameworks, such as the Node.js. You can build high performance Node.js apps with SSVM.</p> <p>Supports safe access to external resources, such as databases, message queues, and even new AI hardware</p> <p>Allows precise metering of computational resources for serverless apps.</p>","tags":["secondstate","iot"]},{"location":"public/blockchain/secondstate/secondstate-research-intro/#serverless","title":"Serverless","text":"<p>@FaaS </p> <p>is one of the fastest growing areas of cloud computing. FaaS allows developers to focus on the code. Once the developer uploads the code, the FaaS takes care of deployment, service availability, and scalability. The developer only pays for resources the service uses, not reserved idle time. This approach, known as serverless computing, is the way to build inter-connected and microservice-based applications. The result are fast development turn around, easy deployment, high availability, infinite scalability, at low cost.</p> <p>However, traditional FaaS are based on microVM (eg Firecracker and gVisor) and application container (eg Docker) technologies. They are general computing platforms not optimized for software stacks. To boot an entire OS and then heavy-weight runtimes just to run a single function is very inefficient. Therefore, existing FaaS solutions suffer from issues such as slow cold start, slow runtime performance, bloated runtime, and time-based billing. They are not suitable for computationally intensive applications.</p> <p>High-level language VMs, such as WebAssembly, offer a combination of ease-of-use, runtime safety, and high performance. The\u00a0WasmEdge Runtime\u00a0is a WebAssembly VM that is designed for edge cloud and device applications. It is a great fit for computationally intensive FaaS applications such as edge AI, real-time data analytics, multimedia processing, as well as typical transactional functions that need to start in sub-millisecond and make a quick call to another web service.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["secondstate","iot"]},{"location":"public/blockchain/secondstate/secondstate-research-intro/#features","title":"Features","text":"<p>@WasmEdge </p> <p>WasmEdge is a lightweight, high-performance, and extensible WebAssembly runtime for cloud native, edge, and decentralized applications. It powers serverless apps, embedded functions, microservices, smart contracts, and IoT devices.</p> <p>Today\u2019s web apps often have statically generated front ends that use JavaScript to interact with APIs on the backend (ie, the Jamstack).The WasmEdge is ideally suited for running backend API services as serverless functions. It is fast, secure, low maintainence, cross-platform, and can be easily deployed on edge networks for high performance.</p> <p>WebAssembly is the de facto runtime for modern blockchain smart contracts. Ethereum flavored WebAssembly (Ewasm) is a collaborative effort to bring the earliest and largest smart contract platform, Ethereum, to the WebAssembly world. WasmEdge is a leading Ewasm implementation, and it is already being adopted by leading public blockchains.</p> <p>@WASI @Tensorflow@ConvolutionalNeuralNetworks</p> <p>WASI provides a design pattern for sandboxed WebAssembly programs to securely access native host functions. The WasmEdge Runtime extends the WASI model to support access to native Tensorflow libraries from WebAssembly programs. It provides the security, portability, and ease-of-use of WebAssembly and native speed for Tensorflow.</p> <p>Second State FaaS provides a Rust API to run Tensorflow-based MobileNet models at native speeds. In this article, we will use a MobileNet model\u00a0trained from the ImageNet dataset\u00a0as an example.</p> <p>MobileNet\u00a0is a class of CNN models for computer vision applications. The most common application for MobileNet models is image classification. You can train (or\u00a0retrain) a MobileNet model to recognize objects that are interesting to your application (e.g., to\u00a0classify birds\u00a0in a bird watching application).</p> <p>The\u00a0MTCNN\u00a0is a class of Multi-task Cascaded Convolutional Network models. They are very good at detection faces and facial features. You can train (or retrain) MTCNN models with your own faces dataset so that it can accurately detect faces for your application.</p> <p>Second State FaaS provides a Rust API to run Tensorflow-based MTCNN models at native speeds. In this article, we will use the original\u00a0MTCNN model\u00a0trained in the\u00a0FaceNet\u00a0dataset as an example</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>","tags":["secondstate","iot"]},{"location":"public/blockchain/secondstate/secondstate-research-intro/#literature","title":"Literature","text":"<p>WebAssembly System Interface  = WASI</p> <p>Convolutional Neural Networks = CNN</p> <p>Function as a Service = FaaS</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Reseacher &amp; Organized by:</p> <p>\ud83d\ude4fArman-Riazi\ud83e\udd1d </p> <p>[[Polkadot-Ecosystem-Research]]</p> <p>[[Substrate]]</p>","tags":["secondstate","iot"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/","title":"Arman Riazi","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#a-guide-to-demoing-the-energy-contract","title":"A guide to demoing the [[energy]] contract","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#prerequisites","title":"Prerequisites","text":"<p>This documentation has been intended for readers with a basic understanding on the Solidity smart contract programming language and on basic web developing tools. In order to run, the demo requires the following software to be installed. For verified functionality, the specified versions are recommended:</p> <p>Ubuntu 16.04.2 LTS</p> <p>TestRPC, version 3.0.4</p> <p>Truffle, version 3.2.1</p> <p>Node.js, version 7.9.0</p> <p>Running an [[Ethereum]] client</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#install-dependencies","title":"Install dependencies","text":"<p>Before the first run, dependencies need to be installed for the test scripts and the status viewer.</p> <pre><code>cd scripts/\nnpm install\n</code></pre> <pre><code>cd scripts/status\nbower install\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#run-a-deterministic-testrpc-session","title":"Run a deterministic TestRPC session","text":"<p>For demoing purposes, TestRPC is a good choice for a client, for a number of reasons. Firstly, TestRPC creates a new blockchain instance and transactions can be paid with tokens of the said blockchain. The creator of the TestRPC session gains access to the tokens for free and therefore transactions can be made without a cost. Secondly, by default, TestRPC is configured in such a way that there is no block time\u2014instead, blocks are created on demand, whenever transactions occur. This type of a configuration is well suited for quick testing and demoing. Finally, TestRPC can be run in deterministic mode. This means that a smart contract\u2019s address, for example, can be known already before deploying it in the blockchain. This makes it possible to reference the address in scripts made for testing or demoing purposes.</p> <pre><code>testrpc -d\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#deploy-the-contract","title":"Deploy the contract","text":"<p>The smart contracts written in Solidity need to be compiled and deployed to the blockchain. This can be achieved by using a development environment for Ethereum called Truffle. A simple migration script needs to be created for Truffle, after which the contracts can be deployed using the following command:</p> <pre><code>truffle migrate\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#run-the-issuer-script-that-issues-smart-meter-ownerships","title":"Run the issuer script that issues smart meter ownerships","text":"<p>For the demo, a seller and a buyer of electricity are needed. Furthermore, the ownership of a smart meter needs to be assigned to both of these parties. In our demo, we utilize an approach where a master key holder has the power to establish ownerships to the system participants. We establish a master key holder of smart meters for the electricity marketplace and have the key holder assign ownership to the smart meters.</p> <pre><code>cd scripts/\nnode issuer.js\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#open-the-status-view-in-browser","title":"Open the status view in browser","text":"<p>Without a graphical user interface, none of the process steps can be visually observed in any way. Therefore, a simple web-browser-based status viewer has been added to the demo appli cation. It shows the changes in the status of the different entities as a crude HTML table. The status viewer can be accessed by opening the web page index.html in any web browser.</p> <p>Open <code>scripts/status/index.html</code> in browser.</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#create-sell-offers","title":"Create sell offers","text":"<p>For the purposes of the demo, the market should be populated with sell offers of energy. The script offer.js is used for this purpose. The script\u2019s optional command line parameter index can be used to create different pre-populated sell offers. Change the optional index argument to create different pre-populated offers. The default behavior is to choose the offer at index 0 so the index must be within range 0 to 9. When omitting the index parameter, the script defaults to using index 0.</p> <pre><code>node offer [&lt;index&gt;]\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#accept-offers-as-a-buyer","title":"Accept offers as a buyer","text":"<p>Any sell offers created earlier can be accepted by the buyer. The script acceptoffer.js can be used to do so. The optional index parameter of the script works similarly as the parameter earlier specified for the offer.js script and can be used to accept offers. For example, if an offer was created using the command node offer 4, then running the command node acceptoffer 4 will make the buyer accept it.</p> <pre><code>node acceptoffer [&lt;index&gt;]\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#send-reports-from-smart-meters-or-wait-until-the-report-deadline","title":"Send reports from smart meters (or wait until the report deadline)","text":"<p>Once an offer has been created and accepted, and the scheduled transfer of electricity is due, both the seller\u2019s and the buyer\u2019s smart meters are expected to report on the successfulness of the transfer. The Ethereum transactions submitting these reports can be created using the scripts sellerreport.js and buyerreport.js. The optional index parameter can be used to refer to different sell offers exactly the same way as in the scripts described earlier. Both scripts, sellerreport.js and buyerreport.js need to be run in order to move an instance of electricity transfer to its next state in the smart contract. The reports have a deadline before which they need to be submitted. According to the deadline, the reports must be submitted and written into the blockchain no later than 30 minutes after the transfer is completed. In the case a transacting party fails to report within the allocated time frame, the smart contract will assume the worst possible economic outcome for the abstinent party.</p> <pre><code>node sellerreport [&lt;index&gt;]\nnode buyerreport [&lt;index&gt;]\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#withdraw-money","title":"Withdraw money","text":"<p>Once both smart meters have submitted their reports (or the deadline has expired), the assets stored in the contract can be withdrawn. The withdrawal can be initiated by anyone, in which case the assets are sent to their rightful owner, as determined by the logic of the smart contract. The script withdraw.js can be used to execute the withdrawal. The optional index parameter can be used to refer to different instances of electricity transfer.</p> <pre><code>node withdraw [&lt;index&gt;]\n</code></pre> <ul> <li>A part of this project was got from an article </li> </ul>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#smart-contracts","title":"Smart Contracts","text":"<p>The logic of the electricity market smart contract is defined in the Solidity file ElectricityMarket.sol. The contract defines the public methods for creating sell offers, accepting them, sending smart meter reports and withdrawing assets.</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#gui","title":"GUI","text":"<p>The status viewer is a web page which is useful for observing changes in the blockchain while running the demo. It shows the status of all the created sell offers and the account balances of the buyer, the seller and the electricity market smart contract. The status viewer can be run by opening the file index.html in any web browser.</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#sourcecode","title":"Sourcecode","text":"<p>Armanriazi-Github-Energy-Sample Project</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-marketplace-in-energy/#nodejs-metamask-rpc","title":"nodejs #metamask #rpc","text":"<p>[[Ethereum_Ecosystem_Research]]</p> <p>[[smart-contract]]</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/","title":"Arman Riazi","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#a-guide-to-demoing-the-real-estate-contract","title":"A guide to demoing the [[real-estate]] contract","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#prerequisites","title":"Prerequisites","text":"<p>This documentation has been intended for readers with a basic understanding on the Solidity smart contract programming language and on basic web developing tools. In order to run, the demo requires the following software to be installed. For verified functionality, the specified versions are recommended:</p> <p>Ubuntu 16.04.2 LTS</p> <p>Test[[RPC]], version 3.0.4</p> <p>Truffle, version 3.2.1</p> <p>Node.js, version 7.9.0</p> <p>Running an [[Ethereum]] client</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#run-a-deterministic-testrpc-session","title":"Run a deterministic TestRPC session","text":"<p>At first, an Ethereum client needs to be run</p> <pre><code>testrpc -d\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#deploy-the-contract","title":"Deploy the contract","text":"<p>For demoing purposes, Test[[RPC]] is a good choice for a client, for a number of reasons. First ly, TestRPC creates a new blockchain instance and transactions can be paid with tokens of the said blockchain. The creator of the TestRPC session gains access to the tokens for free and therefore transactions can be made without a cost. Secondly, by default, TestRPC is configured in such a way that there is no block time\u2014instead, blocks are created on demand, whenever transactions occur. This type of a configuration is well suited for quick testing and demoing. Finally, TestRPC can be run in deterministic mode. This means that a smart contract\u2019s address, for example, can be known already before deploying it in the blockchain. This makes it possi ble to reference the address in scripts made for testing or demoing purposes. Deploying the smart contracts The smart contracts written in Solidity need to be compiled and deployed to the blockchain. This can be achieved by using a development environment for Ethereum called Truffle. A sim ple migration script needs to be created for Truffle, after which the contracts can be deployed using the following command: <pre><code>truffle migrate\n</code></pre></p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#open-the-status-view-in-browser","title":"Open the status view  in browser","text":"<p>Without a graphical user interface, none of the process steps can be visually observed in any way. Therefore, a simple web-browser-based status viewer has been added to the demo application. It shows the changes in the status of the different entities as a crude HTML table. The status viewer can be accessed by opening the web page index.html in any web browser. Open <code>scripts/status/index.html</code> in browser.</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#run-the-issuer-script-that-creates-real-estates-owners-and-agents-in-the-contract","title":"Run the issuer script that creates real estates, owners and agents in the contract.","text":"<p>Creating the assets and the agents, and establishing ownership For the demo, agents are needed in order to facilitate a workflow between them. Furthermore, for the purposes of facilitating the sale of a share in a housing association, the ownership of assets and documents needs to be assigned to these parties. In our demo, we utilize an approach where a master key holder has the power to establish ownerships to the system participants. We establish a master key holder that is allowed to create owners for shares of stock, property agents and shares of stock in housing companies in the application. By running the script 0-issuer.js, we create a number of owners, agents and a number of shares of stock, and we assign the first owner to each created share of stock.</p> <pre><code>cd scripts/\nnode 0-issuer\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#initiate-the-sale-of-a-real-estate","title":"Initiate the sale of a real estate","text":"<p>The process of selling a share of stock in a housing company usually starts with the seller contacting a property agent or agents for a listing offer. In the case of our demo application, the seller can announce a solicitation for listing offers by initiating a transaction in the smart contract designed to facilitate the workflow. For the purposes of the demo, the smart contract should therefore be populated with at least one request for listing offers. The script 1-initiateSale.js is used for this purpose</p> <pre><code>node 1-initiateSale\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#open-ipfs-web-user-interface","title":"Open IPFS web user interface","text":"<p>Uploading documents to the IPFS Selling a share of stocks in a housing corporation requires a housing manager\u2019s certificate to be drafted.2 In order to draft the certificate, the building manager must check the validity of the required information by combining data from several public and private information pools, e.g. the title and the mortgage register of the National Land Survey, the trade register of the Finnish Patent and Registration Office, the housing company debt report of the creditor banks, the property management planning report of the housing company in question, and so on. In our demo application\u2019s workflow, the data required for the housing manager\u2019s certificate are requested from the information pools. The pools directly store the requested files in the Interplanetary File System (IPFS) and enter the associated hash values into the smart contract facilitating the workflow.3 To emulate this in our demo, the hashes of three random documents followed by the hash of the housing manager\u2019s certificate are recorded into the blockchain. We first run the following command to set up a local IPFS node.</p> <pre><code>ipfs daemon\n</code></pre> <p>We then open the web user interface at http://localhost:5001/webui in browser, drag-and-drop the information pool documents to the web user interface to upload them, and make note of the hash values of the documents</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#upload-three-documents-related-to-the-real-estate","title":"Upload three documents related to the real estate","text":"<p>Upload the document to IPFS by drag-and-drop in the web UI. See what the hash of the document is and announce it in the smart contract. As the next step, the command above is executed three times, each time replacing  with the hash of a different document. We then run the following command once to upload the actual housing manager\u2019s certificate, compiled from the already uploaded documents: <pre><code>node 2-uploadDocument &lt;document hash&gt;\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#upload-confirmation-letter","title":"Upload confirmation letter","text":"<p>As the next step, the command above is executed three times, each time replacing  with the hash of a different document. We then run the following command once to up load the actual housing manager\u2019s certificate, compiled from the already uploaded documents: <pre><code>node 3-uploadConfirmationLetter &lt;document hash&gt;\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#create-offers-to-sell-the-property-as-a-real-estate-agentbroker","title":"Create offers to sell the property as a real estate agent/broker","text":"<p>Create offers from real estate agents to sell the property When the housing manager\u2019s certificate has been received, the real estate can be sold. In the workflow of our demo application, real estate agents compete for who gets to sell the real estate by making offers to the seller of the real estate, specifying a fee (e.g. a percentual cut) that they\u2019ll sell it for.</p> <pre><code>node 4-makeAgentOffer &lt;fee&gt;\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#as-the-owner-of-the-real-estate-accept-one-of-the-agent-offers","title":"As the owner of the real estate, accept one of the agent offers","text":"<p>To emulate this market behavior, we run the command above any number of times, each time changing the fee variable to differentiate between offers. Accepting a real estate agents offer As the last step of the workflow modelled in our demo application, the seller of the share of stocks in a housing company chooses one of the listing offers made by one of the agents. This is emulated by executing the command below, along with the proper offer ID from the status viewer window.</p> <pre><code>node 5-chooseAgentOffer &lt;offer id&gt;\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#ganache-commands","title":"Ganache Commands","text":"<p>npm run ganache ganache-cli --accounts</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#smart-contract","title":"Smart Contract","text":"<p>The logic of the smart contract facilitating the workflow is defined in the Solidity file RealEstateMarket.sol. The contract defines the public methods for initiating sales, creating housing manager certificates, as well as creating listing offers and accepting them.</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#gui","title":"GUI","text":"<p>The status viewer is a web page which is useful for observing changes in the blockchain while running the demo. It shows the status of the workflow process, with all the contributions to it by the various participants. The status viewer can be run by opening the file index.html in any web browser.</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#sourcecode","title":"Sourcecode","text":"<p>Armanriazi-Github-RealState-Sample Project</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-real-estate/#nodejs-truffle-ganache-eth-ethereum","title":"nodejs #truffle #ganache #eth #ethereum","text":"<p>[[Ethereum_Ecosystem_Research]]</p> <p>[[smart-contract]]</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-sale/","title":"Arman Riazi","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-sale/#a-guide-to-demoing-the-marketplace-contract","title":"A guide to demoing the [[marketplace]] contract","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-sale/#prerequisites","title":"Prerequisites","text":"<p>This documentation has been intended for readers with a basic understanding on the Solidity smart contract programming language and on basic web developing tools. In order to run, the demo requires the following software to be installed. For verified functionality, the specified versions are recommended:</p> <p>Ubuntu 18.04.0 LTS</p> <p>Node.js, version 8.9.0</p> <p>MetaMask</p> <p>Running an [[Ethereum]] client</p>","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-sale/#install-dependencies","title":"Install dependencies","text":"<p>Before the first run, dependencies need to be installed for the test scripts and the status viewer.</p> <pre><code>cd scripts/\nnpm install\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-sale/#sale-contract","title":"Sale Contract","text":"<ul> <li> <p>Who Wants to build Smartcontracts and DApps. basic knowledge on Ethereum Eco-System and Solidity Language is necessary to understand These Concepts.</p> </li> <li> <p>I\u2019m writing this step-by-step guide and I wish it is the best way to explain what Smart Contracts are. So let's get started.</p> </li> <li> <p>E-commerce involves buying and selling of goods or services. So mainly it has buyers and sellers.</p> </li> <li> <p>The following example is made of ethereum blockchain using a point-to-point product trading system. Each user buys a product via their MetaMask, which leads to the deduction of the amount of ethereum in the buyer's wallet and at the same time is credited to the seller's account according to the smart contract deployed.</p> </li> <li> <p>This sample does not follow the internal network in the previous sample It has got an ethereum test network called Kovan.</p> </li> </ul>","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-sale/#truffle-commands","title":"Truffle Commands","text":"<pre><code>npm run truffle-migrate-reset\n\n//gitter.im/kovan-testnet/faucet\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-sale/#sourcecode","title":"Sourcecode","text":"<p>Armanriazi-Github-Marketplace-Sample Project</p>","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-sale/#nodejs-metamask","title":"nodejs #metamask","text":"<p>[[Ethereum_Ecosystem_Research]]</p> <p>[[smart-contract]]</p> <p>[[Faucet]]</p> <p>[[Kovan]]</p>","tags":["smartcontract","ethereum_ecosystem","sample","github","faucet","kovan"]},{"location":"public/blockchain/solidity/smart-contract-voting/","title":"Arman Riazi","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-voting/#a-guide-to-the-vote-contract","title":"A guide to the [[vote]] contract","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-voting/#prerequisites","title":"Prerequisites","text":"<p>This documentation has been intended for readers with a basic understanding on the Solidity smart contract programming language and on basic web developing tools. In order to run, the demo requires the following software to be installed. For verified functionality, the specified versions are recommended:</p> <p>Ubuntu 18.04.0 LTS</p> <p>Node.js, version 8.9.0</p> <p>Ganache</p> <p>MetaMask</p> <p>Running an [[Ethereum]] client</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-voting/#install-dependencies","title":"Install dependencies","text":"<p>Before the first run, dependencies need to be installed for the test scripts and the status viewer.</p> <pre><code>cd scripts/\nnpm install\n</code></pre>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-voting/#vote-contract","title":"Vote Contract","text":"<p>There is no doubt that the revolutionary concept of the blockchain, which is the underlying technology behind the famous cryptocurrency Bitcoin and its successors, is triggering the start of a new era in the Internet and the online services. While most people focus only at cryptocurrencies; in fact, many administrative operations, fintech procedures, and everyday services that can only be done offline and/or in person, can now safely be moved to the Internet as online services. What makes it a powerful tool for digitalizing everyday services is the introduction of smart contracts, as in the Ethereum platform. Smart contracts are meaningful pieces of codes, to be integrated in the blockchain and executed as scheduled in every step of blockchain updates. E-voting on the other hand, is another trending, yet critical, topic related to the online services. The blockchain with the smart contracts, emerges as a good candidate to use in developments of safer, cheaper, more secure, more transparent, and easier-to-use e-voting systems.   Ethereum and its network is one of the most suitable ones, due to its consistency, widespread use, and provision of smart contracts logic. An e-voting system must be secure, as it should not allow duplicated votes and be fully transparent, while protecting the privacy of the attendees. In this work, we have implemented and tested a sample e-voting application as a smart contract for the Ethereum network using the Ethereum wallets and the Solidity language.</p> <p>In the following example, demonstrated a voting app on ethereum network which per-account will be have a franchise.</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-voting/#features","title":"Features","text":"<ul> <li>Transparency </li> <li>Distributed </li> <li>Private Test Network</li> <li>Integrate to the Metamask</li> </ul>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-voting/#ganache-commands","title":"Ganache Commands","text":"<p>npm run ganache ganache-cli --accounts</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract-voting/#sourcecode","title":"Sourcecode","text":"<p>Armanriazi-Github-Vote-Sample Project</p> <p>[[Ethereum_Ecosystem_Research]]</p> <p>[[smart-contract]]</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract/","title":"SmartContract","text":"","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/solidity/smart-contract/#sample-projects","title":"Sample Projects","text":"<p>Smart Contract-Sales-Energy</p> <p>Smart Contract-RealState</p> <p>Smart Contract-Sale Product</p> <p>Smart Contract-Vote</p> <p>[[Ethereum_Ecosystem_Research]]</p> <p>[[smart-contract]]</p>","tags":["smartcontract","ethereum_ecosystem","sample","github"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/","title":"Polka research intro","text":"<p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Part(1)</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#introducing","title":"Introducing","text":"<p>Polkadot unites a network of heterogeneous blockchain shards called parachains. These chains connect to and are secured by the Polkadot Relay Chain. They can also connect with external networks via bridges.</p> <p></p> <p></p> <p></p> <p></p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#inbound-outboundtransaction","title":"Inbound-outboundTransaction","text":"<p>@Ingress</p> <p>Dynamic information includes aspects of the transaction routing system that must have global agreement such</p> <p>as the parachain\u2019s ingress queue </p> <p>@Egress</p> <p>...</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#parachain","title":"Parachain","text":"<p>A first parachain implementation, likely to be based heavily on an existing blockchain protocol such as Bitcoin or (more likely, since it provides for rich transactions) Ethereum. This will include an integration with the proof-of-stake chain, allowing the parachain to gain consensus without its own internal consensus mechanism.</p> <p>Each parachain is defined in  this registry. It is a relatively simple database-like construct and holds both static and dynamic information on each chain.Static information includes the chain index (a simple integer), along with the validation protocol identity.</p> <p>Each parachain brings with it the potential to grief validators with an</p> <p>over-burdensome validation algorithm.</p> <p>@zk-SNARKs</p> <p>A parachain utilising the properties of zk-SNARKs in order to ensure identities of transactors on it are kept private. A stretch goal dependent on the relay-chain.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#relay-chains","title":"Relay-chains","text":"<p>This is the final stage of the relay-chain, allowing the dynamic addition, removal and emergency pausing of parachains, the reporting of bad behaviour and includes implementation of the \\fisherman\" functionality Polkadot will be able to scale even further in the future with a planned feature known as nested relay chains, which will increase the number of shards that can be added to the network.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#interchain","title":"Interchain","text":"<p>(according to the logic of that chain) able to effect the dispatch of a transaction into a second parachain or, potentially, the relay-chain. Like external transactions on production blockchains, they are fully asynchronous and there is no intrinsic ability for them to return any kind of information back to its origin.</p> <p>@MessageProtocol</p> <p>The secret sauce of parachain interoperability lies in XCMP. XCMP enables parachains to share trusted logic, for example, transferring tokens between networks, without any additional trust assumptions!</p> <p>XCM is related to cross-chain in the same way that REST is related RESTful. XCM cannot actually send messages between systems. It is a format for how message transfer should be performed, similar to how RESTful services use REST as an architectural style of deployment.</p> <p>@Queue</p> <p>Interchain transactions are resolved using a simple queuing mechanism based around a Merkle tree to ensure fidelity.</p> <p>@Routing</p> <p>Posts Routing. Each parachain header includes an egress-trie-root;</p> <p>These posts are structured as several FIFO queues; the number of lists is known as the routing base and may be around 16. Notably, this number represents the quantity of parachains we can support without having to resort to multi-phase routing. Initially, Polkadot will support this</p> <p>kind of direct routing.</p> <p>Hyper-cube Routing. Hyper-cube routing is a mechanism which can mostly be build as an extension to the basic routing mechanism described above.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#validators","title":"Validators","text":"<p>Validators may provide only a \\null\" block containing no external \"transactions\" data, but may run the risk of getting a reduced reward if they do. </p> <p>List of punishable validator misbehaviour includes:</p> <p>\u2022 Being part of a parachain group unable to provide</p> <p>consensus over the validity of a parachain block.</p> <p>\u2022 Actively signing for the validity of an invalid parachain block.</p> <p>\u2022 Inability to supply egress payloads previously voted as available.</p> <p>\u2022 Inactivity during the consensus process.</p> <p>\u2022 Validating relay-chain blocks on competing forks.</p> <p>Parachain validators will need to collect additional input data from the previous set of validators or the availability guarantors.</p> <p>Each participant (validator) has a set of information, in the form</p> <p>of signed-statements (\"votes\") from other participants, regarding each parachain block candidate as well the relaychain block candidate. The set of information is two pieces:</p> <p>Availability: does this validator have egress transaction-post information from this block so they are able to properly validate parachain candidates on the following block? They may vote either 1(known) or 0 (not yet known).</p> <p>Validity: is the parachain block valid and is all externally-referenced data (e.g. transactions). They may vote either 1 (valid), -1 (invalid) or 0</p> <p>(not yet known).</p> <p>The basic rules for validity of the individual blocks (that allow the total set of validators as a whole to come to consensus on it becoming the unique parachain candidate to be referenced from the canonical relay):</p> <p>\u2022 must have at least two thirds of its validators voting positively and none voting negatively;</p> <p>\u2022 must have over one third validators voting positively to the availability of egress queue information.</p> <p>@BFT</p> <p>All validators must submit votes; votes may be resubmitted, qualified by the rules above. The progression of consensus may be modelled as multiple standard BFT consensus algorithms over each parachain happening in parallel.</p> <p>@Bonded-Validator</p> <p>It allows an account to register a desire to become a bonded validator (along with its requirements), to nominate to some identity, and for preexisting bonded validators to register their desire to exit this status.</p> <p>@Sealing</p> <p>Under a PoW chain,sealing is effectively a synonym for mining. In our case, it involves the collection of signed statements from validators over the validity, availability and canonicality of a particular relay-chain block and the parachain blocks that it represents.</p> <p>The relay-chain block may then be sealed and the process of sealing the next block begun.</p> <p>The sealing process takes place under a single consensus-generating mechanism addressing both the relay-chain\u2019s block and the parachains\u2019 blocks.</p> <p>@Improvments-for-sealing-relay-blocks</p> <p>Public Participation. One more possible direction is to enlist public participation in the process through a micro-complaints system. Similar to the fishermen, there could be external parties to police the validators who claim availability. Their task is to find one who appears unable to demonstrate such availability.</p> <p>Availability Guarantors.  A (this may be represented by Validators in the basic form of the protocol).</p> <p>Availability guarantors will mostly aim to maintain a stable connection to each other and to validators.</p> <p>A final route would be to nominate a second set of bonded validators as \"availability guarantors\".</p> <p>Unlike normal validators, they would not switch between parachains but rather would form a single group to attest to the availability of all important interchain data. This has the advantage of relaxing the equivalence between participants and chains.</p> <p>Overweight Blocks. If a validator set is compromised, they may create and propose a block which though valid, takes an inordinate amount of time to execute and validate. This is a problem since a validator group could reasonably form a block which takes a very long time to execute unless some particular piece of information is already known allowing a short cut, e.g. factoring a large prime. If a single collator knew that information, then they would have a clear advantage in getting their own candidates accepted as long as the others were busy processing the old block. We call these blocks overweight.</p> <p>To ensure validators can predict when they may be proposing an overweight block, it may be sensible to require them to publish information on their own performance for each block.</p> <p>Collator Insurance. One issue remains for validators: unlike with PoW networks, to check a collator\u2019s block for validity, they must actually execute the transactions in it. Malicious collators can feed invalid or overweight blocks to validators causing them grief and exacting a potentially substantial opportunity cost.</p> <p>To mitigate this, we propose a simple strategy on the part of validators. Firstly, parachain block candidates sent to validators must be signed from a relay chain account with funds; if they are not, then the validator should drop it immediately. </p> <p>Collator Preferences. One important aspect of this system is to ensure that there is a healthy selection of collators creating the blocks in any given parachain. If a single collator dominated a parachain then some attacks become more feasible.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#collators","title":"Collators","text":"<p>it is quite possible that this mechanism enables even very small stakeholders to contribute as a collator.</p> <p>This is the delivery of an alternative chain-specific collator functionality. It includes proof creation (for collators), parachain misbehaviour detection (for fishermen) and the validation function (for validators). It also includes any additional networking required to allow the two to discover and communicate.</p> <p>@zero-knowledge@gossip </p> <p>Validators work alongside a parachain gossip protocol with collators individuals who collate transactions into blocks and provide a noninteractive, zero-knowledge proof that the block constitutes a valid child of its parent (and taking any transaction fees for their trouble</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#fishermen","title":"Fishermen","text":"<p>The parties get a reward for reporting such activity; their term, \"fishermen\" stems from the unlikeliness of such a reward.</p> <p>Fishermen, as well as general relay-chain and parachain clients will generally aim to keep a connection open to a validator or guarantor.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#queue","title":"Queue","text":"<p>These queues are administered on the relay-chain</p> <p>allowing parachains to determine each other\u2019s saturation</p> <p>status; this way a failed attempt to post a transaction</p> <p>to a stalled destination may be reported synchronously.</p> <p>(Though since no return path exists, if a secondary transaction failed for that reason.)</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#networking","title":"Networking","text":"<p>@overlay@devp2p @p2p</p> <p>solved around a few request and answer message types. While Ethereum made progress on current protocol offerings with the devp2p protocol, which allowed for many subprotocols to be multiplexed over a single peer connection and thus have the same peer overlay support many p2p protocols simultaneously.To ensure an efficient transport mechanism, a \"flat\" overlay network like Ethereum\u2019s devp2p.</p> <p>Polkadot are rather more substantial. Rather then a wholly uniform network, Polkadot has several types of participants each with different requirements over their peer makeup and several network \"avenues\" whose participants will tend to converse about particular data. This means a substantially more structured network overlay|and a protocol supporting that will likely be necessary. </p> <p>network participants into two sets (relay-chain, parachains) each of three subsets.</p> <p>Path to an Effective Network Protocol. Likely the</p> <p>most effective and reasonable development effort will focus on utilising a pre-existing protocol rather than rolling</p> <p>our own. Several peer-to-peer base protocols exist that we may use or augment including Ethereum\u2019s own devp2p, IPFS\u2019s libp2p and GNU\u2019s GNUnet. A full review of these protocols and their relevance for building a modular peer network supporting certain structural guarantees, dynamic peer steering and extensible sub-protocols is well beyond the scope of this document.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#parachain-block","title":"Parachain-Block","text":"<p>@Candidate</p> <p>Such subsets of validators are required to provide a parachain block candidate which is guaranteed valid (on pain of bond confiscation).</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#transaction-forwarding-contract","title":"Transaction-forwarding-contract","text":"<p>In short, we envision that transactions from Polkadot can be signed by validators and then fed into Ethereum where they can be interpreted and enacted by a transaction-forwarding contract.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#break-in-contract","title":"Break-in-contract","text":"<p>Ethereum is able to host a \"break-in contract\" which can maintain the 144 signatories and be controlled by them. </p> <p>we can imagine a \"break-in\" contract within a parachain which allows a</p> <p>validator to be guaranteed payment in exchange for the provision of a particular volume of processing resources.</p> <p>These resources may be measured in something like gas, but could also be some entirely novel model such as subjective time-to-execute or a Bitcoin-like flat-fee model.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#breakout-contract","title":"Breakout-contract","text":"<p>@Header</p> <p>we can imagine our Polkadot-side Ethereum interface to have some simple functions: to be able to accept a new header from the Ethereum network and validate the PoW, to be able to accept some proof that a particular log was emitted by the Ethereum-side breakout contract for a header of sufficient depth (and forward the corresponding message within Polkadot) and finally to be able to accept proofs that a previously accepted but not-yet-enacted header contains an invalid receipt root.</p> <p>Delivering a transaction from Bitcoin to Polkadot can in principle be done with a process similar to that for Ethereum; a \\break-out address\" controlled in some way by the Polkadot validators could receive transferred tokens (and data sent alongside them).</p> <p>Any tokens then owned in the \"break-out address\" would then, in principle, be controlled by those same validators for later dispersal</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#staking-contract","title":"Staking-Contract","text":"<p>This contract maintains the validator set. It manages:</p> <p>\u2022 which accounts are currently validators;</p> <p>\u2022 which are available to become validators at short notice;</p> <p>\u2022 which accounts have placed stake nominating to a validator;</p> <p>\u2022 properties of each including staking volume, acceptable payout-rates and addresses and short term (session) identities.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#pos","title":"POS","text":"<p>Proof-of-stake chain: Extending the consensus mechanism into proof-of stake territory; this module includes staking tokens, managing entry and exit from the validator pool, a market mechanism for determining validator rewards, finalising the approval-voting nomination mechanism and managing bond-confiscation and dismissal. It includes a substantial amount of research and prototyping prior to final development.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#npos","title":"NPOS","text":"<p>@Stake-Token-Liquidity</p> <p>Keeping with our tenets, we elect for the simplest solution: not all tokens be staked. This would mean that some proportion (perhaps 20%) of tokens will forcibly remain liquid. Though this is imperfect from a security perspective, it is unlikely to make a fundamental difference in the security of the network; 80% of the reparations possible from bond confiscations would still be able to be made compared to the perfect case\" of 100% staking.</p> <p>sessions would happen regularly, perhaps as often as once per hour.</p> <p>@Nominate</p> <p>Nominating works through an approval-voting system.Each session, nominators\u2019 bonds are dispersed to be represented by one or more validators.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#poa","title":"POA","text":"<p>Proof-of-authority consensus mechanism supporting rich validator statements and allowing multiple independent items to be agreed upon under a single series based upon subjective reception of the partial set of validator statements. The mechanism should allow the proof of misbehaviour for the dismissal of malicious validators but need not involve any staking mechanism. A substantial amount of research and prototyping will precede the development of this component</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#poc","title":"POC","text":"<p>An initial proof-of-concept would focus on placing the new validation algorithms into clients themselves, effectively requiring a hard fork of the protocol each time an additional class of chain were added.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#features","title":"Features","text":"<p>@Forkless</p> <p>often taking months of work, and particularly contentious hard forks can break apart a community.Polkadot revolutionizes this process, enabling blockchains to upgrade themselves without the need to fork the chain. These forkless upgrades are enacted through Polkadot\u2019s transparent on-chain governance system.</p> <p>@runtime@substrate</p> <p>How can a blockchain network automatically upgrade? Substrate has a unique property where the runtime (state transition function) is stored within the blockchain state. This means nodes update themselves by default rather than through manual intervention.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#dao","title":"DAO","text":"<p>@governance</p> <p>Initially, this will be a meta-protocol on the relay-chain for managing exceptional events such as hard-forks, soft-forks and protocol reparameterisation. It will include a modern structure to help manage conflict and prevent live-lock. Ultimately, this may become a full meta protocol layer able to enact changes normally reserved for hard-forks. Requires the relay chain.</p> <p>The registry is able to have parachains added only through full referendum voting; this could be managed internally but would more likely be placed in an external referendum contract in order to facilitate re-usage under more general governance components. The parameters to voting requirements (e.g. any quorum required, majority</p> <p>required) for registration of additional chains.</p> <p>two thirds supermajority to pass with more than one third of total system</p> <p>stake voting positively may be a sensible starting point.</p> <p>The removal of parachains altogether would come only after a referendum .</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#crowdloan","title":"Crowdloan","text":"<p>@Slot</p> <p>If the slots cannot be filled, the lower bound could be repeatedly reduced by some factor in order to satisfy.</p> <p>@StakeHolder</p> <p>Essentially, the community of stakeholders will need to be incentivized to add child chains|either financially or through the desire to add featureful chains to the relay.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#fees","title":"Fees","text":"<p>@Negotiation-logic</p> <p>The transaction has an origin segment, providing the ability to identify a parachain, and an address which may be of arbitrary size. Unlike common current systems such as Bitcoin and Ethereum, interchain transactions do not come with any kind of payment\" of fee associated; any such payment must be managed through negotiation logic on the source and destination parachains.</p> <p>Calling into another such chain would mean proxying through this bridge, which would provide the means of negotiating the value transfer between chains in order to pay for the computation resources required on the destination parachain.</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#gas","title":"Gas","text":"<p>cost of Ethereum confirming that an instruction was properly validated as coming from the Polkadot network would be no more than 300,000 gas|a mere 6% of the total block gas limit at 5.5M.</p> <p>then the cost to the network of maintaining this Ethereum-forwarding bridge would be around 540,000 gas per day or, at present gas prices, $45 per year. </p> <p>without gas, how does one parachain avoid another parachain from forcing it to do computation? While we can rely on transaction-post ingress queue buffers to prevent one chain from spamming another with transaction data, there is no equivalent mechanism provided by the protocol to prevent the spamming of transaction processing.</p> <p>Because of Substrate\u2019s modularity, gas is completely optional, and the introduction of off-chain features greatly reduces computation and storage costs.</p> <p>\u270d\ufe0f\u270d\ufe0f\u270d\ufe0f</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#signature","title":"Signature","text":"<p>One interesting, and cheaper, alternative to this multisignature contract model would be to use \u270d\ufe0fthreshold signatures in order to achieve the multi-lateral ownership semantics. While threshold signature schemes for ECDSA are computationally expensive, those for other schemes such as \u270d\ufe0f Schnorr signatures are very reasonable.</p> <p>Bitcoin is substantially more limited, with most clients accepting only multisignature transactions with a maximum of 3 parties</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#spv","title":"SPV","text":"<p>refers to Simplified Payment Verification in Bitcoin and describes a method for clients to verify transactions while keeping only a copy of all blocks headers of the longest PoW chain.</p> <p>\u2753\u2753\u2753</p> <p>Appendix B. Frequently Asked Questions</p> <p>Is Polkadot designed to replace (insert blockchain here)? No. The goal of Polkadot is to provide a framework under which new blockchains may be created and to which existing blockchains can, if their communities desire, be transitioned.</p> <p>Is Polkadot designed to replace (insert crypto-currency here)? No. Polkadot tokens are neither intended nor designed to be used as a currency. They would make a bad currency: most will remain illiquid in the staking system and those that are liquid will face substantial fees for transfer of ownership. Rather, the purpose of Polkadot tokens is to be a direct representation of stake in the Polkadot network.</p> <p>What is the inflation rate for Polkadot staking tokens? The Polkadot staking token base expansion is unlimited. It rises and lowers according to market effects in order to target a particular proportion of tokens held</p> <p>under long-term bond in the validation process.</p> <p>Why does staking token ownership reflect stakeholding? This is a mechanism realised by the fact that they underpin the network\u2019s security. As such their value is tied to the overall economic value that Polkadot provides. Any actors who gain overall value from Polkadot operating correctly are incentivised to ensure it continues to do so. The best means of doing so is to take part in the validation process. This generally implies ownership of staking tokens.</p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/polka-research-intro/#literature","title":"Literature","text":"<p>external data referenced = transactions</p> <p>grief = wasting their resources</p> <p>a posted transaction = post</p> <p>XCMP = Cross-Chain Message Passing</p> <p>runtime = state transition function</p> <p>Substrate-Glossary</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>If you liked this article or if it helped you please clap on this post to help the Read.Cash algorithm recommend it to more people. If you have any questions or remarks please feel free to leave a comment below.</p> <p>Alternatively, please feel free to send donations </p> <p>0xde5D732a5AB44832E1c69b18be30834639F44A2c</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Reseacher &amp; Organized by: </p> <p>\ud83d\ude4fArman-Riazi\ud83e\udd1d</p> <p>[[Polkadot-Ecosystem-Research]]</p> <p>[[Polkadot]]</p> <p>[[Kusama]]</p> <p>[[Substrate]]</p>","tags":["kusama","polkadot_ecosystem","substrate","whitepapaer","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/","title":"Substrate framework research intro","text":"<p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Part(2)</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#introducing","title":"Introducing","text":"<p>Polkadot and Substrate are not dependent on each other. Polkadot parachains can be built and maintained without ever touching Substrate. Substrate-based chains can exist as \u2018solo-chains\u2019 on an independent basis.</p> <p>Substrate is a fully modular blockchain framework that unleashes developers instead of forcing them to work within the confines of others' design decisions. Building a custom blockchain with Substrate offers greater freedom, flexibility, and optimization than building on top of a general-purpose smart-contract blockchain.</p> <p>you're not only free to choose your parameters such gas costs, governance, and consensus, you're also free to choose how your blockchain is deployed and if/how it should communicate with other networks.\u00a0</p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p>On my opinion for  substrate future(DNA Replication)</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#limitations-resolved","title":"Limitations-Resolved","text":"<p>For example, reusing the Ethereum codebase implies several limitations: having to place all of your business logic in terms of the EVM, being forced to use one of the two EVM languages, having all business logic dynamically metered, and being limited to Ethereum's transaction pool and lack of core upgradability.</p> <p>Without Substrate, there would be no easy way to build the blockchains that constitute the Polkadot ecosystem, and many builders would be forced into using a constrictive and uniform smart contract environment, limiting innovation and leaving Polkadot\u2019s remarkable heterogeneous sharding system unutilized.</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#mainmodules","title":"MainModules","text":"","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#frame","title":"Frame","text":"<p>business logic is provided through a modular system known as FRAME.</p> <p>is a set of modules and support libraries that simplify runtime development. In Substrate, these modules are called Pallets, each hosting domain-specific logic to include in a chain's runtime. FRAME also provides some helper modules to interact with important\u00a0Substrate Primitives\u00a0that provide the interface to the core client.</p> <p>FRAME not only provides a library of commonly used Substrate pallets but also a framework to build custom domain-specific pallets, giving runtime engineers the flexibility to define their runtime's behavior according to their target use case. The result is each pallet has its own discrete logic which can modify the features and functionality of your blockchain's state transition functions.</p> <p>For example, the\u00a0Balances pallet, which is included in\u00a0FRAME, defines cryptocurrency capabilities for your blockchain. More specifically, it defines:</p> <p>Storage items\u00a0that keep track of the tokens a user owns.</p> <p>Functions\u00a0that users can call to transfer and manage those tokens.</p> <p>APIs\u00a0which allow other pallets to make use of those tokens and their capabilities.</p> <p>Hooks\u00a0which allow other pallets to trigger function calls when a user's balance changes.</p> <p>A FRAME pallet is composed of 7 sections:</p> <p>Imports and Dependencies</p> <p>Declaration of the Pallet type</p> <p>Runtime Configuration Trait</p> <p>Runtime Storage</p> <p>Runtime Events</p> <p>Hooks</p> <p>Extrinsics</p> <p>An example is as follows: https://docs.substrate.io/v3/runtime/frame/</p> <p>Pallets can be composed of as many sections as needed, giving runtime engineers a lot of flexibility on top of the basic skeletons depicted above. Refer to the\u00a0Substrate Runtime Macros\u00a0to learn more about adding functionality to a FRAME pallet.</p> <p>@System crate</p> <p>The\u00a0FRAME System crate\u00a0frame_system\u00a0provides low-level types, storage, and functions for your blockchain. All other pallets depend on the System crate as the basis of your Substrate runtime.</p> <p>The System crate defines all the core types for the Substrate runtime, such as:</p> <p>*Origin</p> <p>*Block Number</p> <p>*Account Id</p> <p>*Hash * *Header *Version * *etc...</p> <p>*It also has a number of system-critical storage items, such as:</p> <p>*Account Nonce * *Block Hash</p> <p>*Block Number</p> <p>*Events *etc...</p> <p>Finally, it defines a number of low level functions which can access your blockchain storage, verify the origin of an extrinsic, and more.</p> <p>@Support crate@System crate</p> <p>The\u00a0FRAME Support Crate\u00a0frame_support\u00a0is a collection of Rust macros, types, traits, and modules that simplify the development of Substrate pallets.</p> <p>The support macros expanded at compile time generate boilerplate code needed for the common structure of a pallet and save developers from writing them repeatedly.</p> <p>@Executive pallet@System crate</p> <p>The\u00a0FRAME Executive Pallet\u00a0frame_executive\u00a0acts as the orchestration layer for the runtime. It dispatches incoming extrinsic calls to the respective pallets in the runtime.</p> <p>@Runtime@System crate</p> <p>The runtime library brings together all these components and pallets. It defines which pallets are included with your runtime and configures them to work together to compose your final runtime. When calls are made to your runtime, it uses the Executive pallet to dispatch those calls to the individual pallets.</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#pallet","title":"Pallet","text":"<p>A developer may choose to have a pallet that enables smart contracts, or specifically not include pallets to keep their blockchain network lean and reduce attack vectors.</p> <p>For example, a developer may want to enable users to gain access to accounts even if they lose their private keys or other authentication mechanism. \u00a0In this case, the developer would simply include the Recovery pallet.</p> <p>From the Oracle pallet to the Zero-Knowledge Verifier pallet and the Governance pallet, there are numerous existing pallets that can be integrated from the start or added later with forkless runtime upgrades.</p> <p>Developers can choose and even hot-swap components (pallets) such as the network stack, consensus, even the finality engine. Simply select from the growing list of pallets or create your own.</p> <p>When building with FRAME, the Substrate runtime is composed of several smaller components called pallets. A pallet contains a set of types, storage items, and functions that define a set of features and functionality for a runtime.</p> <p>@Prebuilt pallets</p> <p>https://docs.substrate.io/v3/runtime/frame/</p> <p>Atomic Swap, Aura, Authority Discovery, Authorship, BABE , Balances, Benchmark, Collective, Contracts, Democracy, Elections Phragm\u00e9n, Elections, GRANDPA, Identity, I'm Online, Indices, Membership, Multisig, Nicks, Offences, Proxy, Recovery, Randomness Collective Flip, Scheduler, Scored Pool, Session, Society, Staking, Sudo, Timestamp, Transaction Payment, Treasury, Utility, Vesting</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#execution-environment","title":"Execution environment","text":"<p>Off-chain features run in their own Wasm execution environment outside of the Substrate runtime.</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#conceptes","title":"Conceptes","text":"","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#extrinsics","title":"Extrinsics","text":"<p>An extrinsic is a piece of information that comes from outside the chain and is included in a block. Extrinsics fall into three categories: inherents, signed transactions, and unsigned transactions.</p> <p>Note that\u00a0events\u00a0are not extrinsics. The chain emits events for pieces of information that are intrinsic to the chain itself. For example, staking rewards are events, not extrinsics, because the reward is triggered by circumstances intrinsic to the chain's logic. \u00a0The header contains a block height, parent hash, extrinsics root, state root, and digest.</p> <p>@Inherents</p> <p>Inherents are pieces of information that are not signed and only inserted into a block by the block author. They are not gossiped on the network or stored in the transaction queue.  For example, the author of the block may insert a timestamp inherent into the block. There is no way to prove that a timestamp is true the way the desire to send funds is proved with a signature. Rather, validators accept or reject the block based on how reasonable the other validators find the timestamp, which may mean it is within some acceptable range of their own system clocks.</p> <p>@SignedTransactions</p> <p>Contain a signature of the account that issued the transaction and stands to pay a fee to have the transaction included on chain. Because the value of including signed transactions on-chain can be recognized prior to execution, they can be gossiped on the network between nodes with a low risk of spam.</p> <p>@UnsignedTransactions</p> <p>Since the transaction is not signed, there is nobody to pay a fee. Because of this, the transaction queue lacks economic logic to prevent spam. Unsigned transactions also lack a nonce, making replay protection difficult. A few transactions warrant using the unsigned variant, but they will require some form of spam prevention based on a custom implementation of\u00a0signed extension, which can exist on unsigned transactions.</p> <p>An example of unsigned transactions in Substrate is the\u00a0I'm Online\u00a0heartbeat transaction sent by authorities. The transaction includes a signature from a Session key, which does not control funds and therefore cannot pay a fee. The transaction pool controls spam by checking if a heartbeat has already been submitted in the session.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#features","title":"Features","text":"","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#configurable","title":"Configurable","text":"<p>@Feeless</p> <p>Unlike many legacy blockchain networks, which have hard limits for transaction throughput, Substrate is configurable. Transaction latency can be alleviated through configurable blocktimes, flexible transaction queues, and/or horizontal scaling. Transaction fees are configurable even to the point of feeless transactions. Development is faster since developers can use the tooling they prefer and select from a growing list of pallets instead of building from scratch. Upgrades happen faster thanks to forkless runtime upgrades.</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#light-client-first","title":"Light-client-first","text":"<p>Another unique attribute of Substrate is its \u201clight-client-first\u201d design which can run directly in-browser and interact with a chain in a fully trustless way. Traditional approaches for syncing nodes require users to run dedicated hardware and wait a long time for their node to sync, or as a workaround, use a centralized service provider. Substrate light-clients sync lightning fast and drastically increase the decentralization of blockchain networks. Developers can relax, knowing their end users aren\u2019t reliant on a separate node infrastructure susceptible to downtime or hacking.</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#security","title":"Security","text":"<p>Substrate chains can inherit security from Substrate-based relay chains like Polkadot or Kusama.\u00a0</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#offchain","title":"Offchain","text":"<p>Off-chain features run in their own execution environment outside of the Substrate runtime. This creates a separation of concerns and ensures block production is not impacted by long-running off-chain tasks. Although the primary benefit of off-chain features may be cost, there are many other benefits. For example, off-chain features can enable private data to be easily stored and retrievable off-chain to support record deletion and other needs of GDPR-compliant use cases and applications.</p> <p>Off-Chain Worker subsystems allows execution of long-running and possibly non-deterministic tasks (e.g. web requests, encryption/decryption and signing of data, random number generation, CPU-intensive computations, enumeration/aggregation of on-chain data, etc.) that could otherwise require longer than the block execution time.</p> <p>Off-chain workers have access to extended APIs for communicating with the external world:</p> <p>Ability to\u00a0submit transactions\u00a0(either signed or unsigned) to the chain to publish computation results.</p> <p>A fully-featured HTTP client allowing the worker to access and fetch data from external services.</p> <p>Access to the local keystore to sign and verify statements or transactions.</p> <p>An additional, local\u00a0key-value database\u00a0shared between all off-chain workers.</p> <p>A secure, local entropy source for random number generation.</p> <p>Access to the node's precise\u00a0local time.</p> <p>The ability to sleep and resume work.</p> <p>Note that the results from off-chain workers are not subject to regular transaction verification. A verification mechanism  should be implemented to determine what information gets into the chain.</p> <p>Off-Chain Storage\u00a0offers storage that is local to a Substrate node that can be accessed both by off-chain workers (both read and write access) and on-chain logic (write access via off-chain indexing but not read access). This allows different worker threads to communicate to each other and to store user or node-specific data that does not require consensus over the whole network.</p> <p>It can also be read using RPC.</p> <p>Off-Chain Indexing\u00a0allows the runtime, if opted-in, to write directly to the off-chain storage independently from OCWs. This serves as a local/temporary storage for on-chain logic and complement to its on-chain state.</p> <p>Nodes have to opt-in for persistency of this data via\u00a0--enable-offchain-indexing\u00a0flag when starting up the Substrate node.</p> <p>Unlike OCWs, which are not executed during initial blockchain synchronization, off-chain indexing is populating the storage every time a block is processed, so the data is always consistent and will be exactly the same for every node with indexing enabled.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#compatibility","title":"Compatibility","text":"","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#srml","title":"SRML","text":"<p>SRML provides the basic building blocks for Substrate-based blockchains and includes all the essential functionality for a purpose-built blockchain. Among the various modules included with the SRML is the\u00a0Contracts module, designed for executing \"native\" Wasm smart contracts on any Substrate-based chain.</p> <p>@Parity</p> <p>Moreover, Parity Technologies is a long-term supporter and builder in the Ethereum ecosystem, and we want to continue to provide support and infrastructure as we can to teams who have built on the Parity platform as we move from \u201cBlockchain 2.0\u201d to \u201c3.0\u201d.</p> <p>As part of this ongoing support, and to ensure that Substrate and Polkadot remain as inclusive as possible to the broader DApp community, we\u2019ve (Parity Team)built an EVM implementation for the SRML.</p> <p>Substrate EVM\u00a0is an SRML module that provides an EVM execution environment for running unmodified Solidity code \u201cnatively\u201d on a Substrate-based blockchain. In essence, Substrate EVM will allow Substrate-based blockchains, including Polkadot parachains, to host a nearly-complete instance of the Ethereum state transition function on-chain, alongside any additional Substrate modules as required for custom functionality.</p> <p>Existing Solidity applications can be deployed and executed in this environment, and will gain the added benefits of being part of a Substrate-based blockchain. These benefits include the possibility of integration with other Substrate modules and of connecting to the broader Polkadot network, thereby enabling interoperability not only with other Polkadot parachains but, via bridges, with external blockchains as well, including Ethereum mainnet.</p> <p>Interoperability with other Substrate modules is possible thanks to custom-built \"pre-compiled contract\" APIs, which will allow all basic SRML functionality, including calls between modules, balance transfers, and interchain messaging.</p> <p>Differences between the Substrate EVM module and the Ethereum mainnet EVM include block hashes, which are fetched via the System module.</p> <p>In addition, the underlying EVM engine (SputnikVM) has been modified to make it modular, which will allow us to enable users to swap out and customize individual components (such as the gasometer) to their applications' specific needs.</p> <p>Substrate EVM\u00a0is an SRML module that provides an EVM execution environment for running unmodified Solidity code \u201cnatively\u201d on a Substrate-based blockchain. In essence, Substrate EVM will allow Substrate-based blockchains, including Polkadot parachains, to host a nearly-complete instance of the Ethereum state transition function on-chain, alongside any additional Substrate modules as required for custom functionality.</p> <p>Existing Solidity applications can be deployed and executed in this environment, and will gain the added benefits of being part of a Substrate-based blockchain. </p> <p>Interoperability with other Substrate modules is possible thanks to custom-built \"pre-compiled contract\" APIs, which will allow all basic SRML functionality, including calls between modules, balance transfers, and interchain messaging.</p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-framework-research-intro/#literature","title":"Literature","text":"<p>hot-swap components = pallets </p> <p>Off-Chain Worker = OCW</p> <p>Remote procedure calls = RPC</p> <p>Framework for Runtime Aggregation of Modularized Entities  = FRAME</p> <p>runtime = state transition function</p> <p>pot = The Treasury pallet provides a \"pot\" of funds</p> <p>The Sudo pallet allows for a single account = Sudo</p> <p>verifiable random function = VRF</p> <p>A verification mechanism =e.g. voting, averaging, checking sender signatures, or simply \"trusting\"</p> <p>Substrate Runtime Module Library = SRML</p> <p>Substrate-Glossary</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Researcher &amp; Organized by:</p> <p>\ud83d\ude4fArman-Riazi\ud83e\udd1d</p> <p>[[Polkadot-Ecosystem-Research]]</p> <p>[[Polkadot]]</p> <p>[[Substrate]]</p>","tags":["kusama","polkadot_ecosystem","substrate","polkadot"]},{"location":"public/blockchain/substrate-polka-kus/substrate-setup-research-intro/","title":"Substrate setup research intro","text":"<p>Walk-Through/Substrate/NodeSetup</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p>","tags":["kusama","polkadot_ecosystem","substrate","rust","node","rpc"]},{"location":"public/blockchain/substrate-polka-kus/substrate-setup-research-intro/#introducing","title":"Introducing","text":"<p>substrate-node-template</p> <p>Create-your-first-substrate-chain</p>","tags":["kusama","polkadot_ecosystem","substrate","rust","node","rpc"]},{"location":"public/blockchain/substrate-polka-kus/substrate-setup-research-intro/#prerequisites","title":"Prerequisites","text":"<p>Ubuntu 20.04, Docker 19-20, Ngnix, Nodejs 16.13.2, ReactJs, VirtualBox(Optional).</p>","tags":["kusama","polkadot_ecosystem","substrate","rust","node","rpc"]},{"location":"public/blockchain/substrate-polka-kus/substrate-setup-research-intro/#installing","title":"installing","text":"<p>Manifest for installing rust and build-essentials on ubuntu 20.04.03</p> <pre><code>rustup self uninstall\n\napt-get update\n\nsudo add-apt-repository \"deb\u00a0http://archive.ubuntu.com/ubuntu\u00a0$(lsb_release -sc) main universe\"\n\napt-get -u dist-upgrade\n\napt install aptitude\n\nsudo aptitude install libc6=2.31-0ubuntu9\n\nsudo aptitude install build-essential\n\napt-get update\n\nsudo apt install -y cmake pkg-config libssl-dev git gcc build-essential clang libclang-dev\n\ncurl --proto '=https' --tlsv1.2 -sSf\u00a0https://sh.rustup.rs\u00a0| sh -s -- --default-toolchain none -y\n\nrustup toolchain install nightly --allow-downgrade --profile minimal --component clippy\n\nrustup default stable\n\nrustup update nightly\n\nrustup update stable\n\nrustup target add wasm32-unknown-unknown --toolchain nightly\n\nrustup component add rust-src --toolchain stable-x86_64-unknown-linux-gnu\n\nrustc --version\n\nsource $HOME/.cargo/env\n\ncargo install --git https://github.com/alexcrichton/wasm-gc --force\n</code></pre> <p>No tested on me Fast Installation: Install all the required dependencies with a single command. (Be patient, this can take up to&gt; 30 minutes)</p> <pre><code>curl\u00a0https://getsubstrate.io\u00a0-sSf | bash -s -- --fast \n</code></pre> <p>Finally step test:</p> <p><code>Cargo Getting Start</code></p> <p>\ud83e\udd37\u200d\u2642\ufe0f\ud83e\udd37\u200d\u2642\ufe0f\ud83e\udd37\u200d\u2642\ufe0f:\ud83d\udc31\u200d\ud83d\udc64</p> <p>linking_with_cc_failed_exit_code_1/build-essential-fails-because-of-unmet-dependencies</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p> <p>Manifest for cargo and compiling</p> <p>#rustup component add --toolchain=nightly rust-src rustfmt</p> <p><code>rustup target add wasm32-unknown-unknown</code></p> <p><code>apt-get install llvm clang linux-headers-\"$(uname -r)\"</code></p> <p><code>apt install llvm clang</code></p> <p><code>cargo build --release</code></p> <p>Other commands(Maybe you needs follow):</p> <p><code>cargo clear</code></p> <p><code>cargo fix --allow-dirty</code></p> <p><code>cargo fix --edition</code></p> <p>My Runner System</p> <pre><code> -lsb_release -a\n  No LSB modules are available.\n  Distributor ID:   Ubuntu\n  Description:  Ubuntu 20.04.3 LTS\n  Release:  20.04\n  Codename: focal\n -docker --version\n  Docker version 20.10.12, build e91ed57\n -ldconfig --version\n  ldconfig (Ubuntu GLIBC 2.31-0ubuntu9.2) 2.31\n -cargo --version\n  cargo 1.60.0-nightly (25fcb13 2022-02-01)\n -rustc --version\n  rustc 1.60.0-nightly (f624427f8 2022-02-06)\n -rustup show\n  Default host: x86_64-unknown-linux-gnu\n  rustup home:  /root/.rustup\n  installed targets for active toolchain\n  --------------------------------------\n  wasm32-unknown-unknown\n  x86_64-unknown-linux-gnu\n  active toolchain\n  ----------------\n  nightly-x86_64-unknown-linux-gnu (default)\n  rustc 1.60.0-nightly (f624427f8 2022-02-06)\n</code></pre> <p>\ud83e\udd37\u200d\u2642\ufe0f\ud83e\udd37\u200d\u2642\ufe0f\ud83e\udd37\u200d\u2642\ufe0f:\ud83d\udc31\u200d\ud83d\udc64</p> <p>Error: failed to run custom build command for\u00a0librocksdb-sys v6</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","rust","node","rpc"]},{"location":"public/blockchain/substrate-polka-kus/substrate-setup-research-intro/#single-node-development-chain","title":"Single-Node Development Chain","text":"<p>This command will start the single-node development chain with persistent state: <pre><code>/substrate-node-template\ncargo build --release &amp;&amp; ./target/release/node-template --ws-external --base-path ./my-chain-state --enable-offchain-indexing true --rpc-cors all --name \"Arman Riazi\" --pruning archive --prometheus-external --chain local  --dev #(or --chain fir)\n</code></pre></p> <p><code>./target/release/node-template --dev</code></p> <p>Purge the development chain's state:</p> <p><code>./target/release/node-template purge-chain  --chain local --dev</code></p> <p>Start the development chain with detailed logging:</p> <p><code>RUST_LOG=debug RUST_BACKTRACE=1 ./target/release/node-template -lruntime=debug --dev</code></p> <p>\u270d\ufe0f\u270d\ufe0f\u270d\ufe0f</p> <p>After Running Node(Limited Lines):</p> <pre><code>root@ubuntu:/home/substrate-node-template# ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 12:49 ?        00:00:02 /sbin/init splash\nroot           2       0  0 12:49 ?        00:00:00 [kthreadd]\nroot           3       2  0 12:49 ?        00:00:00 [rcu_gp]\nroot           4       2  0 12:49 ?        00:00:00 [rcu_par_gp]\nroot           6       2  0 12:49 ?        00:00:00 [kworker/0:0H-events_highpri]\nroot           9       2  0 12:49 ?        00:00:00 [mm_percpu_wq]\nroot          10       2  0 12:49 ?        00:00:00 [rcu_tasks_rude_]\nroot          11       2  0 12:49 ?        00:00:00 [rcu_tasks_trace]\nroot          12       2  0 12:49 ?        00:00:00 [ksoftirqd/0]\nroot          13       2  0 12:49 ?        00:00:05 [rcu_sched]\nroot          14       2  0 12:49 ?        00:00:00 [migration/0]\nroot          15       2  0 12:49 ?        00:00:00 [idle_inject/0]\nroot          16       2  0 12:49 ?        00:00:00 [cpuhp/0]\nroot          17       2  0 12:49 ?        00:00:00 [cpuhp/1]\nroot          18       2  0 12:49 ?        00:00:00 [idle_inject/1]\nroot          19       2  0 12:49 ?        00:00:00 [migration/1]\nroot          20       2  0 12:49 ?        00:00:00 [ksoftirqd/1]\nroot          22       2  0 12:49 ?        00:00:00 [kworker/1:0H-events_highpri]\nroot          23       2  0 12:49 ?        00:00:00 [cpuhp/2]\nroot          24       2  0 12:49 ?        00:00:00 [idle_inject/2]\nroot          25       2  0 12:49 ?        00:00:00 [migration/2]\nroot          26       2  0 12:49 ?        00:00:00 [ksoftirqd/2]\nroot          28       2  0 12:49 ?        00:00:00 [kworker/2:0H-events_highpri]\nroot          29       2  0 12:49 ?        00:00:00 [kdevtmpfs]\nroot          30       2  0 12:49 ?        00:00:00 [netns]\nroot          31       2  0 12:49 ?        00:00:00 [inet_frag_wq]\nroot          32       2  0 12:49 ?        00:00:00 [kauditd]\nroot          33       2  0 12:49 ?        00:00:00 [khungtaskd]\nroot          34       2  0 12:49 ?        00:00:00 [oom_reaper]\nroot          35       2  0 12:49 ?        00:00:00 [writeback]\nroot          36       2  0 12:49 ?        00:00:00 [kcompactd0]\nroot          37       2  0 12:49 ?        00:00:00 [ksmd]\nroot          38       2  0 12:49 ?        00:00:00 [khugepaged]\nroot          86       2  0 12:49 ?        00:00:00 [kintegrityd]\nroot          87       2  0 12:49 ?        00:00:00 [kblockd]\nroot          88       2  0 12:49 ?        00:00:00 [blkcg_punt_bio]\nroot          89       2  0 12:49 ?        00:00:00 [tpm_dev_wq]\nroot          90       2  0 12:49 ?        00:00:00 [ata_sff]\nroot          91       2  0 12:49 ?        00:00:00 [md]\nroot          92       2  0 12:49 ?        00:00:00 [edac-poller]\nroot          93       2  0 12:49 ?        00:00:00 [devfreq_wq]\nroot          94       2  0 12:49 ?        00:00:00 [watchdogd]\nroot          96       2  0 12:49 ?        00:00:00 [kworker/0:1H-kblockd]\nroot          98       2  0 12:49 ?        00:00:17 [kswapd0]\nroot          99       2  0 12:49 ?        00:00:00 [ecryptfs-kthrea]\nroot         101       2  0 12:49 ?        00:00:00 [kthrotld]\nroot         102       2  0 12:49 ?        00:00:00 [acpi_thermal_pm]\nroot         103       2  0 12:49 ?        00:00:00 [scsi_eh_0]\nroot         104       2  0 12:49 ?        00:00:00 [scsi_tmf_0]\nroot         105       2  0 12:49 ?        00:00:00 [scsi_eh_1]\nroot         106       2  0 12:49 ?        00:00:00 [scsi_tmf_1]\nroot         108       2  0 12:49 ?        00:00:00 [vfio-irqfd-clea]\nroot         111       2  0 12:49 ?        00:00:00 [ipv6_addrconf]\nroot         120       2  0 12:49 ?        00:00:00 [kstrp]\nroot         123       2  0 12:49 ?        00:00:00 [zswap-shrink]\nroot         124       2  0 12:49 ?        00:00:00 [kworker/u7:0]\nroot         129       2  0 12:49 ?        00:00:00 [charger_manager]\nroot         153       2  0 12:49 ?        00:00:01 [kworker/1:1H-kblockd]\nroot         178       2  0 12:49 ?        00:00:00 [scsi_eh_2]\nroot         179       2  0 12:49 ?        00:00:00 [scsi_tmf_2]\nroot         183       2  0 12:49 ?        00:00:01 [kworker/2:1H-kblockd]\nroot         203       2  0 12:49 ?        00:00:00 [jbd2/sda5-8]\nroot         204       2  0 12:49 ?        00:00:00 [ext4-rsv-conver]\nroot         247       1  0 12:49 ?        00:00:00 /lib/systemd/systemd-journald\nroot         279       1  0 12:49 ?        00:00:00 /lib/systemd/systemd-udevd\nroot         283       2  0 12:49 ?        00:00:00 [loop0]\nroot         343       2  0 12:49 ?        00:00:00 [iprt-VBoxWQueue]\nroot         348       2  0 12:49 ?        00:00:00 [cryptd]\nroot         367       2  0 12:49 ?        00:00:01 [irq/18-vmwgfx]\nroot         371       2  0 12:49 ?        00:00:00 [ttm_swap]\nroot         372       2  0 12:49 ?        00:00:00 [card0-crtc0]\nsystemd+     584       1  0 12:49 ?        00:00:01 /lib/systemd/systemd-resolved\nroot         618       1  0 12:49 ?        00:00:00 /usr/lib/accountsservice/accounts-daemon\nroot         619       1  0 12:49 ?        00:00:00 /usr/sbin/acpid\navahi        622       1  0 12:49 ?        00:00:00 avahi-daemon: running [u2004zero.local]\nmessage+     624       1  0 12:49 ?        00:00:03 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only\nroot         626       1  0 12:49 ?        00:00:24 /usr/sbin/NetworkManager --no-daemon\nroot         636       1  0 12:49 ?        00:00:00 /usr/sbin/irqbalance --foreground\nroot         639       1  0 12:49 ?        00:00:00 /usr/bin/python3 /usr/bin/networkd-dispatcher --run-startup-triggers\nroot         643       1  0 12:49 ?        00:00:00 /usr/lib/policykit-1/polkitd --no-debug\nsyslog       647       1  0 12:49 ?        00:00:00 /usr/sbin/rsyslogd -n -iNONE\nroot         650       1  0 12:49 ?        00:00:02 /usr/lib/snapd/snapd\nroot         651       1  0 12:49 ?        00:00:00 /usr/libexec/switcheroo-control\nroot         658       1  0 12:49 ?        00:00:00 /lib/systemd/systemd-logind\nroot         659       1  0 12:49 ?        00:00:00 /usr/lib/udisks2/udisksd\nroot         662       1  0 12:49 ?        00:00:00 /sbin/wpa_supplicant -u -s -O /run/wpa_supplicant\navahi        673     622  0 12:49 ?        00:00:00 avahi-daemon: chroot helper\nroot         695       1  0 12:49 ?        00:00:00 /usr/sbin/inetutils-inetd\nroot         724       1  0 12:49 ?        00:00:00 /usr/sbin/cups-browsed\nroot         731       1  0 12:49 ?        00:00:00 /usr/sbin/ModemManager --filter-policy=strict\nroot         734       1  0 12:49 ?        00:00:00 /usr/sbin/cupsd -l\nroot         743       1  0 12:49 ?        00:01:49 /opt/piavpn/bin/pia-daemon\nroot         746       1  0 12:49 ?        00:00:00 /usr/bin/python3 /usr/share/unattended-upgrades/unattended-upgrade-shutdown --wait-for-signal\nroot         747       1  0 12:49 ?        00:00:00 /usr/sbin/winbindd --foreground --no-process-group\nroot         754       1  0 12:49 ?        00:00:12 /usr/bin/containerd\nroot         805       1  0 12:49 ?        00:00:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\npostgres     833       1  0 12:49 ?        00:00:00 /usr/lib/postgresql/14/bin/postgres -D /var/lib/postgresql/14/main -c config_file=/etc/postgresql/14/main/postgresql.conf\nroot         844       2  0 12:49 ?        00:00:00 bpfilter_umh\nroot         851     747  0 12:49 ?        00:00:00 winbindd: domain child [U2004ZERO]\npostgres     878     833  0 12:49 ?        00:00:00 postgres: 14/main: checkpointer \npostgres     879     833  0 12:49 ?        00:00:00 postgres: 14/main: background writer \npostgres     880     833  0 12:49 ?        00:00:00 postgres: 14/main: walwriter \npostgres     881     833  0 12:49 ?        00:00:00 postgres: 14/main: autovacuum launcher \npostgres     883     833  0 12:49 ?        00:00:00 postgres: 14/main: stats collector \npostgres     884     833  0 12:49 ?        00:00:00 postgres: 14/main: logical replication launcher \nroot        2731       1  0 12:49 ?        00:00:03 /usr/bin/dockerd -H fd:// --containerd=/run/containerd/containerd.sock\nroot        2735       1  0 12:49 ?        00:00:00 /usr/lib/ipsec/starter --daemon charon --nofork\nwhoopsie    2736       1  0 12:49 ?        00:00:00 /usr/bin/whoopsie -f\nroot        2744       1  0 12:49 ?        00:00:00 /usr/sbin/cron -f\nkernoops    2756       1  0 12:49 ?        00:00:00 /usr/sbin/kerneloops --test\nkernoops    2764       1  0 12:49 ?        00:00:00 /usr/sbin/kerneloops\nroot        2781       1  0 12:49 ?        00:00:00 /usr/sbin/xl2tpd\nroot        2789    2735  0 12:49 ?        00:00:00 /usr/lib/ipsec/charon\nroot        3249    2731  0 12:49 ?        00:00:00 /usr/bin/docker-proxy -proto tcp -host-ip 0.0.0.0 -host-port 3000 -container-ip 172.17.0.2 -container-port 3000\nroot        3263    2731  0 12:49 ?        00:00:00 /usr/bin/docker-proxy -proto tcp -host-ip :: -host-port 3000 -container-ip 172.17.0.2 -container-port 3000\nroot        3350       1  0 12:49 ?        00:00:00 /usr/bin/containerd-shim-runc-v2 -namespace moby -id b186d352f80cdecbe7d8ea5759074adbcc9a146f457ed333f4c3fe9cba8bd3f8 -address /run/containe\nroot        3427    3350  0 12:49 pts/0    00:00:00 /bin/bash\nroot        3535       1  0 12:49 ?        00:00:00 /usr/sbin/gdm3\nroot        3553       1  0 12:49 ?        00:00:02 /usr/sbin/VBoxService --pidfile /var/run/vboxadd-service.sh\nroot        3566    3535  0 12:49 ?        00:00:00 gdm-session-worker [pam/gdm-autologin]\nu2004ze+    3590       1  0 12:49 ?        00:00:00 /lib/systemd/systemd --user\nu2004ze+    3591    3590  0 12:49 ?        00:00:00 (sd-pam)\nu2004ze+    3596    3590  0 12:49 ?        00:00:00 /usr/bin/pulseaudio --daemonize=no --log-target=journal\nu2004ze+    3598    3590  0 12:49 ?        00:00:00 /usr/libexec/tracker-miner-fs\nu2004ze+    3601       1  0 12:49 ?        00:00:00 /usr/bin/gnome-keyring-daemon --daemonize --login\nu2004ze+    3605    3566  0 12:49 tty2     00:00:00 /usr/lib/gdm3/gdm-x-session --run-script env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --systemd --session=ubuntu\nu2004ze+    3608    3590  0 12:49 ?        00:00:00 /usr/bin/dbus-daemon --session --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only\nu2004ze+    3610    3605  0 12:49 tty2     00:01:42 /usr/lib/xorg/Xorg vt2 -displayfd 3 -auth /run/user/1000/gdm/Xauthority -background none -noreset -keeptty -verbose 3\nroot        3681       1  0 12:49 ?        00:00:00 /usr/lib/upower/upowerd\nu2004ze+    3708    3605  0 12:49 tty2     00:00:00 /usr/libexec/gnome-session-binary --systemd --systemd --session=ubuntu\nu2004ze+    3818    3708  0 12:49 ?        00:00:00 /usr/bin/ssh-agent /usr/bin/im-launch env GNOME_SHELL_SESSION_MODE=ubuntu /usr/bin/gnome-session --systemd --session=ubuntu\nu2004ze+    3971    3590  0 12:49 ?        00:00:00 /usr/libexec/at-spi-bus-launcher\nu2004ze+    3976    3971  0 12:49 ?        00:00:00 /usr/bin/dbus-daemon --config-file=/usr/share/defaults/at-spi2/accessibility.conf --nofork --print-address 3\nu2004ze+    3980    3590  0 12:49 ?        00:00:00 /usr/libexec/gnome-session-ctl --monitor\nu2004ze+    3987    3590  0 12:49 ?        00:00:00 /usr/libexec/gnome-session-binary --systemd-service --session=ubuntu\nu2004ze+    4001    3590  0 12:49 ?        00:01:32 /usr/bin/gnome-shell\nu2004ze+    4032    3590  0 12:49 ?        00:00:00 /usr/libexec/at-spi2-registryd --use-gnome-session\nu2004ze+    4037    4001  0 12:49 ?        00:00:00 ibus-daemon --panel disable --xim\nu2004ze+    5205    5197  0 12:50 pts/0    00:00:00 bash\nu2004ze+    5234    3987  0 12:50 ?        00:00:00 update-notifier\nroot        5251    5205  0 12:50 pts/0    00:00:00 sudo su\nroot        5257    5251  0 12:50 pts/0    00:00:00 su\nroot        5258    5257  0 12:50 pts/0    00:00:00 bash\nroot        5285    5258  0 12:52 pts/0    00:00:01 docker exec -it node-armanriazi /bin/bash\nroot        5303    3350  0 12:52 pts/1    00:00:00 /bin/bash\nroot        5403    5303  0 12:53 pts/1    00:00:00 node /opt/yarn-v1.22.15/bin/yarn.js start\nroot        5420    5403  0 12:53 pts/1    00:00:01 /usr/local/bin/node /home/node/app/substrate-front-end-template/.yarn/releases/yarn-3.1.1.cjs start\nroot        5431    5420  0 12:53 pts/1    00:00:00 /usr/local/bin/node /home/node/app/substrate-front-end-template/node_modules/react-app-rewired/bin/index.js start\nroot        5438    5431  0 12:53 pts/1    00:00:16 /usr/local/bin/node /home/node/app/substrate-front-end-template/node_modules/react-app-rewired/scripts/start.js\nu2004ze+   25088    4001  0 13:52 ?        00:01:26 /opt/piavpn/bin/pia-client\nroot       27503       2  0 14:20 ?        00:00:01 [kworker/2:2-rcu_gp]\nroot       82028       2  0 16:18 ?        00:00:01 [kworker/0:0-events]\nroot       82133       2  0 16:18 ?        00:00:01 [kworker/1:2-events]\nroot       82779       2  0 16:21 ?        00:00:00 [kworker/1:3-cgroup_destroy]\nroot       83197       2  0 16:27 ?        00:00:00 [kworker/0:1-events]\nroot       83559       2  0 16:37 ?        00:00:00 [kworker/u6:1-events_unbound]\nroot       84293       2  0 17:03 ?        00:00:00 [kworker/u6:0-events_power_efficient]\nroot       84338       2  0 17:13 ?        00:00:00 [kworker/u6:2-events_unbound]\nroot       84348   34026  1 17:16 pts/1    00:00:01 ./target/release/node-template --dev --ws-external\nroot       84704   75818  0 17:18 pts/3    00:00:00 ps -ef\n</code></pre>","tags":["kusama","polkadot_ecosystem","substrate","rust","node","rpc"]},{"location":"public/blockchain/substrate-polka-kus/substrate-setup-research-intro/#multi-node-local-testnet","title":"Multi-Node Local Testnet","text":"<p>If you want to see the multi-node consensus algorithm in action, refer to\u00a0our Start a Private Network tutorial.</p> <p>Purge the development chain's state:</p> <pre><code>./target/release/node-template purge-chain --base-path /tmp/alice --chain local\n./target/release/node-template purge-chain --base-path /tmp/bob --chain local\n./target/release/node-template \\\n  --base-path /tmp/alice \\\n  --chain local \\\n  --alice \\\n  --port 30333 \\\n  --ws-port 9945 \\\n  --rpc-port 9933 \\\n  --unsafe-rpc-external \\\n  --rpc-methods=unsafe \\\n  --validator \\\n  --ws-external \\\n  --rpc-cors all  \\\n  --no-mdns \\\n  --name \"Arman Riazi\"  \\\n  --node-key 0000000000000000000000000000000000000000000000000000000000000001 \n\n\n\n./target/release/node-template \\\n  --base-path /tmp/bob \\\n  --chain local \\\n  --bob \\\n  --port 30334 \\\n  --ws-port 9946 \\\n  --unsafe-rpc-external \\\n  --rpc-methods=unsafe \\\n  --rpc-port 9934 \\\n  --validator \\\n  --ws-external \\\n  --rpc-cors all  \\\n  --no-mdns  \\\n  --name \"Arman Riazi 2\"  \\\n  --bootnodes /ip4/192.168.8.110/tcp/30333/p2p/12D3KooWEyoppNCUx8Yx66oV9fJnriXwCcXwDDUA2kj6vnc6iDEp\n</code></pre> <ul> <li>Other commands</li> </ul> <pre><code> subkey restore Alice\n--telemetry-url 'wss://telemetry.polkadot.io/submit/ 0' \n--pruning archive \n--prometheus-external\n--chain local\n--tmp\n--dev \n--fir\n--base-path ./my-chain-state \n--enable-offchain-indexing true\n</code></pre> <ul> <li>The private network substrate  was made by manifest</li> </ul> <p>polkadot-js cloudflare-ipfs</p> <p> </p> <pre><code>{\n      \"AccountInfo\": \"AccountInfoWithTripleRefCount\",\n      \"Address\": \"AccountId\",\n      \"LookupSource\": \"AccountId\",\n      \"AccountInfo\": \"AccountInfoWithDualRefCount\",\n      \"ContinuousAccountData\": {\n        \"principal\": \"u64\",\n        \"deposit_date\": \"BlockNumber\"\n      },\n      \"U16F16\": \"[u8; 4]\",\n      \"GroupIndex\": \"u32\",\n      \"ValueStruct\": {\n        \"integer\": \"i32\",\n        \"boolean\": \"bool\"\n      },\n      \"BufferIndex\": \"u8\",\n      \"AccountIdOf\": \"AccountId\",\n      \"BalanceOf\": \"Balance\",\n      \"FundInfoOf\": \"FundInfo\",\n      \"FundInfo\": {\n        \"beneficiary\": \"AccountId\",\n        \"deposit\": \"Balance\",\n        \"raised\": \"Balance\",\n        \"end\": \"BlockNumber\",\n        \"goal\": \"Balance\"\n      },\n      \"FundIndex\": \"u32\",\n      \"InnerThing\": {\n        \"number\": \"u32\",\n        \"hash\": \"Hash\",\n        \"balance\": \"Balance\"\n      },\n      \"SuperThing\": {\n        \"super_number\": \"u32\",\n        \"inner_thing\": \"InnerThing\"\n      },\n      \"InnerThingOf\": \"InnerThing\"\n    }\n</code></pre> <p>Try\u00a0 introductory tutorial for creating your\u00a0first runtime module </p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>","tags":["kusama","polkadot_ecosystem","substrate","rust","node","rpc"]},{"location":"public/blockchain/substrate-polka-kus/substrate-setup-research-intro/#literature","title":"Literature","text":"<p>Error-Rust-Lang</p> <p>Rustup</p> <p>Start-a-private-network</p> <p>Substrate-based-chain</p> <p>Substrate-Glossary</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>If you liked this article or if it helped you please clap on this post to help the Read.Cash algorithm recommend it to more people. If you have any questions or remarks please feel free to leave a comment below.</p> <p>Alternatively, please feel free to send donations </p> <p>0xde5D732a5AB44832E1c69b18be30834639F44A2c</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Reseacher &amp; Organized by:</p> <p>\ud83d\ude4fArman-Riazi\ud83e\udd1d</p> <p>[[Polkadot-Ecosystem-Research]]</p> <p>[[Substrate]]</p>","tags":["kusama","polkadot_ecosystem","substrate","rust","node","rpc"]},{"location":"public/blockchain/substrate-polka-kus/crowdloan/crowdloan-research-intro/","title":"Crowdloan research intro","text":"<p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/CrowdLoan(3)</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p>","tags":["kusama","polkadot_ecosystem","substrate","crowdloan"]},{"location":"public/blockchain/substrate-polka-kus/crowdloan/crowdloan-research-intro/#introducing","title":"Introducing","text":"<p>Kusama is a\u00a0canary network\u00a0for Polkadot; Kusama is a proving ground for runtime upgrades, on-chain governance, and parachains. The network is a permissionless.Kusama does not support smart contracts natively.The Kusama network is Polkadot's experimental, community-focused R&amp;D network.  </p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p> <p>AccountThese are\u00a0transfer\u00a0and\u00a0transfer_keep_alive.\u00a0transfer\u00a0will allow you to send KSM regardless of the consequence;\u00a0transfer_keep_alive\u00a0will not allow you to send an amount that would allow the sending account to be removed due to it going below the existential deposit.</p> <p>By default, Polkadot-JS Apps will use\u00a0transfer_keep_alive, ensuring that the account you send from cannot drop below the existential deposit of 0.001666 KSM.</p> <p>it may be that you **do not want to keep this account alive (for example, because you are moving all of your funds to a different address).\u00a0**</p> <p>Note: Even if the transfer fails due to a keep-alive check, the transaction fee will be deducted from the sending account if you attempt to transfer.</p> <p>Currently, Kusama does not use the\u00a0Assets Pallet, so this is probably not the reason for your tokens having existing references.</p> <p>Currently, Kusama does not use the\u00a0Recovery Pallet, so this is probably not the reason for your tokens having existing references.</p> <p>On Kusama, you can check if recovery has been set up by checking the\u00a0recovery.recoverable(AccountId)\u00a0chain state. This can be found under\u00a0Developer &gt; Chain state\u00a0in\u00a0PolkadotJS Apps.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>","tags":["kusama","polkadot_ecosystem","substrate","crowdloan"]},{"location":"public/blockchain/substrate-polka-kus/crowdloan/crowdloan-research-intro/#parachain-slots-auction","title":"Parachain-Slots-Auction","text":"<p>Polkadot Parachain Auctions do not offer a free and open environment as we have seen with ERC20 tokens, where the only thing needed was a white paper to deploy a smart contract on the Ethereum Blockchain.\u00a0Such a feature allows for flexibility in the Polkadot ecosystem where every Parachain can create its own set of rules</p> <p>Basically, Polkadot Parachain Auctions are automated candle auctions (with some adjustments relevant to blockchain technology). It means that there is an opening period and an ending period. At any moment the winner can be chosen but we will only find it out at the end.\u00a0It is not easy to get access to the Polkadot Relay Chain, and, currently, Parachains prefer to use crowdloan mechanism to collect funds to participate in Polkadot Parchain Auctions.</p> <p>To participate in the PolkadotParachain Auction and compete for a slot, prospective Parachains can bid in two ways:</p> <p>Parachains can bid their own DOT, through a single account</p> <p>**Parachains can use crowdloans to crowdsource DOT and bid it in the auctions\u00a0**</p> <p>Users cannot participate in the Polkadot Parachain Auction directly. Users can only participate indirectly via crowd loans by contributing and locking DOT.</p> <p>Shared security and processing of transactions don\u2019t come for free. One of the ways to access them is to lease a slot on the Relay Chain. Projects compete to place the highest bid to get the slot. The first Polkadot Parachain Auction winner, via the process known as Crowdloan Campaign, raised 32.5 million DOT (around 1.3 billion USD at that time) to lease the slot for two years.</p> <p>A Parachain slot is a scarce resource. Given an increase in the number of Parachains, every few months new Parachains slots will be added. The Polkadot ultimate goal is to have 100 slots.</p>","tags":["kusama","polkadot_ecosystem","substrate","crowdloan"]},{"location":"public/blockchain/substrate-polka-kus/crowdloan/crowdloan-research-intro/#crowdsale-vs-crowdloan","title":"crowdsale-VS-crowdloan","text":"<p>crowdsale and crowdloan which makes sense because they sound the same. they are similar but there are some very key differences for example crowdsale I am sure you're familiar with it's kind of like platforms along the lines of kickstarter so you fund a project say creating a backpack that sings and lights up and then you give the funds to eventually get the product knowing that it's not created yet and then the creator uses those funds to make the product and then eventually you'll get that product in the mail so you are buying an actual thing and then you get that thing but you never get your original funds back  where a crowdloan is very different so you're finding a specific function for example a parachain slot and it can only be used for that purpose it can't be used for anything else and then all funds that you contribute are delivered back to you once the lease is up so anything you contributed originally comes right back to you and it's not like you're putting funds down and you never see them again but you get something else in return and so parachain teams don't have control over the funds it's locked in the relay chain which prevents rug pull so all of a sudden funds can't just disappear or someone takes all of them it's pretty much impossible for that to happen and then if the first attempt to score slot isn't successful the crowd loan continues to try to score a parachain slot in the next round and then the next round until they do and all crowdloans do have an expiration date and that will all be specified in the outset so you should never be left in the dark you'll always have all the information you need so you can look forward to all the exciting things to come.</p> <p>the other thing to keep in mind is some projects have a rewards cap for their crowd loans so they can only give out so many rewards or they can only take so many contributions to the crowd loan or a certain amount so if you are set on wanting to participate it's always good to do it as soon as you feel ready um just in case you know there's a cut off or in case you can get bonus rewards.</p>","tags":["kusama","polkadot_ecosystem","substrate","crowdloan"]},{"location":"public/blockchain/substrate-polka-kus/crowdloan/crowdloan-research-intro/#parachainacution-vs-ebayacution","title":"ParachainAcution-vs-eBayAcution","text":"<p>a common misconception in the cryptocurrency space is that a para chain slot auction is something that you have to actively participate in kind of like an auction on ebay but that actually couldn't be further from the truth and all you have to do is contribute you don't have to bid and the crowdloan does on behalf of the project so there's no stress for you and then there's a difference between a regular auction and then a parachain slot option which is used to decide which pair of chains get to be connected to the relay chain so it's not like bidding on ebay for a handbag or something like that and then there's the concept of a candle auction which means in the ending period which is the last five days the auction can just end at any time and no one knows when this will be no single human knows and it's completely automated and a mystery to everyone and so the crowdloan opens before the auction starts and it stays open until a winner is declared so definitely make sure to contribute while the crowd loan is still open and hopefully before your team scores a slot and you get lots of rewards.</p> <p>There is also the possibility of a malicious bidder or a block producer trying to\u00a0grief\u00a0honest bidders by sniping auctions.</p> <p>For this reason,\u00a0Vickrey auctions, a variant of second price auction in which bids are hidden and only revealed in a later phase, have emerged as a well-regarded mechanic. For example, it is implemented as the mechanism to auction human readable names on the\u00a0ENS. The Candle auction is another solution that does not need the two-step commit and reveal schemes (a main component of Vickrey auctions), and for this reason allows smart contracts to participate.</p> <p>Polkadot will use a\u00a0random beacon\u00a0based on the VRF that's used also in other places of the protocol. The VRF will provide the base of the randomness, which will retroactively determine the end-time of the auction.</p> <p>1) Slot Action compatition(Weekly)</p> <p>2) if Won then</p> <p>3) Parachain Lease Relay chain (Yearly)</p> <p>The slot durations are capped to 1 year and divided into 6-week periods(KSM- 12m/3m=4m); The slot durations are capped to 2 years and divided into 3-month periods\u00a0(DOT- 24m/3m=8m);Once the parachain lease ends (48 weeks maximum on Kusama, 96 weeks on Polkadot), funds are returned to the contributors.</p> <p>Parachains may lease a slot for any combination of periods of the slot duration. Parachains may lease more than one slot over time, meaning that they could extend their lease to Polkadot past the maximum duration by leasing a contiguous slot.</p> <p>Note: Individual parachain slots are fungible. This means that parachains do not need to always inhabit the same slot, but **as long as a parachain inhabits any slot it can continue as a parachain.**You Can\u2019t (Technically) Combine Crowdloans and Private Bids</p> <p>Each period of the range 1 - 4 represents a 3-month duration for a total of 2 years.</p> <p>Bidders will submit a configuration of bids specifying the token amount they are willing to bond and for which periods. The slot ranges may be any of the periods 1 -\u00a0n, where\u00a0n\u00a0is the number of periods available for a slot (n\u00a0will be 8 for both Polkadot and Kusama).</p> <p></p> <p>highest bidder for any given slot lease period might not always win (see the\u00a0example below).</p> <p>There is one parachain slot available.</p> <p>Charlie bids\u00a075\u00a0for the range 1 - 8.</p> <p>Dave bids\u00a0100\u00a0for the range 5 - 8.</p> <p>Emily bids\u00a040\u00a0for the range 1 - 4.</p> <p>Let's calculate each bidder's valuation according to the algorithm. We do this by multiplying the bond amount by the number of periods in the specified range of the bid.</p> <p>Charlie - 75\u00a0*\u00a08 = 600 for range 1 - 8</p> <p>Dave - 100\u00a0*\u00a04 = 400 for range 5 - 8</p> <p>Emily - 40\u00a0*\u00a04 = 160 for range 1 - 4</p> <p>Although Dave had the highest bid in accordance to token amount, when we do the calculations we see that since he only bid for a range of 4, he would need to share the slot with Emily who bid much less. Together Dave's and Emily's bids only equals a valuation of\u00a0560.</p> <p>A random number, which is based on the VRF used by Polkadot, is determined at each block. Additionally, each auction will have a threshold that starts at 0 and increases to 1. The random number produced by the VRF is examined next to the threshold to determine if that block is the end of the auction within the so-called\u00a0ending period.\u00a0</p> <p>Charlie's valuation for the entire range is\u00a0600. Therefore Charlie is awarded the complete range of the parachain slot.</p> <p>While each parachain auction is scheduled for seven days, the candle auction format means that the \u201cend\u201d date and time is a bit of a wildcard.</p> <p></p> <p>The first two days\u00a0are confirmed to be an \u201copen\u201d period of the auction.\u00a0</p> <p>The following five days,\u00a0however, fall within the \u201cwick\u201d of this theoretical candle, and the auction will end sometime in this five-day period.\u00a0\u00a0so you won\u2019t actually know in real-time when the auction ends.</p> <p>project must specify the following information:</p> <p>Parachain ID/Index (which parachain the bid or crowdloan will support)</p> <p>First and Last Slot (the lease is broken into 8 increments, and projects can bid on a partial or full lease period)</p> <p></p> <p>While these crowdloan bids occur, the private-bid projects (Turquoise/Salmon) don\u2019t have to enter additional bids. However, after Day 2, it becomes risky to wait since the auction can end at any time.</p> <p>Finally, on Day 4, Salmon Parachain enters a private bid of 5000 DOT and briefly takes the lead in the auction.</p> <p>Unfortunately, on Day 5, Salmon Parachain is quickly outbid by a private bid from Turquoise Parachain AND an increased bid from the Purple Parachain crowdloan module.</p> <p>These antics continue until Day 7 when the highest bid is Purple Parachain with 18,000 DOT. However, importantly, Purple does not win. The winner is Turquoise.</p> <p>Turquoise Parachain wins the slot and is now able to connect to the Kusama network. This will likely happen soon after the slot is won since the lease period begins immediately. After the end of a lease period (48 week periods on Kusama and 96 week lease periods on Polkadot), the slot will be available for renewal or for another project to occupy.</p> <p>The remaining parachains must continue to compete for a slot, assuming their crowdloan modules remain open and the private bidders have the interest in pursuing a slot again, rather than waiting for a less competitive auction.</p> <p>Unbonding takes 28 days on Polkadot and\u00a07 on Kusama. Ensure your staking and democracy holds are cleared.</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>","tags":["kusama","polkadot_ecosystem","substrate","crowdloan"]},{"location":"public/blockchain/substrate-polka-kus/crowdloan/crowdloan-research-intro/#literature","title":"Literature","text":"<p>authorities\u00a0win\u00a0slots\u00a0based on a verifiable random function = VRF</p> <p>the private-bid projects =  Individual parachain</p> <p>Substrate-Glossary</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Researcher &amp; Organized by:</p> <p>\ud83d\ude4fArman-Riazi\ud83e\udd1d</p> <p>[[Polkadot-Ecosystem-Research]]</p> <p>[[Kusama]]</p> <p>[[Polkadot]]</p> <p>[[CrowdLoan]]</p>","tags":["kusama","polkadot_ecosystem","substrate","crowdloan"]},{"location":"public/blockchain/wasm/ewasm-research-intro/","title":"Ewasm research intro","text":"<p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/EWASM(5)</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#introducing","title":"Introducing","text":"<p>WebAssembly (or Wasm as a contraction) is a new, portable, size- and load-time-efficient format. A few key points:\u00a0WebAssembly defines an instruction set, intermediate source format (WAST) and a binary encoded format (WASM).\u00a0WebAssembly has a few higher level features, such as the ability to import and execute outside methods defined via an interface.</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#wasm","title":"WASM","text":"<p>Fast. WebAssembly achieves near native performance. Compared with the Java, Python or JavaScript runtimes, it can be 10x to 100x faster (how is this possible?). It is also much\u00a0faster than Docker, especially in cold start and system access.</p> <p>Safe. WebAssembly is a sandbox with a capability-based security model. It is not only safer than native binaries, but also safer than OS-level containers like Docker. Yet it provides\u00a0access to the underlying system, icnluding new hardware features.</p> <p>Portable. WebAssembly apps can be written in C, C++, Rust, Go, and run without change on different OS and hardware platforms.</p> <p>Manageable. WebAssembly programs can be provisioned, started, hot swapped, stopped, and moved around by other applications.</p> <p></p> <p></p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#goals","title":"Goals","text":"<p>To provide a specification of\u00a0ewasm contract\u00a0semantics and the\u00a0Ethereum interface</p> <p>To provide an\u00a0EVM transcompiler, preferably as an ewasm contract</p> <p>To provide a\u00a0metering injector, preferably as an ewasm contract</p> <p>To provide a VM implementation for executing ewasm contracts</p> <p>To implement an ewasm backend in the Solidity compiler</p> <p>To provide a library and instructions for writing contracts in Rust</p> <p>To provide a library and instructions for writing contracts in C.</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#importantcontent","title":"ImportantContent","text":"<p>The project VP Hung-Ying Tai (hydai) from\u00a0Second State\u00a0shared the current research content and future direction of Ewasm VM. The content is very exciting, including EVM bytecode, Webassembly, Ewasm1.0 and Ewasm2.0.</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#pallet","title":"PALLET","text":"<p>While supporting the EVM pallet to provide seamless compatibility with all existing Ethereum applications, ParaState also provides developers with a next-gen smart contract implementation environment, EWASM (Ethereum-flavored WebAssembly). All existing Ethereum smart contracts work on ParaState\u2019s\u00a0Ewasm VM (Pallet SSVM)\u00a0without any change.We see more and more parachain projects like Acala, Clover Finance, and Darwinia etc to integrate the EVM pallet into their parachains in order to interact with Ethereum ecosystem.</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#eei","title":"EEI","text":"<p>Ethereum defines the EEI to allow the client Corresponding function libraries can be implemented in different languages, and it is easier to complete prototypes and upgrades. A set of methods available to ewasm contracts.</p> <p>The smart contract of Ewasm 2.0 is renamed Execution Environments (EE).</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#llvm","title":"LLVM","text":"<p>LLVM\u00a0includes a WebAssembly backend to generate WASM output.\u00a0Major browser JavaScript engines will notably have native support for WebAssembly, including but not limited to: Google's\u00a0V8\u00a0engine (Node.js and Chromium-based browsers), Microsoft's\u00a0Chakra\u00a0engine (Microsoft Edge), Mozilla's\u00a0Spidermonkey\u00a0engine (Firefox and Thunderbird). * Other non-browser implementations exist too:\u00a0wasm-jit-prototype\u00a0(a standalone VM using an LLVM backend),\u00a0wabt\u00a0(a stack-based interpreter),\u00a0ml-proto\u00a0(the OCaml reference interpreter), etc.</p> <p>it future-proofs the Ethereum protocol by bringing the LLVM and WebAssembly developer communities into the Polkadot ecosystem. It is your best choice among one-stop development platforms for next-gen Web3 applications. It is Ethereum on Steroids.</p> <p>SecondState\u00a0developers recently built\u00a0a Solidity to Ewasm compiler called Soll.</p> <p></p> <p></p> <p><code>solc/solc --strict-assembly --optimize ~/simple_storage/simple_storage_yul_ir.txt</code></p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#sewup","title":"SewUp","text":"<p>The Second State EWasm Utility Program (SewUp) is a library that helps you sew up your Ethereum project with Rust, just like development in a common backend. </p> <p></p> <p>Set-up-Sewup</p> <p>[Tutorial-Hello-World]](https://docs.parastate.io/developers-resources/sewup-ewasm/tutorial-hello-world)</p> <p> </p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p> <p>@SSVN</p> <p>@SOLL@LLVM</p> <p>@Compiler@AOT@JIT</p> <p>@WasmEdge</p> <p>@DAO</p> <p>@STAKE</p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/blockchain/wasm/ewasm-research-intro/#literature","title":"Literature","text":"<p>Ewasm contract: a contract adhering to the ewasm specification</p> <p>Ethereum environment interface = EEI</p> <p>metering: the act of measuring execution cost in a deterministic way</p> <p>metering injector: a transformation tool inserting metering code to an ewasm contract</p> <p>EVM transcompiler: an EVM bytecode (the current Ethereum VM) to ewasm transcompiler.\u00a0See this chapter.</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Reseacher &amp; Organized by:</p> <p>\ud83d\ude4fArman-Riazi\ud83e\udd1d </p> <p>[[Polkadot-Ecosystem-Research]]</p> <p>[[Substrate]]</p>","tags":["substrate","polkadot_ecosystem","webassembly","wasm","llvm"]},{"location":"public/defi/defi-tests/","title":"Download sources","text":"<p>PDFs</p> &gt; Send to me for taking out a link(Request Access) <code>armanriazi.github.io@gmail.com</code>"},{"location":"public/defi/defi-tests/#questions","title":"Questions","text":"<p>Which type of solution enables communication, interaction, and value transfer between different blockchain networks?</p> <ul> <li> Bridge </li> <li> Omnichain</li> <li> P2P</li> <li> Lib2p</li> </ul> <p>Which of the following are token use cases?</p> <ul> <li> Voting</li> <li> Collectible</li> <li> Attestation</li> <li> Utility</li> </ul> <p>Proof of Work does not require the staking of tokens. Therefore, miners in proof of work are not placing anything at risk to create valid blocks? </p> <ul> <li> False</li> <li> True</li> </ul> <p>What is the primary function of a locking mechanism in a bridge?</p> <ul> <li> To lock the original tokens on the source chain. </li> <li> To enable cross-chain transfers. X</li> <li> To improve the efficiency of smart contracts</li> <li> To issue wrapped tokens on the destination chain</li> </ul> <p>A Blockchain based approach for the CBDC Infrastructure would be</p> <ul> <li>[ ]Likely less disruptive than RTGS</li> <li> Likely more disruptive than RTGS</li> <li> The only possible approach</li> <li> Likely more expensive to implement than RTGS</li> </ul> <p>A CBDC could help a Central Bank implement monetary policy in a more effective manner</p> <ul> <li> True</li> <li> False</li> </ul> <p>A decentralized stablecoin would be less transparent than a custodial stablecoin</p> <ul> <li> True</li> <li> False</li> </ul> <p>Central Bank Digital Currencies (CBDCs): (Choose all that apply)</p> <ul> <li> Would only be used by commercial banks and other financial institutions</li> <li> Would necessarily be based upon blockchains</li> <li> Are widely deployed today</li> <li> Are a digital form of money issued by a Central Bank</li> </ul> <p>Central Bank Digital Currencies are under consideration due to which of the following considerations? (Choose all that apply)</p> <ul> <li> Possible use as another tool to implement monetary policy</li> <li> Increasing competition from the private sector</li> <li> inability to support transaction demands with current Central Bank structure</li> <li> Financial inclusion concerns as use of cash declines</li> </ul> <p>How does USDT (Tether) claim it is maintain its dollar peg? (Choose all that apply)</p> <ul> <li> By making sure there is excess collateral well beyond the supply of USDT</li> <li> By decreasing supply in response to market conditions</li> <li> By making sure it is backed on a 1:1 basis with the dollar or equivalent assets</li> <li> By increasing supply in response to market conditions</li> </ul> <p>If a stablecoin is both decentralized and capital efficient, according to the stablecoin trilemma, you would expect it to be: (Choose all that apply)</p> <ul> <li>[ ]More stable</li> <li> Exogenous</li> <li> Algorithmic</li> <li> Less stable</li> </ul> <p>In which of the following CBDC management schemes would an individual have a claim on the central bank? (Choose all that apply)</p> <ul> <li> Direct</li> <li> indirect</li> <li>[ ]UTXO</li> <li> Hybrid</li> </ul> <p>Most stablecoins are pegged to</p> <ul> <li> A market basket of currencies</li> <li> Barrels of oil</li> <li> The US Dollar</li> <li> The Euro</li> </ul> <p>Stablecoins seek to address which of the following shortcomings of cryptocurrencies</p> <ul> <li>[ ]User Experience</li> <li>[ ]User Experience</li> <li> Exchange rate volatility</li> <li> Fraud</li> </ul> <p>The most popular stablecoin is: (Choose the best answer)</p> <ul> <li> All the above are approximately equal in popularit</li> <li> BTC</li> <li> ETH</li> <li> USDT</li> </ul> <p>The stablecoin trilemma: (Choose all that apply)</p> <ul> <li> Shows the tradeoffs between different methods of maintaining stability with stablecoins.</li> <li> is another name for the blockchain trilemma</li> <li> States that stablecoins can be capital efficient, secure, and centralized.</li> <li> States that stablecoins can be capital efficient, stable, and decentralized.</li> </ul> <p>What are the drawbacks of a custodial stablecoin? (Choose all that apply)</p> <ul> <li> Central control</li> <li> Counterparty risk</li> <li> They aren\u2019t based upon a blockchain</li> <li> inefficient usage of capital</li> </ul> <p>What are the three areas of the CBDC design space? (Choose the best answer)</p> <ul> <li> Access Method</li> <li> Infrastructure</li> <li> Management Scheme</li> <li> Blockchain Choice</li> </ul> <p>What techniques are used to minimize stablecoin volatility? (Choose all that apply)</p> <ul> <li> On-chain collateral</li> <li> Off-chain collateral</li> <li>[ ]Minimizing volatility is not a problem with stablecoins. No special techniques are needed</li> <li>[ ]Users are trusted to maintain the appropriate capital</li> </ul> <p>What would you expect to be true if a stablecoin is backed by on-chain collateral? (Choose all that apply)</p> <ul> <li> it would be backed by the US Dollar</li> <li> It would be overcollateralized</li> <li> it would make efficient use of capital</li> <li> it would be prone to censorship</li> </ul> <p>Which of the following approaches for maintaining stability utilizes non-blockchain native collateral? (Choose the best answer)</p> <ul> <li>[ ]UTXO</li> <li> Off-chain</li> <li> On-chain</li> <li> All the above</li> </ul> <p>Which of the following approaches for maintaining stability with stablecoins does not depend upon collateral? (Choose the best answer)  </p> <ul> <li> Algorithmic</li> <li> All the above</li> <li> On-chain</li> <li> Off-chain</li> </ul> <p>Which of the following best describes the position of most major Central Banks regarding CBDCs? (Choose the best answer)</p> <ul> <li> They have deployed CBDCs</li> <li> They are in an exploratory phase with ongoing research and proofs-of-concept</li> <li> They have rejected CBDCs</li> <li> Deployment is expected within the coming weeks</li> </ul> <p>You are concerned about censorship risks with stablecoins. Which stability approach would you avoid? (Choose the best answer)</p> <ul> <li> Algorithmic</li> <li> All the above</li> <li> Off-chain</li> <li> On-chain</li> </ul> <p>Liquidation Threshold (choose all that apply)</p> <ul> <li> Is when the loan is automatically repaid</li> <li> Is the dollar value at which the loan will be liquidated</li> <li> Is set by the controlling smart contract</li> <li> Is the dollar value of the collateral</li> </ul> <p>A Flash loan (choose all that apply)</p> <ul> <li> Is possible with either TradFi or DeFi loans</li> <li> Is only possible with TradFi loans</li> <li> Is not possible with either DeFi or TradFi loans</li> <li> Is only possible DeFi loans</li> </ul> <p>Assume that ETH is priced at $2000 and USDC has a price of $1. With an LTV ratio of 80% what is the maximum amount of USDC you can borrow if you collateralize the loan with 1 ETH? #formula</p> <ul> <li> 2500 USDC</li> <li> 2000 USDC</li> <li> 800 USDC</li> <li> 1600 USDC</li> </ul> <p>Assume that two ETH (with an exchange rate of 1 ETH = $2000) are used as collateral for a DeFi loan. There is an LTV of 80% and a LT of 90%. USDC has an exchange rate of $1 = 1 USDC. How much USDC will you be able to borrow? #formula</p> <ul> <li> 1800 USDC</li> <li> 3200 USDC</li> <li> 3600 USDC</li> <li> 1600 USDC</li> </ul> <p>Decentralized Lending Borrowing is implemented by: (Choose all that apply)</p> <ul> <li> Government authorized entities</li> <li> Smart contracts</li> <li> Using credit histories</li> <li> Centralized exchanges</li> </ul> <p>Flash loans (Choose the best answer)</p> <ul> <li> Must be repaid in the same block</li> <li> Must be repaid with 10 blocks of the loan origination transaction</li> <li> All of the above</li> <li> Are loans that are given the highest priority</li> </ul> <p>Flash loans can be used for (Choose the best answer)</p> <ul> <li> Arbitrage</li> <li> All the above</li> <li> Self-Liquidation</li> <li> Liquidity swaps</li> </ul> <p>Perpetual maturities of loans (loans with no maturity date)</p> <ul> <li> Are only available with TradFi loans</li> <li> Are only available with DeFi loans</li> <li> Are available with both the TradFi and DeFi loans</li> <li> Are not available with either TradFi or DeFi loans</li> </ul> <p>Since Decentralized Lending/Decentralized Borrowing have overcollateralized loans, there is no risk to the lender</p> <ul> <li> True</li> <li> False</li> </ul> <p>The Loan-to-Value ratio remains the same throughout the life of the loan</p> <ul> <li> True</li> <li> False</li> </ul> <p>The Loan-to-Value ratio</p> <ul> <li> is the dollar value of the collateral</li> <li> is the value of the loan</li> <li> is the same as the liquidation threshold</li> <li> defines the degree of overcollateralization</li> </ul> <p>Typical loans in DeFi (choose all that apply)</p> <ul> <li> Are overcollateralized</li> <li> Are free from risk to the borrower</li> <li> Have interest rates set by central authorities</li> <li> Can be undercollateralized</li> </ul> <p>What happens when a loan reaches the Liquidation Threshold (LT)</p> <ul> <li> You will not be allowed to take another loan on the platform</li> <li> It is sold to liquidators (partially</li> <li> Nothing. It is informational only</li> <li> The collateral and loan are returned</li> </ul> <p>What is used to guard against the volatility of digital assets when used as collateral in Decentralized Borrowing? (Choose all that apply)</p> <ul> <li> Use of KYC</li> <li> Overcollateralization</li> <li> Nothing - volatility of digital assets is not a problem in Decentralized Borrowing</li> <li> Use of Real World assets as collateral</li> </ul> <p>Which of the following defines how much a loan is overcollateralized (choose all that apply)?</p> <ul> <li> Collateralization Ratio</li> <li> Loan-to-Value (LTV)</li> <li> Liquidation Threshold (LT)</li> <li> None of these. Loans are not overcollateralized</li> </ul> <p>Which of the following is true about TradFi and DeFi lending/borrowing? (Choose all that apply)</p> <ul> <li> Both can have fixed interest rate</li> <li> Both depend upon centralized intermediaries</li> <li> Both typically have overcollateralized loans</li> <li> Both require vetted and approved entities as borrowers</li> </ul> <p>Which of the following play a role in Decentralized Lending/Decentralized Borrowing? (Choose all the apply)</p> <ul> <li> Central Loan Committees</li> <li> Liquidators</li> <li> Smart Contracts</li> <li> Creditors</li> </ul> <p>Which of the following statements regarding DeFi Loans and leverage is not true?</p> <ul> <li> Leverage is not possible with DeFi Loans</li> <li> It can amplify losses from an investment</li> <li> It should be avoided by novice investors</li> <li> It can amplify returns from an investment</li> </ul> <p>With Decentralized Lending/Decentralized Borrowing, the borrower cannot lose their collateral</p> <ul> <li> True</li> <li> False</li> </ul> <p>You provide 1 ETH (with an exchange rate of $1000 = 1 ETH) as collateral for a loan of USDC. The USDC has an exchange rate of 1 USDC = $ 1. There is an LTV of 60% and a LT of 90%. You receive 600 USDC. The price of ETH falls by 25%. What is the new LTV? (Choose the best answer) #formula</p> <ul> <li> 80%</li> <li> 90%</li> <li> 75%</li> <li> None of the above</li> </ul> <p>Centralized Exchanges: (Choose all that apply)</p> <ul> <li> Match buyers and sellers</li> <li> Only exist in Traditional Finance (TradFi)</li> <li> Are intermediaries</li> <li> Exist in the cryptocurrency world.</li> </ul> <p>Cryptocurrencies and associated tokens can only trade on Decentralized Exchanges due to the decentralized nature of Cryptocurrencies.</p> <ul> <li> True</li> <li> False</li> </ul> <p>Currently, an order book is a key component of both Centralized and Decentralized Exchanges</p> <ul> <li> False</li> <li> True</li> </ul> <p>Decentralized Exchanges generally operate using</p> <ul> <li> Order Books and Market Makers</li> <li> Liquidity Pools only</li> <li> Liquidity Pools and Automated Market Makers</li> <li> Order Books only</li> </ul> <p>Impermanent Loss (Choose all that apply)</p> <ul> <li> Is a risk that traders have when using a DEX</li> <li> Is not a risk with DEXs.</li> <li> Is a difference between providing tokens to an LP versus holding the tokens</li> <li> Is a risk that Liquidity Providers have when using a DEX</li> </ul> <p>Suppose there is a liquidity pool in a DEX with 10 ETH and 15,000 DAI. This liquidity pool uses the Constant Product Formula. Suppose you want to exchange DAI for ETH. How much DAI would you provide to receive 4 ETH? #formula</p> <p>The correct answers are: 150,000). After the transaction k must still be equal to 150,000. There will be 6 ETH left after the transaction completes. This means that 6*(15,000 + z), 150,000 (where z is the additional DAI in the pool. Solving for z, 6z + 90,000, 150,000, 6z, 60,000,z, 10,000, 150,000). After the transaction k must still be equal to 150,000. There will be 6 ETH left after the transaction completes. This means that 6*(15,000 + z), 150,000 (where z is the additional DAI in the pool. Solving for z, , 6z + 90,000, 150,000, 6z, 60,000,z, 10,000, 10,000 DAI, 150,000). After the transaction k must still be equal to 150,000. There will be 6 ETH left after the transaction completes. This means that 6*(15,000 + z), 150,000 (where z is the additional DAI in the pool. Solving for z, ,6z + 90,000, 150,000,6z, 60,000,z, 10,000, 150,000). After the transaction k must still be equal to 150,000. There will be 6 ETH left after the transaction completes. This means that 6*(15,000 + z), 150,000 (where z is the additional DAI in the pool. Solving for z, ,6z + 90,000, 150,000,6z, 60,000,z, 10,000</p> <ul> <li> 150,000 DAI</li> <li> 600 DAI</li> <li> 60000 DAI</li> <li> None of te above</li> </ul> <p>Uniswap is the most popular decentralized exchange.</p> <ul> <li> False</li> <li> True</li> </ul> <p>What is slippage?</p> <ul> <li> The commission that a buyer must pay</li> <li> The difference between the expected and actual price paid for a trade.</li> <li> The loss of assets due to fraud</li> <li> The price that Centralized Exchanges charge for their services.</li> </ul> <p>Which AMM algorithm has no slippage?</p> <ul> <li> is a straight line and has no slippage.</li> <li> Constant Sum Formula</li> <li> Variable Sum Formula</li> <li> All AMM Algorithms have slippag</li> <li> Constant Product Formula</li> </ul> <p>Which mediation services may a cryptocurrency CEX provide? (Choose all that apply)</p> <ul> <li> Portfolio Manager</li> <li> Custodian</li> <li> Liquidity Provider</li> <li> Broker</li> </ul> <p>Which of the following are advantages of a Decentralized Exchange? (Choose all that apply)</p> <ul> <li> Interoperability with other DeFi applications</li> <li> Ability to trade without a centralized intermediary</li> <li> They provide secure custody for your crypto assets</li> <li> Lack of Software problems inherent in Centralized Exchanges</li> </ul> <p>Which of the following are Automated Market Maker Algorithms? (Choose all that apply)</p> <ul> <li> Variable Mean Formula</li> <li> Variable Sum Formula</li> <li> Constant Product Formula</li> <li> Constant Price Formula</li> </ul> <p>Which of the following are Centralized Exchanges (CEX)? (Choose all that apply)</p> <ul> <li> New York Stock Exchange</li> <li> Binance</li> <li> NASDAQ</li> <li> Coinbase</li> </ul> <p>Which of the following are not Decentralized Exchanges? (Choose all that apply)</p> <ul> <li>[ ]PancakeSwap</li> <li>[ ]Uniswap</li> <li> Balancer</li> <li> Coinbase</li> </ul> <p>Which of the following is not a reason that it is difficult to build DEX with order books?</p> <ul> <li> Government Regulations</li> <li> Block Confirmation times</li> <li> Front Running</li> <li> Gas Fees</li> </ul> <p>Which of the following is not true of an Order Book in a CEX? (Choose all that apply)</p> <ul> <li> It contains bids and asks for an asset</li> <li> It makes sure there are always adequate buyers for an asset</li> <li> It is publicly viewable by anyone in the world</li> <li> It helps determine the price of an asset</li> </ul> <p>Which of the following is true of Market Makers? (Choose all that apply)</p> <ul> <li> They provide liquidity in the market for an asset</li> <li> They are not required in Centralized Exchanges.</li> <li> They help maintain a stream of buy and sell orders</li> <li> They increase slippage in trades</li> </ul> <p>Which of the following statements regarding Cryptocurrency Centralized Exchanges are true? (Choose all that apply)</p> <ul> <li> They may act as a custodian for user assets</li> <li> They may place orders on behalf of clients</li> <li> They offer better exchange rates than their decentralized counterparts</li> <li> They may perform more services than CEXs in Traditional Finance</li> </ul> <p>Which of the following statements regarding Decentralized Exchanges are false? (Choose all that apply)</p> <ul> <li> They do not allow the user to self-custody</li> <li> They are smart contracts</li> <li> They allow for token swaps</li> <li> They are more peer to peer than CEXs</li> </ul> <p>Why are cryptocurrency CEXs possibly even more centralized than TradFi Centralized Exchanges? (Choose all that apply)</p> <p>There are generally more intermediaries in TradFi CEXs</p> <ul> <li> Their use of Smart Contracts</li> <li> Crypto currency CEXs offer many more roles and services than TradFi counterparts.</li> <li> Crypto CEXs are not more centralized than their TradFi counterparts.</li> <li> Crypto CEXs are not more centralized than their TradFi counterparts.</li> </ul> <p>A DeFi application based upon Ethereum that requires the final score of a future sporting event would need an Oracle</p> <ul> <li> False</li> <li> True</li> </ul> <p>How would a smart contract use the services of an oracle? (Choose all that apply)</p> <ul> <li> By contacting the company that provides the oracle for a private key</li> <li> By using special features of the virtual machine</li> <li> Smart contracts cannot use the services of an oracle</li> <li> By calling a smart contract function associated with the oracle smart contract</li> </ul> <p>Oracles do not represent a risk to DeFi applications.</p> <ul> <li> True</li> <li> False</li> </ul> <p>Since derivatives are based upon an underlying asset, there is no counterparty risk.</p> <ul> <li> False</li> <li> True</li> </ul> <p>The custodian for a wrapped asset must be decentralized?</p> <ul> <li> False</li> <li> True</li> </ul> <p>What is a financial derivative?</p> <ul> <li> it is an asset stored on a blockchain</li> <li> it is anything deemed to have value in the TradFi world.</li> <li> It is a financial instrument that derives its value from an underlying asset, assets, or benchmarks</li> <li> it is another name for equity in a company</li> </ul> <p>What is the oracle problem? (Choose all that apply)</p> <ul> <li> it is difficult to predict future price movements of a crypto asset</li> <li> Blockchains will require high scalability to function properly in the future</li> <li> Smart contracts and dApps may require information that is not available to them</li> <li> it is difficult to predict the amount of slippage in a decentralized exchange.</li> </ul> <p>What kind of derivative gives someone the opportunity, but not the obligation, to buy or sell an asset at a given price in the future?</p> <ul> <li> Swap</li> <li> Options Contract</li> <li>[ ]Perpetual Contract</li> <li> Futures Contract</li> </ul> <p>What of the following are true statements regarding wrapped BTC tokens based upon the Ethereum blockchain? (Choose all that apply)</p> <ul> <li> They are backed 1:1 with an equivalent amount of ETH.</li> <li> They could not be used on the Ethereum network</li> <li> They are over collateralized like any synthetic asset</li> <li> It would likely be represented by an ERC-20 token.</li> </ul> <p>Which of the following actions can an oracle perform? (Choose all that apply)</p> <ul> <li> Retrieve off-chain data</li> <li> Retrieve information from external sensors</li> <li> Send smart contract data to external systems</li> <li> Deliver off-chain data to the blockchain</li> </ul> <p>Which of the following are not recommended usage scenarios for derivatives? (Choose all that apply)</p> <ul> <li> Speculation on the future price of an asset</li> <li> increase returns through leverage</li> <li> Investment by novice users</li> <li> Hedging against price volatility</li> </ul> <p>Which of the following are true about oracles?</p> <ul> <li> They rely on miners continuously hashing transaction information until they arrive at a certain target hash</li> <li> The process by which they receive the data is a \u201cblack box\u201d for the rest of the blockchain network</li> <li> They rely on special entities with privileged access to the blockchain to vet and input information</li> <li> Central banks operate all oracles on the Ethereum blockchain</li> </ul> <p>Which of the following could be tokenized (choose all that apply)?</p> <ul> <li> Real Estate</li> <li> ETH</li> <li> Silver</li> <li> Apple </li> </ul> <p>Which of the following is not true of synthetic assets?</p> <ul> <li> They are implemented using smart contracts</li> <li> They are represented by tokens</li> <li> They can only represent on-chain assets</li> <li> They are not considered a derivative</li> </ul> <p>Which of the following is true of a wrapped Bitcoin (wBTC)?</p> <ul> <li> They are not considered a synthetic asset</li> <li> They can be used to increase the amount of Bitcoin</li> <li> They are created by depositing BTC in a custodial platform</li> <li> They are represented by a token which is then tradeable</li> </ul> <p>Which of the following scenarios would likely not require the use of one or more oracles? (Choose all that apply)</p> <ul> <li> A Decentralized Exchange that needs the current exchange rate for ETH in US dollars</li> <li> A Blockchain explorer that shows recent confirmed transactions</li> <li> A Decentralized Exchange that needs the current exchange rate for an ERC-20 token in US dollars.</li> <li> A Decentralized Exchange that needs the current exchange rate for BTC in US dollars</li> </ul> <p>Which of the following smart contracts would not require an oracle? (Choose all that apply)</p> <ul> <li> A smart contract that reads a hash value on the blockchain.</li> <li> A smart contract the updates a record in a government database.</li> <li> A smart contract that performs an action based upon the weather</li> <li> A smart contract that reads the current price of Microsoft stock</li> </ul> <p>Which of the following statements are not true regarding Blockchains? (Choose all that apply)</p> <ul> <li> Blockchains are closed systems</li> <li> Blockchains are isolated from the world outside of the blockchain</li> <li> Blockchains are deterministic in nature</li> <li> Blockchains can directly \u201csee\u201d any public information on the Internet.</li> </ul> <p>Which statement regarding DeFi risk and insurance is true?</p> <ul> <li> There are risks in DeFi. Decentralized approaches for insuring against these risks are emerging.</li> <li> There are no risks in DeFi due to the quality and security of blockchains. Insurance is not needed.</li> <li> There are risks in DeFi, but insurance requires a centralized approach</li> <li> The DeFi risks are so small that they are not worth insuring against</li> </ul> <p>A holder of company stock in a public company is generally entitled to which of the following? (Choose all that apply)</p> <ul> <li> Voting rights on corporate proposal like stock issuance</li> <li> inside information on company futures</li> <li> A seat on the company Board of Directors</li> <li> Dividends</li> </ul> <p>DAOs are governed:</p> <ul> <li> DAOs have no formal governance capability</li> <li> Both Off-chain and On-Chain</li> <li> Off-Chain</li> <li> On-Chain</li> </ul> <p>Governance in DeFi projects is typically enabled and expressed through</p> <ul> <li> Staking Ethereum</li> <li> Stock</li> <li> Governance tokens</li> <li> Real world foundations</li> </ul> <p>Governance proposals include</p> <ul> <li> Neither executable code nor instructions for a human team to implement</li> <li> Both executable code and instructions for a human team to implement off-chain</li> <li> Executable code</li> <li> instructions for a team to execute off-chain</li> </ul> <p>Governance token holders in a DAO can typically: (Choose all that apply)</p> <ul> <li> Create governance proposals</li> <li> Directly fix problems in the smart contract code</li> <li> Vote on governance proposal</li> <li> Sell their tokens</li> </ul> <p>Governance tokens for a DAO are also utility tokens</p> <ul> <li> False</li> <li> True</li> </ul> <p>Governance tokens: (Choose all that apply)</p> <ul> <li> Can be earned</li> <li> Cannot be airdropped</li> <li> Can be minted</li> <li> Can be purchased on exchanges</li> </ul> <p>In a public company corporate governance is ultimately delegated to</p> <ul> <li> Board of Directors</li> <li> ShareholdersManagement is ultimately delegated day to day responsibility for corporate governance. Shareholders elect a Board of Directors who delegate authority to management.</li> <li> EmployeesManagement is ultimately delegated day to day responsibility for corporate governance. Shareholders elect a Board of Directors who delegate authority to management.</li> <li> ManagementManagement is ultimately delegated day to day responsibility for corporate governance. Shareholders elect a Board of Directors who delegate authority to management.</li> </ul> <p>The execution of DAO services is: (Choose all that apply)</p> <ul> <li> Performed On-Chain</li> <li> Subject to approval by the original development team</li> <li> Executed programmatically</li> <li> Can have an off-chain component</li> </ul> <p>The token approach to governance guarantees that DAO governance will not be centralized</p> <ul> <li> False</li> <li> True</li> </ul> <p>What is a Sybil attack on a DAO?</p> <ul> <li> When a token holder votes multiple times on a proposal</li> <li> When a token holder overwhelms the contract with many proposals.</li> <li> When a person holds tokens in multiple wallets</li> <li> When a token holder does not vote on a proposal</li> </ul> <p>What is governance? (Choose the best answer)</p> <ul> <li> it is how blockchains come to consensus.</li> <li> It is the system by which any organization is controlled.</li> <li> it only refers to the system by which a country is administered.</li> <li> it is how a central bank keeps the economy from growing too quickly.</li> </ul> <p>What services can DAOs provide? (Choose all that apply)</p> <ul> <li> Lending/Borrowing</li> <li> Derivatives</li> <li> Decentralized Exchanges</li> <li> Stablecoins</li> </ul> <p>When a governance proposal is approved: (Choose all that apply)</p> <ul> <li> it is voted upon by users of the smart contract</li> <li> it is submitted to the DAO\u2019s central management team for final approval</li> <li> It is autonomously implemented</li> <li> it is submitted to the dev team for implementation</li> </ul> <p>Which of the following are risks of token based governance? (Choose all that apply)</p> <ul> <li> Vampire attacks</li> <li> Token holders can delegate their tokens.</li> <li> Power can get concentrated in the hands of a few token holders.</li> <li> Small token holders have a negligible impact and may lose interest.</li> </ul> <p>Which of the following is true of DAOs?</p> <ul> <li> There are strict standards for the implementation of DAOs to promote consistency</li> <li> DAOs delegate day to day operations to the development team that implemented the DAO</li> <li> DAOs are free to implement their governance as they see fit.</li> <li> Most DAO platforms seek to avoid the use of tokens for governance</li> </ul> <p>Which of the following is true regarding the execution of governance and proposals in DAOs? (Choose all that apply)</p> <ul> <li> Execution is verifiable with DAOs</li> <li> Execution is on chain with DAOs.</li> <li> Execution is not transparent with DAOs</li> <li> Execution requires real world interaction with DAOs</li> </ul> <p>Which of the following statements are generally true (choose the best option)?</p> <ul> <li> Public companies have more decentralized governance. Private companies have more centralized governance.</li> <li> Public companies have centralized governance. Private companies tend to have decentralized governance</li> <li> Both public companies and private tend to have centralized governance.</li> <li> Both public companies and private companies tend to have decentralized governance</li> </ul> <p>Who typically controls a DAO by providing and approving proposals?</p> <ul> <li> Smart Contract code</li> <li> Community members who hold governance tokens</li> <li> DAO founders</li> <li> A centralized group of individuals</li> </ul> <p>A deflationary token:</p> <ul> <li> is a token operating in an overall economy that is deflationary.</li> <li> Is a token operating in an overall economy that is deflationary.</li> <li> is a token that is losing favor in the marketplace.</li> <li> is a token that whose exchange rate is decreasing.</li> </ul> <p>Generally, an increase in token demand: (Choose the best answer)</p> <ul> <li> One cannot determine the impact on price with the information given.</li> <li> Any price change would be random.</li> <li> Will result in a higher price.</li> <li> Will result in a lower price.</li> </ul> <p>If major governments around the world announce an intent to provide for more regulation for tokens, this would be considered</p> <ul> <li> Neither a Micro-tokenomics and Macro-tokenomics factor</li> <li> Both a Micro-tokenomics and Macro-tokenomics factor</li> <li> A Micro-tokenomics factor</li> <li> A Macro-tokenomics factor</li> </ul> <p>If the supply of a token is significantly reduced, what would you expect to happen to the price of that token? (Choose the best answer)</p> <ul> <li> The price would stay the same.</li> <li> The price would increase.</li> <li> The price would decrease.</li> <li> Token supply has no impact on token price.</li> </ul> <p>Since the total supply of Bitcoin is capped, it is considered a deflationary token</p> <ul> <li> False</li> <li> True</li> </ul> <p>The next halving event for Bitcoin</p> <ul> <li> Will make Bitcoin more inflationary.</li> <li> Will have no impact on the inflationary or deflationary nature of Bitcoin.</li> <li> Will make Bitcoin less inflationary.</li> <li> Will make Bitcoin more deflationary.</li> </ul> <p>The process of converting ownership rights to tokens that can be issued and traded on a blockchain is known as: (Choose the best answer)</p> <ul> <li> Tokenization</li> <li> None of the above</li> <li> An Initial Public Offering</li> <li> Tokenomics</li> </ul> <p>Total Token Supply is</p> <ul> <li> The total number of tokens that will ever be minted.</li> <li> The number of tokens given to developers of the project.</li> <li> The number of tokens that are currently circulating.Total Token Supply is the total number of tokens that will ever be minted. If you subtract burnt tokens from this value, you get the Max Token Supply. The total number of tokens currently circulating is the Circulating Supply.</li> <li> The total number of tokens that will ever be minted (less burnt tokens).</li> </ul> <p>What are the benefits of tokenizing physical assets? (Choose all that apply)</p> <ul> <li> Tokens would easily be used and traded. </li> <li> Tokens would enable fractional ownership of expensive assets.</li> <li> Tokens would remove the need for any centralized intermediaries.</li> <li> Physical assets cannot be tokenized.</li> </ul> <p>What are the challenges tokenizing physical assets (Choose all that apply)</p> <ul> <li> Technical difficulty representing a physical asset in a token</li> <li> The need for centralized intermediaries </li> <li> There are no significant issues with tokenizing physical assets.Legal recognition for tokens representing physical assets is a significant hurdle. Ownership of physical assets (particularly significant physical assets like a home or car) interact with the legal system. This will require centralized intermediaries to mediate between the physical world and blockchain world.</li> <li> Legal recognition</li> </ul> <p>What is Macro-Tokenomics?</p> <ul> <li> The study of blockchain usage by government entities</li> <li> The study of individual properties of a protocol or blockchain</li> <li> The study of the broad environment of the entire blockchain ecosystem</li> <li> The study of both the individual properties of a blockchain and the entire blockchain ecosystem.</li> </ul> <p>What is Micro-Tokenomics?</p> <ul> <li> The study of blockchains that provide for very small payments.</li> <li> The study of blockchains that provide for very small payments.</li> <li> The study of the broad environment of the entire blockchain ecosystem.</li> <li> The study of blockchain adoption in emerging economies.</li> </ul> <p>When valuing token projects, it can be useful to think of a token as a share of stock.</p> <ul> <li> False</li> <li> True</li> </ul> <p>Which of the following can be tokenized? (Choose all that apply)</p> <ul> <li> Rights to future income</li> <li> Licensing rights for music</li> <li> Physical Art</li> <li> Real Estate</li> </ul> <p>Which of the following statements are true regarding Monetary Policy and Ethereum? (Choose all that apply)</p> <ul> <li> The supply of ETH can increase or decrease.</li> <li> The supply of ETH is now capped.</li> <li> The supply ETH is always increasing.</li> <li> There is an unlimited supply of ETH.</li> </ul> <p>Which of the following statements regarding Fully Diluted Market capitalization are true?</p> <ul> <li> is only measured with deflationary tokens.</li> <li> is the market capitalization at the lowest anticipated exchange rate for the token.</li> <li> it is the same as Market Capitalization</li> <li> It is Market Capitalization if the Max Total Supply was in circulation.</li> </ul> <p>Which of the following statements regarding tokenizing non-native assets and intermediaries is true?</p> <ul> <li> New intermediaries will emerge to replace prior intermediaries.</li> <li> New intermediaries will emerge, and the incumbent intermediaries will remain.</li> <li> intermediaries are no longer needed.</li> <li> There will be no impact on intermediaries.</li> </ul> <p>Which of the following was one of the first uses of non-native tokens on a blockchain?</p> <ul> <li> Colored coins</li> <li> Bitcoin</li> <li> Altcoins</li> <li> Ethereum</li> </ul> <p>Which of the following would fall under a Micro-tokenomics assessment? (Choose all that apply)</p> <ul> <li> Regulation</li> <li> Token inflation rate</li> <li> Overall blockchain ecosystem growth</li> <li> Token purpose</li> </ul> <p>Who stands to see benefits from the tokenization of real estate? (Choose the best answer)</p> <ul> <li> Regulators</li> <li> Traditional Financial Institutions</li> <li> Owners</li> <li> All the above.</li> </ul> <p>How can you protect yourself from phishing attacks?</p> <ul> <li> Double-check URLs before entering sensitive information</li> <li> Use bookmarks for frequently visited websites</li> <li> Click on all links received in emails</li> <li> Ignore security warnings</li> </ul> <p>How can you safely disconnect your hardware wallet from MetaMask?</p> <ul> <li> Close the browser</li> <li> Disconnect it in Metamask extension</li> <li> Turn off your computer</li> <li> Remove the USB cable without disconnecting in MetaMask</li> </ul> <p>In the context of DeFi, what does \"staking tokens\" usually involve?</p> <ul> <li> Creating new tokens</li> <li> Storing tokens in a hardware wallet</li> <li> Trading tokens on decentralized exchanges</li> <li> Locking tokens in a smart contract to support network operations</li> </ul> <p>What are NFTs commonly used for in gaming?</p> <ul> <li> Launching exit scams</li> <li> Enabling two-factor authentication</li> <li> Representing in-game assets with real-world value</li> <li> Front-running DeFi transactions</li> </ul> <p>What are some characteristics of a strong password?</p> <ul> <li> Simple patterns</li> <li> At east 12 characters long</li> <li> Random and unpredictable</li> <li> Combination of uppercase and lowercase letters, numbers, and special characters</li> </ul> <p>What can a hardware wallet do?</p> <ul> <li> A physical device that stores private keys offline</li> <li> It can protect you from malicious on-chain transactions</li> <li> Can connect with browser extensions</li> <li> Can get you exclusive access to DeFi games</li> </ul> <p>What is a key difference between DeFi games and NFT games?</p> <ul> <li> DeFi games cannot be played online</li> <li> DeFi games focus on incorporating DeFi principles, while NFT games emphasize the use of NFTs</li> <li> NFT games do not allow players to earn rewards</li> <li> DeFi games have no in-game assets</li> </ul> <p>What is a rug pull? - [ ] A type of flooring - [x] A sudden withdrawal of liquidity - [ ] A type of phishing attack - [ ] A token price manipulation tactic</p> <p>What is one advantage of using a password manager?</p> <ul> <li> It helps you generate, store, and manage your passwords securely</li> <li> It allows you to use the same password across multiple accounts</li> <li> It provides a list of known phishing sites</li> <li> It monitors DeFi transactions for front-running attacks</li> </ul> <p>What is the purpose of connecting a hardware wallet to MetaMask?</p> <ul> <li> To enable phishing protection</li> <li> To generate strong passwords</li> <li> To track token balances</li> <li> To allow interaction with DeFi applications while maintaining secure storage of crypto assets</li> </ul> <p>What is the purpose of MetaMask's phishing protection feature?</p> <ul> <li> To track token balances</li> <li> To compare visited websites against a list of known phishing sites</li> <li> To grant permissions to dApps</li> <li> To generate strong passwords</li> </ul> <p>What precautions can you take to protect yourself from exit scams?</p> <ul> <li> Ignore red flags</li> <li> Research the project team's background</li> <li> Look for audits from reputable security firms</li> <li> Examine the project's code</li> </ul> <p>Which of the following are common types of scams in the DeFi ecosystem?</p> <ul> <li> Pump-and-dump schemes</li> <li> Smart contract exploits</li> <li> Rug pulls</li> <li> Exit scams</li> </ul> <p>Which of the following can help you maintain a secure browsing environment while using MetaMask?</p> <ul> <li> Regularly update your browser and extensions</li> <li> Use a dedicated browser or browser profile for MetaMask activities</li> <li> Exercise caution when granting permissions to dApps</li> <li> Non of the above</li> <li> All of the above</li> </ul> <p>Which of the following is a benefit of DeFi games?</p> <ul> <li> Earning rewards by playing games, staking tokens, or supplying liquidity</li> <li> Limited ownership of in-game assets</li> <li> Restrictions on trading in-game assets</li> <li> Confinement of asset value to the game's ecosystem</li> </ul> <p>Which of the following is a recommended security measure when using MetaMask?</p> <ul> <li> Using a weak password</li> <li> Ignoring phishing protection warnings</li> <li> Sharing your password with friends</li> <li> Enabling two-factor authentication (2FA)</li> </ul> <p>Which of the following is NOT a recommended practice for password security?</p> <ul> <li> Sharing your password with a trusted friend</li> <li> Updating your passwords regularly</li> <li> Using unique passwords for each account</li> <li> Using a password manager</li> </ul> <p>Why is it important to regularly review authorized sites in MetaMask?</p> <ul> <li> To ensure you have the latest security patches</li> <li> To revoke access from sites you no longer use or do not recognize</li> <li> To keep track of your favorite dapps</li> <li> To compare visited websites against a list of known phishing sites</li> </ul> <p>Why is it important to regularly update your browser and extensions?</p> <ul> <li> To disable phishing protection</li> <li> To change the browser's appearance</li> <li> To ensure you have the latest security patches and features</li> <li> To increase the risk of security breaches</li> </ul>"},{"location":"public/defi/defi-tests/#final","title":"Final","text":"<p>How do on-chain over-collateralized stablecoins maintain their peg to a certain value, usually $1?</p> <ul> <li> By adjusting the supply of the stablecoin in response to market conditions.</li> <li> By backing every stablecoin with more than its face value in volatile cryptocurrencies like ETH or BTC.</li> <li> By linking the value of the stablecoin to the performance of the stock market.</li> <li> By having the central bank control the supply and demand of the stablecoin.</li> </ul> <p>Which of the following are not approaches for mitigating losses from impermanent loss</p> <ul> <li> Protocols providing additional rewards in the form of their native token to LPs</li> <li> Supplying tokens whose value does not fluctuate a lot, such as stablecoins</li> <li> Not providing liquidity at all</li> <li> Withdrawing liquidity after large price movements</li> </ul> <p>Which of the following statement(s) about CBDCs is (are) false?</p> <ul> <li> Retail CBDCs are liabilities of the central bank, and assets of individuals, households or businesses.</li> <li> Financial inclusion is one of the main factors influencing CDBC issuance</li> <li> The interest of central banks in CBDCs has fallen over the past years</li> <li> A retail CBDC must be account based</li> </ul> <p>What would be a likely consequence of a centralized stablecoin issuer like Tether not having sufficient reserves to back all issued USDT?</p> <ul> <li> It could lead to hyperinflation in the country where the issuer is based</li> <li> It would not have any impact as USDT is a decentralized currency</li> <li> It could shake trust in the coin leading to a 'bank run' scenario with users rushing to redeem their USDT</li> <li> The cryptocurrency market would become less volatile</li> </ul> <p>Which of the following are subject to some form of governance?</p> <ul> <li> The internet</li> <li> Decentralized Exchanges (DEXs)</li> <li> Ethereum</li> <li> Privately held companies</li> </ul> <p>Which of the following are false?</p> <ul> <li> Market capitalization refers to the total value of all tokens currently in circulation</li> <li> A token\u2019s total token supply refers to the total number of tokens currently in circulation</li> <li> A deflationary token is one whose quantity will decrease in the future</li> <li> Inflationary tokens have a total supply limit of 21 million</li> </ul> <p>Suppose you evaluate funding requests in a venture capital firm that invests in new blockchain startups. Which of the following statements can be true, according to the blockchain trilemma? #skepticism</p> <ul> <li> \u201cOur blockchain solution offers state-of-the-art security, can process the same number of transactions as any major credit provider and is fully decentralized\u201d</li> <li> \u201cDecentralization is our guiding principle. Our blockchain solution offers state-of-the-art security and is supported by a network of hundreds of thousands of nodes across the world. It can process approximately 10 transactions per second.\u201d</li> <li> \"Our blockchain solution offers state-of-the-art security, is extremely scalable, and is supported by our proprietary 10 nodes in New York City.\u201d</li> <li> \u201cOur blockchain solution is fully decentralized and extremely efficient. Be aware that some transactions can be reversed after acceptance by the network.\u201d</li> </ul> <p>Which of the following are incorrect? #skepticism</p> <ul> <li> ERC-20 is the standard that introduced NFTs</li> <li> ERC-721 and ERC-1155 have made ERC-20 irrelevant</li> <li> ERC-1155 enables the combination of non-fungible and fungible tokens in the same smart contract</li> <li> CryptoKitties were the first project to utilize ERC-721</li> </ul> <p>Suppose you want to take a USDC loan, posting 1 ETH as collateral, in a platform with an initial Liquidation Threshold (LT) of 80%. Assume ETH is priced at $2,000 at the time of taking the loan, while USDC is priced at $1. What is the maximum percentage drop in ETH\u2019s value (from $2,000) that would not cause the loan to become undercollateralized (assume that you need to surpass the LT to trigger a liquidation)?</p> <ul> <li> 15%</li> <li> 20%</li> <li> 40%</li> <li> 80%</li> </ul> <p>Suppose that you are building a new DEX and your highest priority is to provide the best support for exchanging tokens with the same price while avoiding slippage for your users. You are more likely to utilize (Where x and y are the liquidity of provided tokens)</p> <ul> <li> The constant product formula (k=x*y)</li> <li> The constant sum formula (k=x+y)</li> </ul> <p>Which of the following are false about Liquidity Pools?</p> <ul> <li> In a permissionless setting, anyone can provide liquidity in a liquidity pool</li> <li> Liquidity pools operate solely within the Asset Layer of the DeFi stack</li> <li> Any pair of compatible tokens can be provided as liquidity to a liquidity pool</li> <li> They allow traders to interact directly with each other</li> </ul> <p>Which of the following are not examples of settlement layers?</p> <ul> <li> UNI</li> <li> Bitcoin</li> <li> Solana</li> <li> Tether</li> </ul> <p>Which of the following are not true regarding Layer 2 solutions? #skepticism</p> <ul> <li> They report final settlement information to the underlying Layer 1.</li> <li> They increase the transaction load of Layer 1</li> <li> They change the trust factors or consensus mechanisms of the underlying Layer 1</li> <li> They technically perform no operations \u201coff-chain\u201d</li> </ul> <p>Decentralized Finance (DeFi) applications are usually not</p> <ul> <li> Permissioned: They require credentials that are granted by an authoritative source</li> <li> Convenient: They can seamlessly connect with e-banking applications and point-of-sale terminals</li> <li> Decentralized: They are maintained simultaneously across hundreds or thousands of computers around the world</li> <li> Transparent: Anyone can see the transactions associated with the application</li> </ul> <p>Which of the following are false about flash loans?</p> <ul> <li> Users can borrow only up to a limited amount of ETH through flash loans</li> <li> They are a form of unsecured debt since they require no collateral</li> <li> They can be used to exploit arbitrage opportunities</li> <li> They are inspired by similar loan types available in the TradFi world</li> </ul> <p>Which of the following is NOT an issue of token-based governance?</p> <ul> <li> Plutocracy</li> <li> Centralization</li> <li> The demands of some stakeholders may be ignored</li> <li> Impermanent loss</li> </ul> <p>\u201cOnly digital assets can be made into synthetic assets\u201d. This statement is</p> <ul> <li> True</li> <li> False</li> </ul> <p>Which of the following are not reasons DeFi loans are overcollateralized? #skepticism</p> <ul> <li> To mitigate the impermanent loss of the borrower</li> <li> To mitigate the risk of a borrower defaulting on their loan</li> <li> To attract borrowers</li> <li> To use the extra collateral as a \u201cbuffer\u201d in the event of price changes</li> </ul> <p>Suppose that you have provided 5 ETH (1 ETH=\\(1,500) as collateral to the algorithmic blockchain-based borrowing and lending platform \u201cQuizLoans\u201d with a liquidation threshold of 60%. If you borrowed the maximum amount of DAI (1 DAI=\\)1) possible, what is the total value accessible (managed) by your private key (assume that you only started with 5 ETH and that the prices of ETH and DAI do not change)? #skepticism</p> <ul> <li> $4,500</li> <li> $12,000</li> <li> $8,160</li> <li> A private key is not used in this scenario</li> </ul> <p>Which of the following are false regarding AMMs or Liquidity Pools? #skepticism</p> <ul> <li> They solve the problem of illiquidity in DEXs</li> <li> They serve a role similar to order books in traditional exchanges</li> <li> They are responsible for determining the prices of the assets traded</li> <li> They are used to minimize impermanent loss</li> </ul> <p>Suppose you want to take a USDC loan, posting 1 ETH as collateral, in a platform with an initial Liquidation Threshold (LT) of 60%. Assume ETH is priced at $2,000 at the time of taking the loan, while USDC is priced at $1. What is the maximum drop in ETH\u2019s dollar value that would not cause the loan to become undercollateralized (assume that you need to surpass the LT to trigger a liquidation)?</p> <ul> <li> $1200</li> <li> $2000</li> <li> $800</li> <li> $1199</li> </ul> <p>Suppose you have deposited $500 worth of ETH in a decentralized lending protocol and have taken out a loan in UNI worth $250, against that ETH. In a scenario where the price of ETH increases and the price of UNI remains the same, your collateral is</p> <ul> <li> More likely to be liquidated</li> <li> Less likely to be liquidated</li> <li> There is no correlation between the price of ETH and liquidation</li> <li> Susceptible to impermanent loss</li> </ul> <p>Which of the following statements are false?</p> <ul> <li> Some stablecoins do not require collateral</li> <li> In most custodial stablecoins the collateral is maintained by a third party and usually includes money and money-equivalents</li> <li> Most crypto-collateralized stablecoins are capital efficient</li> <li> All algorithmic stablecoins have been successful at maintaining their peg</li> </ul> <p>Which of the following are not examples of blockchain-backed derivatives (synthetic assets)? (Choose all that apply) #skepticism</p> <ul> <li> BTC futures</li> <li> An ERC20 token representing 0.5 BTC and 2.0 Eth</li> <li> Uniswap\u2019s native token, UNI</li> <li> A Wrapped BTC token on the Ethereum blockchain</li> </ul> <p>Which of the following is false about smart contracts?</p> <ul> <li> When properly developed and deployed, they are necessarily enforceable in every court</li> <li> Without them, most of the functionality of DeFi would not be possible</li> <li> Turing complete or EVM-compatible (Ethereum Virtual Machine) smart contracts are supported on any blockchain</li> <li> After deployed on a blockchain, they can be modified by anyone with an EVM-compatible client that has enough gas to pay for the block reward</li> </ul> <p>\u201cEthereum smart contracts are only suitable for DeFi applications.\u201d This statement is</p> <ul> <li> True</li> <li> False</li> </ul> <p>Which of the following statements are true?</p> <ul> <li> Custodial stablecoins are prone to censorship</li> <li> Some stablecoins are more decentralized than others</li> <li> Stablecoins must be pegged to the US dollar</li> <li> Custodial stablecoins are less capital efficient than on-chain collateralized stablecoins</li> </ul> <p>\u201cDEXs that utilize Decentralized Autonomous Organization (DAO) structures for governance are not necessarily decentralized\u201d. This statement is</p> <ul> <li> True</li> <li> False</li> </ul> <p>How does a smart contract typically gain access to information (like stock prices, weather information, sports results) that does not inherently exist as part of the closed blockchain system?</p> <ul> <li> By using a Bridge</li> <li> By using an Oracle</li> <li> By using special Virtual Machine Opcodes</li> <li> Nothing special is needed to access this information</li> </ul>"},{"location":"public/defi/defi/","title":"Arman Riazi","text":"<p>Frankfurt-school_ecota_refi_2023-2024</p> Member of ReFi 2023-2024 <ul> <li>Regeneraive Finance ReFi 18 Weeks</li> </ul> <p>Certificates_and_seen_toturials_2023</p> Decentralized Finance Certificates 2023Decentralized Finance 2023 <ul> <li>Cryptocurrency-certificates</li> </ul> <ul> <li>Defi Tests</li> </ul> <p>Experience_and_seen_toturials_2020-2021</p> Cryptocurrency TradingPassed Self-Study Tutorials <ul> <li>Trading-Technical-Fundamental-Sheets</li> </ul> <ul> <li>Cryptocurrency-tutorials </li> </ul> <p></p>"},{"location":"public/defi/trade/","title":"Balance Sheets (Archived)","text":"<ul> <li>Balance Sheets</li> </ul>"},{"location":"public/defi/trade/#trading-technical-fundamental-archived","title":"Trading-Technical-Fundamental (Archived)","text":"<ul> <li> <p>Crypto Trading</p> </li> <li> <p>All the information calculated for you in other cells</p> </li> </ul>"},{"location":"public/defi/learning/crypto-trade-non-certificate/","title":"Crypto trade non certificate","text":"<p>Video</p> 2019-2021 <ul> <li>Company Valuation Training</li> <li>Investment Cryptocurrentcy</li> <li>Trading On The Platforms Of The Cryptocurrency</li> <li>Binance Trading</li> <li>Trading on Civil Platforms (native financial)</li> <li>Knowledge Of Technical &amp; Conceptual Trading</li> </ul>"},{"location":"public/defi/learning/trade-crypto-certificate/","title":"Trade crypto certificate","text":""},{"location":"public/defi/learning/trade-crypto-certificate/#2023","title":"2023","text":"Expert Priod By Supported By Inquiry Documents BLOC529-MC Decentralized Finance(Spring 2023) 5W Nicosia University UNIC 1 C Foundations and functions of blockchain technology and cryptocurrencies 22H Sharif University Blockchain-Lab Iran Financial Center(IFC) 1270291696 G"},{"location":"public/devops/CICD/","title":"CICD","text":"","tags":["devops","cicd"]},{"location":"public/devops/CICD/#features","title":"Features","text":"<p>Automation publish</p> <p>Fast Release  </p> <p>On-premise</p> <p>Cloud-Native</p> <p>Run Analyzer </p> <p>Test/Stage</p> <p>Customized Pipelines </p> <p>Good Solution for #Microservice</p> <p>Management product release per team</p> Quote <p>I captured 6h about implement of ci-cd with kubernetes and docker that I did not want upload it.</p> Info <p>#VSTS #CICD #Pipline    #TFS-Code2018   #Rancher #CICD #CaaS #CloudNative  Rancher - CaaS</p>","tags":["devops","cicd"]},{"location":"public/devops/Cloud/","title":"Cloud","text":"<p>I worked a little bit on AWS. I used services like #Cloud9 for online editor like gitpod. I am into IBM cloud for Couchdb (+ Medium link) and Blockchain as a service.My master thesis is about cloud simulation.[[master]]</p>","tags":["devops","cloud"]},{"location":"public/devops/Devops/","title":"DevOps","text":"","tags":["devops"]},{"location":"public/devops/Devops/#certificate-2023","title":"Certificate 2023","text":"Expert Priod By Supported By Inquiry Documents DevOps For Developers 50H educative.io/profile/view/5215295720652800 educative.io Redirect Link <p>Kubernetes</p> <p>Rancher</p> <p>Docker</p> <p>CICD</p> <p>Elastic-Search</p> <p>Cloud</p> <p>Virtualization</p> Quote <p>I success to launched #Microservice  either of [[dotnetcore]] and a sample with python I captured 6h about implement of ci-cd with [[kubernetes]] and docker that I did not want upload it. For devOps you should better know a little bit about programing languages but it will be ok, if you do not know. e.g I have not write any code by python but I was able to [[[deploy]] it.For devops you need to know about configuration, esxi, on-permise, cloud, windows server, linux dist/ubuntu that is out of scope for now surely.</p>","tags":["devops"]},{"location":"public/devops/Docker/","title":"Docker","text":"<p>DevOps: Docker registry Basic Authentication and HTTPS</p> <p></p> <p>There are two links for handling insecure and docker\u2019 notices about different solutions although we proposed a secure registry so it is better to know a little bit of another information. (Registry, Insecure) <code>ufw allow http ufw allow https curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -apt-key fingerprint 0EBFCD88 apt install ca-certificates curl openssh-server ufw apt-transport-https -y apt update apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common</code> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \u201cdeb [arch=amd64] https://download.docker.com/linux/ubuntu$(lsb_release -cs) \\stable\u201d <code>apt-get install docker-ce docker-ce-cli containerd.io usermod -aG docker linuxusername usermod -aG docker root docker run hello-world docker ps -a docker pull registry:2 (optional)reboot *docker run \u2014 entrypoint htpasswd registery:2 -Bbn dockerregistry dockerregistery &gt; auth/htpasswd *docker run -d -p 5000:5000 \u2014 restart=always \u2014 name registry -v /opt/auth:/auth -e \u201cREGISTRY_AUTH=htpasswd\u201d -e \u201cREGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\u201d -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd -v /opt/certs:/certs -v /opt/data:/var/lib/registry -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/server.crt -e REGISTRY_HTTP_TLS_KEY=/certs/server.key registry:2 *curl -kiv -H \u201cAuthorization: Basic $(echo -n \u201cdockerregistry:dockerregistry\u201d | base64)\u201d https://localhost:5000/v2 *docker login localhost:5000 *docker pull nginx:latest</code> Good luck </p>","tags":["devops","docker","container"]},{"location":"public/devops/Elastic-Search/","title":"Elastic-Search","text":"","tags":["elastic","search","devops"]},{"location":"public/devops/Elastic-Search/#features","title":"Features","text":"<p>Rest API </p> <p>Database </p> <p>Search </p> <p>Crawler </p> <p>Analyze </p> <p>Dashboard </p> <p>Quaryable </p> <p>Scalability</p> <p>Machine learning </p> Quote <p>To Configure ELK stack you need a lot of hardware resource I rented VPS to work in 2020. My experience says it is so power-full and all-in-one database rather than the other DBs.</p> Info <p>ELK-Dashboard ELK-captured 2020 Report of Gartner 2020 about ELK stack Dashboards(Location, System APIs, Logs of resources system, Filter,Advance search,...) </p>","tags":["elastic","search","devops"]},{"location":"public/devops/Kubernetes/","title":"Kubernetes","text":"<p>Capabilities:</p> <p>Scheduling and orchestrating application containers</p> <p>As an Infrastructure for Microservices </p> <p>Integrate with hundreds of tools such as (ELK, Rancher, ...)</p> <p>Optimal use of consume resources</p> <p>To increase speed and self-organize while the team doing develop</p> <p>Protecting the Website from Attacks</p> <p>Website maintenance without interruption and guaranteed</p> <p>It has been defined go through the CaaS layers like Rancher, but we know that this service itself is a Micro PaaS. I prefer to use kubernetes in the Rancher.</p> Quote <p>I eager to try it again especially use it in [[HyperLedger-IBM]] projects.</p> Info <p>Version ~2018</p> <p></p> <p> Show used Features  </p> <p> Show Part 1- used kubernetes version 1.0 </p>","tags":["devops","cicd","kubernetes"]},{"location":"public/devops/MessageBrokers/","title":"Message Brokers","text":"<ul> <li> <p>Documentation</p> </li> <li> <p>Repository</p> </li> </ul>","tags":["rabbitmq","kafka","broker","message","cloud"]},{"location":"public/devops/Rancher/","title":"Rancher","text":"<p>One Platform for Kubernetes Management Rancher is a complete software stack for teams adopting containers. It addresses the operational and security challenges of managing multiple Kubernetes clusters, while providing DevOps teams with integrated tools for running containerized workloads. Rancher Kubernetes Engine (RKE) is a CNCF-certified #[[Kubernetes]] distribution that runs entirely within Docker containers. It works on bare-metal and virtualized servers. RKE solves the problem of installation complexity, a common issue in the Kubernetes community. With RKE, the installation and operation of Kubernetes is both simplified and easily automated, and it\u2019s entirely independent of the operating system and platform you\u2019re running. As long as you can run a supported version of Docker, you can deploy and run Kubernetes with RKE.Rancher has got [[CICD]] pipelines</p> <p></p> Quote <p>Rancher is a CaaS platform and service provider that you can use it on cloud or #air-gap #high-avalibility.  I deployed the Rancher via Helm and It was fascinated when I found kubernetes on rancher without trying to scratch.  Rancher has got RKE-Cli  like Google kubernetes and Amazon kubernetes.</p> <p>Air-Gap configuration:</p> <pre><code>nodes:\n  - address: 172.18.3.10\n    internal_address: 192.168.11.1\n    user: ubuntu\n    role: [controlplane,worker,etcd]\n  - address: 172.18.3.15\n    internal_address: 192.168.22.2\n    user: ubuntu\n    role: [controlplane,worker,etcd]\n  - address: 172.18.3.16\n    internal_address: 192.168.33.3\n    user: ubuntu\n    role: [controlplane,worker,etcd]\n\nservices:\n  etcd:\n    snapshot: true\n</code></pre> <p>For Air-Gap HA you need to getting docker images(Version-2018):</p> <p><pre><code>busybox\nminio/minio:RELEASE.2018-05-25T19-49-13Z\nrancher/alertmanager-helper:v0.0.2\nrancher/calico-cni:v3.1.1\nrancher/calico-cni:v3.1.3\nrancher/calico-ctl:v2.0.0\nrancher/calico-node:v3.1.1\nrancher/calico-node:v3.1.3\nrancher/cluster-proportional-autoscaler-amd64:1.0.0\nrancher/coreos-etcd:v3.1.12\nrancher/coreos-etcd:v3.2.18\nrancher/coreos-etcd:v3.2.24\nrancher/coreos-flannel-cni:v0.2.0\nrancher/coreos-flannel-cni:v0.3.0\nrancher/coreos-flannel:v0.10.0\nrancher/coreos-flannel:v0.9.1\nrancher/docker-elasticsearch-kubernetes:5.6.2\nrancher/fluentd-helper:v0.1.2\nrancher/fluentd:v0.1.10\nrancher/hyperkube:v1.10.12-rancher1\nrancher/hyperkube:v1.11.6-rancher1\nrancher/hyperkube:v1.12.4-rancher1\nrancher/hyperkube:v1.9.7-rancher2\nrancher/jenkins-jnlp-slave:3.10-1-alpine\nrancher/jenkins-plugins-docker:17.12\nrancher/k8s-dns-dnsmasq-nanny-amd64:1.14.10\nrancher/k8s-dns-dnsmasq-nanny-amd64:1.14.13\nrancher/k8s-dns-dnsmasq-nanny-amd64:1.14.7\nrancher/k8s-dns-dnsmasq-nanny-amd64:1.14.8\nrancher/k8s-dns-kube-dns-amd64:1.14.10\nrancher/k8s-dns-kube-dns-amd64:1.14.13\nrancher/k8s-dns-kube-dns-amd64:1.14.7\nrancher/k8s-dns-kube-dns-amd64:1.14.8\nrancher/k8s-dns-sidecar-amd64:1.14.10\nrancher/k8s-dns-sidecar-amd64:1.14.13\nrancher/k8s-dns-sidecar-amd64:1.14.7\nrancher/k8s-dns-sidecar-amd64:1.14.8\nrancher/kibana:5.6.4\nrancher/log-aggregator:v0.1.3\nrancher/metrics-server-amd64:v0.2.1\nrancher/metrics-server-amd64:v0.3.1\nrancher/nginx-ingress-controller:0.16.2-rancher1\nrancher/nginx-ingress-controller-defaultbackend:1.4\nrancher/pause-amd64:3.0\nrancher/pause-amd64:3.1\nrancher/pipeline-jenkins-server:v0.1.0\nrancher/pipeline-tools:v0.1.0\nrancher/prom-alertmanager:v0.15.2\nrancher/rancher-agent:v2.1.5\nrancher/rancher:v2.1.5\nrancher/rke-tools:v0.1.13\nrancher/rke-tools:v0.1.15\nrancher/rke-tools:v0.1.16\nrancher/coreos-etcd:v3.2.18\nrancher/rke-tools:v0.1.15\nrancher/k8s-dns-kube-dns-amd64:1.14.10\nrancher/k8s-dns-dnsmasq-nanny-amd64:1.14.10\nrancher/k8s-dns-sidecar-amd64:1.14.10\nrancher/cluster-proportional-autoscaler-amd64:1.0.0\nrancher/hyperkube:v1.11.6-rancher1\nrancher/coreos-flannel:v0.10.0\nrancher/coreos-flannel-cni:v0.3.0\nrancher/calico-node:v3.1.3\nrancher/calico-cni:v3.1.3\nrancher/calico-ctl:v2.0.0\nweaveworks/weave-kube:2.1.2\nweaveworks/weave-npc:2.1.2\nrancher/pause-amd64:3.1\nrancher/nginx-ingress-controller:0.16.2-rancher1\nrancher/nginx-ingress-controller-defaultbackend:1.4\nrancher/metrics-server-amd64:v0.2.1\n</code></pre> I deployed Microservice .Netcore Ecommerce on Air-Gap as HA</p> Info <p></p>","tags":["container","rancher","kubernetes","caas","devops"]},{"location":"public/devops/Virtualization/","title":"Virualization","text":"","tags":["vsphere","devops","cloud","esxi","virtualization"]},{"location":"public/devops/Virtualization/#vsphere-71-features","title":"[[VSphere]] 7.1- Features","text":"<p>Server virtualization</p> <p>Optimal use of resources</p> <p>Reduce processing costs and power consumption</p> <p>To use the [[Kubernetes]] with high speed execution</p> <p>Remote communication to a server</p> <p>Run multiple operating systems simultaneously</p> Info <p>To know virtualization is obligate for blockchain developers. Senior full-stack developers have associated with it. My [[master]] thesis have being demonstrated cloud and virtualization. The virtualization concepts are simulated as kind of [[Container]] and virtual machine.</p>","tags":["vsphere","devops","cloud","esxi","virtualization"]},{"location":"public/fun/magazine/","title":"Magazine","text":"<p>DC-Pride-2022-1-2022</p> <p>How And why-Series</p> <p>Olaf-El-Vikingo</p> <p>SammaxSurfInTheHighWay</p> <p>SweetHeartPlayingCards-1935</p>","tags":["magazine"]},{"location":"public/fun/music/","title":"Music Videos","text":"<ul> <li>Shadmehr Aghili - Love</li> </ul> <ul> <li>Lady Gaga, Bradley Cooper - Shallow </li> </ul> <ul> <li>Celine Dion - The Best French </li> </ul> <ul> <li>AliReza Assar - Epic</li> </ul> <ul> <li>Darush - Fall in Deep</li> </ul>","tags":["music"]},{"location":"public/fun/3d/3d-images/3d-image1/","title":"3d image1","text":"360\u00b0 Image"},{"location":"public/fun/3d/3d-images/3d-image2/","title":"3d image2","text":"360\u00b0 Image"},{"location":"public/fun/3d/3d-images/3d-images/","title":"3d images","text":"<p>3d-image1</p> <p>3d-image2</p>"},{"location":"public/fun/3d/3d-videos/3D-videos/","title":"3D videos","text":"<p>3d-360-Spaceflight to Andromeda Galaxy | 360\u00b0 Video VR</p> <p>3d-360-Tomorrowland 2019 - IMMERSIVE VR EXPERIENCE - 20 Stages Live in 360\u00b0</p> <p>3d-360-Virtual Nature 360\u00b0 - 5.7K Nature Meditation for Oculus Quest</p>"},{"location":"public/fun/3d/3d-videos/3d-video1/","title":"3d video1","text":""},{"location":"public/fun/3d/3d-videos/3d-video2/","title":"3d video2","text":""},{"location":"public/fun/3d/3d-videos/3d-video3/","title":"3d video3","text":""},{"location":"public/fun/magazine/magazine-dc-pride-2022-1-2022/","title":"Magazine dc pride 2022 1 2022","text":""},{"location":"public/fun/magazine/magazine-howandwhy-series/","title":"Magazine howandwhy series","text":""},{"location":"public/fun/magazine/magazine-olaf-el-vikingo/","title":"Magazine olaf el vikingo","text":""},{"location":"public/fun/magazine/magazine-sammaxsurfinthehighway/","title":"Magazine sammaxsurfinthehighway","text":""},{"location":"public/fun/magazine/magazine-sweetheartplayingcards1935/","title":"Magazine sweetheartplayingcards1935","text":""},{"location":"public/issues/issues/","title":"Issues","text":"<p>issue-rust</p> <p>issue-substrate</p>"},{"location":"public/issues/nodejs/Issues-Nodejs/","title":"Issues Nodejs","text":"<p>Failure: NodeJs AssertionError [ERR_ASSERTION]</p>"},{"location":"public/issues/rust/issue-rust/","title":"Issue rust","text":"<p>issue-rust-libc-rust</p>"},{"location":"public/issues/rust/build/libc-rust/","title":"Libc rust","text":"<p>could not compile 'libc' due to previous error</p> Info <p>sudo apt install -y cmake pkg-config libssl-dev git gcc build-essential clang libclang-dev</p> <p>[[issue-rust]]</p>","tags":["libc","compile"]},{"location":"public/issues/substrate/issue-substrate/","title":"Issue substrate","text":"<p>issue-substrate-ocw-runtime</p>"},{"location":"public/issues/substrate/recipes/runtime/ocw-runtime/","title":"Ocw runtime","text":"<p>failed to run custom build command for `ocw-runtime v3.0.0</p> Info <p>First of all search nightly in explorer project and then find version used in that.</p> <p>rustup uninstall nightly rustup install nightly-2020-10-06 rustup target add wasm32-unknown-unknown --toolchain nightly-2020-10-06 export WASM_BUILD_TOOLCHAIN=nightly-2020-10-06</p> <p>[[issue-substrate]]</p> <ul> <li>[]</li> </ul>","tags":["ocw","runtime","build"]},{"location":"public/mynotes/exp-2021cryprotrading/","title":"Experience loss of money because of trading crypto in 2021 \ud83e\udd15","text":"<p>My friend and I used to engage in a financial plan, and we were responsible for paying 6% monthly interest to the investor, and then he lost USDT 73.000 because in 2021 everybody said bitcoin would be USDT 120.000\u2013240.000, while he was supposed to sell at the price of USD 70.000, but it was not happening. We did not have a team for managing orders exactly and doing so based on our good and logical plan. This activity had psychological effects, but I tried to feel better by reading books, practising meditation, having patience, recovering my mind, etc.</p> <p>I wonder to let you know that USDT 73.000  is about the value of Rial 5.000.000.000 . It is really harmful in situations of instability in the economy of the country. So, I need to work seriously without wasting time to compensate his losses. It is so hard for him to make a living as a loser in a country that is in recession! I must help him before he...</p> <p>Due to my interest in and experience with the blockchain, these things will still be worth something when I have finished paying off his debt! especially worthy of friendship.</p> <p>\"To everyone who finds the current investment climate hard, diffcult, and somewhat confusing, I would say, 'Welcome to adult life.'\" - [[Charlie Munger]]</p>"},{"location":"public/other/guide-website/","title":"Guide website","text":""},{"location":"public/other/learn-quickly/","title":"How to Learn Quickly","text":"<p>A few months back, I set out a goal to learn Language deeply in 3 months and I did it. Since then, others have asked how they can do the same. The outcome is a result of using something that I like to call the Fast Framework. This guide will teach you how you can use it to learn anything quickly.</p> <p>Imagine you\u2019re in racing a car. Your goal is to cross the finish line. Taking this analogy, we break the framework into three phases:</p>"},{"location":"public/other/learn-quickly/#make-your-map","title":"Make your Map","text":""},{"location":"public/other/learn-quickly/#stay-on-track","title":"Stay on Track","text":""},{"location":"public/other/learn-quickly/#cross-the-finishline","title":"Cross the Finishline","text":"<p>In each phase, I\u2019ll cover different aspects that will help you learn fast and reach your goal. I\u2019ll use learning Language as the example. The first phase will cover the foundation for your learning project. Think of this as vision, timeframe, timeline, and organization. In the phase after, the focus will be staying on track and I\u2019ll discuss aspects related to accountability, momentum, sharing, and focus. In the final phase of the journey, the goal is to finish strong and cross the finishline. There, I\u2019ll talk about practice, confidence, vocabulary, and depth.</p>"},{"location":"public/other/learn-quickly/#make-your-map_1","title":"Make your Map","text":"<p>The first step is to make your map. This will help answer questions like:</p>"},{"location":"public/other/learn-quickly/#what-does-it-mean-to-learn-insert-thing","title":"What does it mean to \u201clearn [insert thing]\u201c?","text":""},{"location":"public/other/learn-quickly/#how-long-will-the-project-take","title":"How long will the project take?","text":""},{"location":"public/other/learn-quickly/#what-are-the-expected-outcomes","title":"What are the expected outcomes?","text":""},{"location":"public/other/learn-quickly/#how-am-i-going-to-organize-my-learning-project","title":"How am I going to organize my learning project?","text":""},{"location":"public/other/learn-quickly/#write-a-clear-vision","title":"Write a Clear Vision","text":"<p>For the vision, define your project and use the Objective Key Results (OKRs) framework. If you aren\u2019t familiar, this was popularized by the book \u201dMeasure What Matters\u201d and is used at companies like Google and Intuit.</p> <p>First, define what you expect to achieve.</p> <p>In my Language learning project, I wrote:</p> <p>Learn Language deeply and become the [Company] \u201cin-house expert\u201d</p> <p>That will be your Objective. Next, figure out how you\u2019re going to measure it. We refer to these as the Key Results. Continuing with my previous project, I wrote:</p>"},{"location":"public/other/learn-quickly/#read-programming-language-by-boris-cherny","title":"Read \u201cProgramming Language\u201d by Boris Cherny","text":""},{"location":"public/other/learn-quickly/#read-the-official-language-handbook","title":"Read the Official Language Handbook","text":""},{"location":"public/other/learn-quickly/#produce-small-code-examples-for-all-concepts","title":"Produce small code examples for all concepts","text":""},{"location":"public/other/learn-quickly/#contribute-to-language-the-language","title":"Contribute to Language, the language","text":""},{"location":"public/other/learn-quickly/#contribute-to-language-cheatsheetsreact-language-cheatsheet","title":"Contribute to Language-cheatsheets/react-Language-cheatsheet","text":""},{"location":"public/other/learn-quickly/#dont-rush-through-this-part","title":"Don\u2019t rush through this part.","text":"<p>Spend some time thinking about your objective and what you need to achieve to get there. Completing your key results should allow you to confidently say you\u2019ve completed your objective.</p> <p>With this vision in mind, you now have clarity on it means when you say \u201clearn [X]\u201d and you know what you expect to achieve.</p>"},{"location":"public/other/learn-quickly/#establish-a-timeframe","title":"Establish a Timeframe","text":"<p>You don\u2019t want to be racing on this map forever. You need to be realistic and ask yourself how much time you have for this. Estimating time to complete tasks is hard. You can use what I like to call the Timeframe Formula:</p> <p>Take the length of months you want to work on this, multiple by 4 to give the amount in weeks. Then multiple it by the number of hours per week that you want to dedicate.</p> <p>For example, when I did a similar project, I gave myself 3 months with 8 hours per week. Using the Timeframe Formula, you get:</p> <p>3 months x 4 weeks/month x 8 hours/week = 96 hours total.</p> <p>You now have your timeframe. Use this to set expectations on how much time you plan to dedicate each week.</p>"},{"location":"public/other/learn-quickly/#build-a-timeline","title":"Build a Timeline","text":"<p>The next thing you need to add to your map is a timeline. Think of this as a week by week calendar. The timeframe answers the question of how long and the timeline answers the what will I do each week. It helps you think less because you will already know what to do for that week. It won\u2019t be perfect. You may need to readjust, but you will have removed friction.</p>"},{"location":"public/other/learn-quickly/#an-example","title":"An example","text":"<p>Week 1 (June 1)  Programming Language  Chapter 1 - Introduction  Chapter 2 - Language: a 10_000 foot view  Book exercises  Chapter 3 - All About Types  Book exercises  Official Language Handbook  Basic Types  Variable Declarations You know yourself best. Think back to the Timeframe Formula. The example estimated 8hrs/week and 12 weeks in total. Knowing how fast you work (i.e. read, code, etc.), you would adjust accordingly. A complete timeline would have all the weeks filled out.</p>"},{"location":"public/other/learn-quickly/#two-important-tips","title":"Two important tips:","text":""},{"location":"public/other/learn-quickly/#leave-10-buffer-towards-the-end","title":"Leave ~10% buffer towards the end","text":""},{"location":"public/other/learn-quickly/#give-yourself-some-breathing-room","title":"Give yourself some breathing room","text":""},{"location":"public/other/learn-quickly/#life-comes-up-and-you-may-fall-behind-thats-where-the-buffer-comes-in-some-weeks-you-may-find-that-you-complete-everything-in-6-hours-no-need-to-fill-those-two-other-hours-if-you-dont-want-to-reward-yourself-with-rest","title":"Life comes up and you may fall behind. That\u2019s where the buffer comes in! Some weeks, you may find that you complete everything in 6 hours. No need to fill those two other hours if you don\u2019t want to. Reward yourself with rest.","text":"<p>With a timeline, you are good to go!</p>"},{"location":"public/other/learn-quickly/#keep-it-organized","title":"Keep it Organized","text":"<p>You want to stay organized on this journey. That means a place to keep track of your timeline, log any notes or things you learn, and have visual indicators for the progress you\u2019re making.</p> <p>I use Notion for this because it supports project management well. I make a place for the project. I add the timeline and use checkboxes. Then, I check them off as I go and take notes as I\u2019m learning.</p> <p>Here is a non-exhaustive list of tools you might want to check out:</p>"},{"location":"public/other/learn-quickly/#notion","title":"Notion","text":""},{"location":"public/other/learn-quickly/#trello","title":"Trello","text":""},{"location":"public/other/learn-quickly/#asana","title":"Asana","text":""},{"location":"public/other/learn-quickly/#github-projects","title":"GitHub Projects","text":""},{"location":"public/other/learn-quickly/#basecamp","title":"Basecamp","text":"<p>You could also use an analog tool such as a pen and paper.</p>"},{"location":"public/other/learn-quickly/#stay-on-track_1","title":"Stay on Track","text":"<p>Now that we have our map, we are ready for the next phase: stay on track.</p> <p>In this phase, the goal is to focus on developing the systems that will help you stay accountable, build momentum, share with others and, stay focused.</p>"},{"location":"public/other/learn-quickly/#keep-yourself-accountable","title":"Keep Yourself Accountable","text":"<p>You always want to stay accountable for your project. Think of this as your race crew. They make sure you\u2019re fueled, your tires are rotated, you\u2019re hydrated, and you\u2019re ready to finish the race. We want a similar type of support and accountability.</p> <p>It could be:</p> <p>a group of friends a family member a friend online All you need is at least one person with whom you can share updates. They don\u2019t have to know Language or even know how to code. But they do need to be someone with whom you can check-in regularly. For Language, I recommend looking for 2-3 people who will join you in your Language journey. I would post:</p> <p>on Twitter, using the #100DaysOfCode or #CodeNewbie hashtags on Dev.to, using the #Language and #discuss tags to start a discussion and share your project on the Language Discord For your own project, come up with a similar list of options. Explore them all. See where you find the most success and stick with it. 2-3 people is ideal, but at least 1 other person works fine.</p>"},{"location":"public/other/learn-quickly/#build-momentum","title":"Build Momentum","text":"<p>You want momentum. Momentum will keep you going on the track and heading towards the finish line.</p> <p>Think small wins, milestones and success spirals.</p> <p>Small wins are the little accomplishments that we oftentimes take for granted. Examples are things like learning a new word or understanding a concept. Celebrate these.</p> <p>Milestones are the next step up. These can either be date-based or achievement-based. Date-based would be hitting the 1-month mark in your 3-month timeframe for your learning project. Achievement-based would be finishing one of your key results. Either way, these are things to be celebrated and help you sustain the momentum.</p> <p>Success spiral is a term I first heard in Motivation Hack by Nick Winter. It\u2019s the idea that you set yourself up for success for starting small and moving outwards, like a spiral.</p> <p>In this case with Language, maybe you say, \u201cI\u2019m going to write one line of Language a day.\u201d Sounds trivial, right? Good, it should. You start there, establish the habit, then build upwards and outwards. Upwards meaning you continue doing it every day. Outwards meaning you increase the lines of code (without losing the habit).</p>"},{"location":"public/other/learn-quickly/#share-with-others","title":"Share with Others","text":"<p>Yoda quote, \"Always pass on what you have learned.\"</p> <p>One of the most important parts of staying on track is sharing with others and Learning in Public. There are various mediums you can choose from for sharing:</p> <p>Tweets Blog Posts Podcasts Videos Tutorials Courses Any of these ways work - and there are probably more I didn\u2019t list. This will aid your project for a few reasons:</p> <p>Help you retain what you\u2019re learning Build expertise in the area Meet others who are learning When I was learning Language, I tweeted as I learned. Not only did I meet other Language community members, but people corrected me or taught me new things. Towards the end, people started tweeted me asking for Language help. I didn\u2019t always know the answer, but my sharing with others and learning in public helped me build reputation and credibility.</p> <p>I even ended up attracting the attention of an editor for a tech blog who paid me to write a few Language articles. As you can see, it pays to share with others.</p>"},{"location":"public/other/learn-quickly/#keep-your-focus","title":"Keep Your Focus","text":"<p>The last piece I want to touch on for staying on track is keeping your focus. To stay on track, you have to keep yourself focused. The first and foremost is limit your focus. Ideally, learning Language is your main focus. I wouldn\u2019t suggest doing this and learning Rust or another language or something else. Keeping your attention on one project increases the likelihood you\u2019ll stay on track.</p> <p>The other thing you might want to try is deep work. An idea by Cal Newport, it\u2019s where you create an environment that lets you focus on that project for a certain amount of time (such as 1 hour or more) without distractions. Figure out when you\u2019re most productive. For me, it\u2019s in the morning before work. I wake up early, go through my routine, and then spend some time learning.</p> <p>Lastly, find tools to help you stay focused. I am a big fan of the Pomodoro Technique. I have an app called Stretchly that reminds me to take a 20-second break every 20 minutes and a 5-minute break every 40 minutes. This allows me to focus for that period and then rest. It then repeats itself like a cycle.</p>"},{"location":"public/other/learn-quickly/#cross-the-finishline_1","title":"Cross the Finishline","text":"<p>The last and final leg of this learning journey is cross the finishline. You should make it there and feel accomplished. Here, you want to use systems that will help you practice, build confidence, remember vocabulary, and go for depth.</p>"},{"location":"public/other/learn-quickly/#practice","title":"Practice","text":"<p>Learning means nothing without practice. With your new Language knowledge, you can build projects or contribute to open source. This is where the application phase of the learning cycle appears.</p> <p>It doesn\u2019t matter what you build, but that the act of building happens.</p> <p>When I was learning, I followed a tutorial to build a tiny compiler. It was written in JavaScript, but I did it in Language. This forced me to figure out things on my own.</p> <p>If you\u2019re learning something related to code, another idea is contributing to open source. </p> <p>Practice is where you learn the most.</p>"},{"location":"public/other/learn-quickly/#build-confidence","title":"Build Confidence","text":"<p>You want to build confidence in whatever you\u2019re learning. This will make you feel comfortable using your new knowledge.</p> <p>In the case of Language, you want to build Language Confidence. There are various ways to do this including:</p>"},{"location":"public/other/learn-quickly/#teaching-others","title":"teaching others","text":""},{"location":"public/other/learn-quickly/#sharing-as-we-said-before","title":"sharing (as we said before)","text":""},{"location":"public/other/learn-quickly/#reviewing-what-youve-learned","title":"reviewing what you\u2019ve learned","text":""},{"location":"public/other/learn-quickly/#helping-others","title":"helping others","text":""},{"location":"public/other/learn-quickly/#many-of-these-things-translate-over-to-other-topics-as-well","title":"Many of these things translate over to other topics as well.","text":"<p>The main thing is to feel confident in using your new skills or knowledge.</p>"},{"location":"public/other/learn-quickly/#dont-skip-vocab","title":"Don\u2019t Skip Vocab","text":"<p>Vocabulary is often overlooked. Don\u2019t skip out on it! It helps build confidence and it will solidify what you know. It\u2019s also a great tool to fight imposter syndrome. Knowing the vocabulary will allow you to build expertise.</p> <p>To learn and remember vocabulary, use a spaced-repetition system such as Anki. I used it with my Language learning project. You can use it to remember things such as:</p>"},{"location":"public/other/learn-quickly/#terminology","title":"terminology","text":""},{"location":"public/other/learn-quickly/#concepts","title":"concepts","text":""},{"location":"public/other/learn-quickly/#patterns","title":"patterns","text":""},{"location":"public/other/learn-quickly/#syntax","title":"syntax","text":"<p>Take the thing you\u2019re learning, break it down into pieces and then build a list of vocabulary or concepts around those. Study these. This will benefit you in the long-run.</p>"},{"location":"public/other/learn-quickly/#go-for-depth","title":"Go for Depth","text":"<p>The last thing in this phase is going for depth. Deep learning leads to deep understanding.</p> <p>There are two techniques you can use to deepen what you learn. The first is called the Feynman Technique. Take a concept you are learning, such as type inference in Language and explain it as you would to a seven-year-old.</p> <p>The idea is that if you can\u2019t do that, you don\u2019t know the concept well enough.</p> <p>Note: the age of the person to whom you\u2019re explaining your learning concept can vary. Focus on being able to explain something you understand to someone with little knowledge or context.</p> <p>The second technique I want to point out is called Ultralearning. In his book, Scott Young explains Ultralearning as,</p> <p>a strategy for aggressive, self-directed learning.</p> <p>Scott Young</p> <p>Think of it as taking something, being aggressive with how much or how fast you can learn it, and diving deep. You can use this with your learning projects.</p> <p>While you\u2019re learning, take notes of questions you have or concepts you don\u2019t quite understand. Then at the end of your project, see if those questions remain. If they do, start a new learning project and focus on answering those questions.</p> <p>As you can imagine, if you do this with a topic, you\u2019ll have several learning projects and soon start to develop expertise in this subject. It\u2019s very powerful.</p>"},{"location":"public/other/learn-quickly/#summary","title":"Summary","text":"<p>The most important takeaway is this: use systems to help you learn better and faster. They will serve as your map, keep you on track and help you cross the finishline. If you were to do this with a programming language like Language, you would develop a proficiency, hopefully even expertise in the language.</p> <p>The next steps are to go out and use your new knowledge in the world! See what you can build. Find ways to help other people.</p> <p>And if you\u2019re ambitious, I challenge you to go deeper after you finish your first learning project. Use this framework and do another round of it. See how much you can learn! You\u2019ll never know the opportunities that may show up as a result.</p> <p>Tweak this learning framework to your liking and try it out on other projects - even non-technical ones. Adjust as needed. See how it works.</p> <p>Special thanks to my friends Sean, swyx, and Prince for reviewing and giving feedback.</p>"},{"location":"public/other/main/","title":"Main","text":"<p>Video Guide-Website</p> <p>Roadmap</p> <p>learn-quickly</p>"},{"location":"public/other/roadmap/","title":"RoadMap","text":"<p>I had a lot of fun making this a challenge for myself! I feel more motivated to continue contributing to Rust Awesome</p> <p>What\u2019s next?</p> <p>Next up in my Ultralerning Plan is to:</p> <p>build and ship some projects in Rust</p> <p>to Deep in blockchain and substrate framework</p>"},{"location":"public/programming/armanriazi-movies-reactjs/","title":"armanriazi-movies-reactjs","text":"<p>online: armanriazi-movies-reactjs.herokuapp</p> <p>Improved speed and performance.</p> <p>I developed a sample-project base on [[Reactjs]], [[Nodejs]], [[Couchdb]], [[IBM]] ,and [[Cloud]], on [[Heroku]] [[CICD]].</p> <p>I wanted to start work on reactjs that I think it has a main components include grid, list, search, connected to db. </p> <p>I have got satisfied with mix of couchdb and reactjs! Why not! both of them are good choice for frontend and database with o/i json.</p> <p>Github Repository</p> <p></p> <p>[[Github-ArmanRiazi]]</p>","tags":["github","couchdb","ibm","reactjs","nodejs","expressjs","api","restapi","cloud","sample","cicd","devops"]},{"location":"public/programming/armanriazi-vidly-api/","title":"Vidly RestAPI","text":"<p>online: armanriazi-vidly-api.herokuapp</p> <p>Improved speed and performance.</p> <p>I developed a sample-project base on #expressjs, [[Restapi]], [[Api]], [[Nodejs]], [[Couchdb]], [[IBM]] ,and [[Cloud]], on [[Heroku]] [[CICD]].</p> <p>I wanted to start work on reactjs that I think it has a main components include grid, list, search, connected to db. </p> <p>I have got satisfied with mix of couchdb and reactjs! Why not! both of them are good choice for frontend and database with o/i json.</p> <p>Example APIs</p> <p>Query Genre: https://armanriazi-vidly-api.herokuapp.com/api/genres/name/comedy</p> <p>Token Generate: https://armanriazi-vidly-api.herokuapp.com/api/auth/yourRefToken</p> <p>Github Repository</p> <p></p> <p>[[Github-ArmanRiazi]]</p>","tags":["github","couchdb","ibm","reactjs","nodejs","expressjs","nodejs","api","restapi","cloud","sample","cicd","devops"]},{"location":"public/programming/programming/","title":"Arman Riazi","text":"Don't miss it <p>Intoxicating and deceptive microservices based on Nestjs framework</p> <p>Certificates_and_seen_toturials</p> Programming CertificatesPassed Self-Study Tutorials <ul> <li>programming-certificates</li> </ul> <ul> <li>programming-tutorials</li> </ul> <p>Experiences</p> 20242022-20232020-20212019-20202016-2019Until_2016 <ul> <li>NestJS</li> </ul> <ul> <li> <p>Rust</p> </li> <li> <p>Monorepo</p> </li> </ul> <ul> <li> <p>Solidity-SmartContract-1 </p> </li> <li> <p>Solidity-SmartContract-2 </p> </li> <li> <p>Java-Cloudsim</p> </li> </ul> <ul> <li> <p>Reactjs-API-CouchDB</p> </li> <li> <p>API-CouchDB-IBMCloud</p> </li> <li> <p>Java-Cloudsim </p> </li> </ul> <ul> <li> <p>2016-2019</p> </li> <li> <p>Advanced .Net/Core</p> </li> </ul> <ul> <li>Until-2016</li> </ul>","tags":["rust","programming","codebase","github"]},{"location":"public/programming/learning/programming-certificate/","title":"Programming","text":""},{"location":"public/programming/learning/programming-certificate/#2024","title":"2024","text":"Expert Priod By Supported By Inquiry Documents Mastering PostgreSQL Databases 12H educative &amp; SkillUP educative/simplilearn.com 1 C,G Design patterns,oop, and ddd 45H educative educative.com 1, 2, 3 C,G"},{"location":"public/programming/learning/programming-certificate/#2023","title":"2023","text":"Expert Priod By Supported By Inquiry Documents Become-A-Rust-Professional 138H educative.io educative.io 1,2,3,4 C-Boundled Substrate-For-Analog(Rust, Java General Code) Hands-On Lab Karat Karat, TripleByte 1 G Clean Code 11H EhsanGazar(From Melbourne) Maktabkhooneh.org MK-QJ6954 MB-PDF Rust-(Solidity-JS in Blockchain) 9H Alison.com Alison.com Boundled Link Graph-LinkedList-BinaryTree 6H olympus.mygreatlearning.com mygreatlearning.com Boundled Link"},{"location":"public/programming/learning/programming-certificate/#projects","title":"Projects","text":"<p>This table is significant projects that I fulfilled so far. Frontend and backend codes that writted alone. I can not share so many projects that I did it for a company.</p> Project Lang/Frameworks Duration Reference Customize Cloudsim framework to create scientific workflows on my suggested arch based on vm-container to run written ACO Algo([[master]] thesis) Pure Java 2Y Cloudsim-Workflow-Function-Container-ACO Scratch blockchain(POW) Pure Rust 2M Rust-Scratch-Blockchain an enterprise project in the field of energy that I developed 2017-18 Netcore, Apollo GraphQL, Swagger, ExpressJS, Angular 4 1.6Y NetCore-GraphQl-RestApi-Angular Rust-all-in-one-projects Pure Rust 4M Rust-Scratch-Blockchain Rust-all-in-one Private-Repo-Collection of best practices 6 Books + my self-MDBook 4M Rust-Scratch-Blockchain Armanriazi-awesome-rust Pure Rust 1Y Rust-Scratch-Blockchain <p>To watch another projects take a look at Programming and Github</p>"},{"location":"public/programming/learning/programming-non-cert-toturials/","title":"Video Toturials Self-Study","text":"<p>Learnt</p> Rust Books Epub On Desktop 2023Video courses 2019-2022Video courses 2010-2019 <p>I prefer to find important seasons that related to my work specially blockchain. I gather significant info on my desktop(offline documentation) * Sendil Kumar Nellaiyapen - Practical WebAssembly_ Explore the fundamentals of WebAssembly programming using Rust-Packt Publishing (2022) * Rust-In-Action Tim McNamara * Mastering In Rust - Rahul Sharma * Rust Essentials - Second Edition - Ivo Balbaert * Rust Programming Cookbook - Claus Matzinger * Hands-On Data Structures and Algorithms with Rust - Claus Matzinger</p> <ul> <li>There are some integration on language and technologies so it is a part of blockhchain toturials. Blockchain-Toturials </li> </ul> <ul> <li>Below list shows my external HD(archived)</li> <li>After all of them I just think I dunno anymore</li> <li>I still have way to go</li> </ul>"},{"location":"public/programming/learning/programming-non-cert-toturials/#followed-youtube-channels","title":"Followed Youtube Channels","text":"<ul> <li>Everything about Rust Programming</li> <li>I do not remember there are so many playlists</li> </ul>"},{"location":"public/programming/learning/programming-non-cert-toturials/#resources","title":"Resources","text":""},{"location":"public/programming/microsoft/dotnet/","title":".Netcore Design Patterns & OOP & DDD","text":""},{"location":"public/programming/microsoft/dotnet/#certificates","title":"Certificates","text":"<ul> <li>Design Patterns &amp; OOP &amp; DDD</li> </ul>"},{"location":"public/programming/microsoft/dotnet/#github-projects","title":"Github Projects","text":"<p>Applicant-Portal</p> <p>Cryptography.NetCore </p> <p>.NET-Core-Microservices(NonProduction)</p> <p>NopCommerce</p> <p>eShopOnContainers</p>"},{"location":"public/programming/monorepo/monorepo/","title":"Monorepo","text":""},{"location":"public/programming/monorepo/monorepo/#digital-multimedia","title":"Digital Multimedia","text":""},{"location":"public/programming/monorepo/monorepo/#teaching-smart-builder-via-monorepo","title":"Teaching Smart Builder via Monorepo","text":""},{"location":"public/programming/nestjs/nestjs/","title":"NestJS","text":""},{"location":"public/programming/nestjs/nestjs/#microservice","title":"Microservice","text":""},{"location":"public/programming/nestjs/nestjs/#implementation","title":"Implementation","text":"Vimeo 16min  [Main Link](https://vimeo.com/883191398)"},{"location":"public/programming/nestjs/nestjs/#installation","title":"Installation","text":"<pre><code>$ pnpm install\n</code></pre>"},{"location":"public/programming/nestjs/nestjs/#running-the-app","title":"Running the app","text":"<pre><code># development\n$ pnpm run start\n\n# watch mode\n$ pnpm run start:dev\n\n# production mode\n$ pnpm run start:prod\n</code></pre>"},{"location":"public/programming/nestjs/nestjs/#test","title":"Test","text":"<pre><code># unit tests\n$ pnpm run test\n\n# e2e tests\n$ pnpm run test:e2e\n\n# test coverage\n$ pnpm run test:cov\n</code></pre>"},{"location":"public/programming/nestjs/nestjs/#environment","title":"Environment","text":"<pre><code>NEST_DEBUG = true\n</code></pre>"},{"location":"public/programming/nestjs/nestjs/#watch-directory","title":"Watch Directory","text":"<p>The strategy for how entire directory trees are watched under systems that lack recursive file-watching functionality.</p> <ul> <li> fixedPollingInterval: Check every directory for changes several times a second at a fixed interval.</li> <li> dynamicPriorityPolling: Use a dynamic queue where less-frequently modified directories will be checked less often.</li> <li> useFsEvents (the default): Attempt to use the operating system/file system\u2019s native events for directory changes.</li> </ul> <pre><code>\"compilerOptions\":{\n\"watchOptions\": {\n    \"watchFile\": \"fixedPollingInterval\"\n  }\n}  \n</code></pre>"},{"location":"public/programming/nestjs/nestjs/#circular-dependency-packages","title":"Circular Dependency Packages","text":"<p><code>Nest can't resolve dependencies of the &lt;provider&gt; (?).</code></p> <p>DependenciesMetaInjected</p> <pre><code>{\n  \"name\": \"card\",\n  \"dependencies\": {\n    \"@nestjs/core\": \"workspace:10.0.0\",\n    \"react\": \"16\"\n  },\n  \"dependenciesMeta\": {\n    \"@nestjs/core\": {\n      \"injected\": true\n    }\n  }\n}\n</code></pre>"},{"location":"public/programming/nestjs/nestjs/#nestjs-microservices","title":"Nest.js Microservices","text":"<p>This repository contains 3 Nest.js projects:</p> <ul> <li>http-api-gateway</li> <li>orders-microservice</li> <li>users-microservice</li> </ul> <p>You can find the video tutorial for this project here</p>"},{"location":"public/programming/nestjs/nestjs/#getting-started","title":"Getting Started","text":"<p>Want to set this up locally on your own? The best way to set this project up is by using Docker.</p> <ol> <li> <p>Pull down this repository and make sure you install each project's dependencies by running <code>npm run install</code>.</p> </li> <li> <p>Ensure Docker is running then run <code>docker-compose up --build</code> to build the container, and images, and pull down the Postgres and nats images from Docker.</p> </li> <li> <p>Verify that all services are up and running. The HTTP Server runs on port 3000.</p> </li> </ol>"},{"location":"public/programming/nestjs/nestjs/#application-structure","title":"Application Structure","text":""},{"location":"public/programming/nestjs/nestjs/#features","title":"Features","text":"<ul> <li> Microservice Architecture</li> <li> Monorpo</li> <li> TypeORM</li> <li> CQRS</li> <li> JWT</li> </ul>"},{"location":"public/programming/nestjs/nestjs/#http-api-gateway","title":"HTTP API Gateway","text":"<p>This is a hybrid application that uses both HTTP and NATS as sources to listen to requests. This is the entry point to the entire platform. It forwards the request by publishing a message to the NATS server, and then the NATS server distributes it to its subscribers.</p> <p>Any HTTP API endpoints should be defined in this project.</p>"},{"location":"public/programming/nestjs/nestjs/#orders-microservice","title":"Orders Microservice","text":"<p>This is a sample microservice that has a createOrder event handler from the NATS server whenever it is triggered. It will create a order record and save it to the database.</p>"},{"location":"public/programming/nestjs/nestjs/#users-microservice","title":"Users Microservice","text":"<p>This is a user microservice that has a createUser event handler from the NATS server whenever it is triggered. It will create a user record and save it to the database.</p>"},{"location":"public/programming/nestjs/nestjs/#monorepo","title":"Monorepo","text":"<p>Config file for subprojects to build independent of the other projects or monorepo building. Before building with Monorepo, we must build sub-projects independently based on the following configuration.</p> <pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\",\n    \"declaration\": true,\n    \"removeComments\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"target\": \"ES2021\",\n    \"sourceMap\": true,\n    \"outDir\": \"./dist\",\n    \"baseUrl\": \"./\",\n    \"incremental\": true,\n    \"skipLibCheck\": true,\n    \"strictNullChecks\": false,\n    \"noImplicitAny\": false,\n    \"strictBindCallApply\": false,\n    \"forceConsistentCasingInFileNames\": false,\n    \"noFallthroughCasesInSwitch\": false\n  },\n  \"watchOptions\": {\n    \"watchFile\": \"dynamicPriorityPolling\",\n    \"watchDirectory\": \"dynamicPriorityPolling\",\n    \"excludeDirectories\": [\n      \"**/node_modules\",\n      \"dist\"\n    ]\n  }\n}\n</code></pre>"},{"location":"public/programming/nestjs/nestjs/#support","title":"Support","text":"<p>Nest is an MIT-licensed open-source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.</p>"},{"location":"public/programming/nestjs/nestjs/#license","title":"License","text":"<p>Nest is MIT licensed.</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/","title":"Understanding the Rust Ecosystem","text":"<p>Last updated: 06/15/2020(Copied)</p> <p></p> <p>Rust, a systems-programming language, which prides itself on being Stack Overflow\u2019s \u201cmost loved language for five years in row\u201d and GitHub\u2019s second fastest growing (235% 2018-2019) has gained popularity both at companies like Amazon, FB, Discord and externally within the programming community.</p> <p>For part of my job, I have been focused on developing my own understanding of the space. I work within the DevTools pillar and focus primarily on programming languages. My main priority for H1 of 2020 has been Rust. The goal of this article is:</p> <ul> <li>To paint a high-level overview of the ecosystem</li> </ul> <p>The article covers various aspects of the ecosystem including community, companies using the language, selling points, etc.</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/#overview","title":"Overview","text":"<p>One of the hardest parts of understanding a programming language is setting the boundaries for what you encapsulate as part of and not part of the ecosystem. I gathered input coworkers and mentors in order to set the criteria for this project. For our purposes, I choose to limit it to the following areas, which you\u2019ll see below. For each section, you can expect:</p> <ul> <li>A brief description of how I defined the section</li> <li>Key highlights from the ecosystem for that area of the ecosystem</li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#academic-research","title":"Academic Research","text":"<p>Things that fall under this category might be research papers, academic presentations, and anything related. It was difficult to find much in this area, but here are a few highlights:</p> <ul> <li>Memory-Safety Challenge Considered Solved? An Empirical Study with All Rust CVEs</li> <li>What can the programming language Rust do for astrophysics?</li> <li>RustBelt: Securing the Foundations of the RustProgramming Language</li> <li>Rust-Like Borrowing with 2<sup>nd</sup>-Class Values (Short Paper)</li> <li>Safe Systems Programming in Rust:The Promise and the Challenge</li> <li>Fearless Concurrency? Understanding Concurrent Programming Safety in Real-World Rust Software</li> </ul> <p>As you can tell from skimming the headings, researchers are looking at Rust\u2019s use cases, security, memory management, type-safety and concurrency. It\u2019s unfortunate there isn\u2019t an easy way to stay on top of academic research within Rust.</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/#demographics","title":"Demographics","text":"<p>When you look at the programming language, how do you know who is using it? What industries do they work in? Fortunately, the Rust Survey 2019 Results provides insight related to demographics. Based on the results, here are the key highlights:</p> <ul> <li>Respondents\u2019 top five languages: English, Chinese, German, French and Japanese</li> <li>Top five industries using Rust: Backend Web Applications, Distributed Systems, Embedded Devices, IT and Network Programming</li> <li>Top three titles for Rust users: Programmer/Software Engineer, Systems Architect, Web Developer/Front End Developer</li> </ul> <p>It\u2019s unfortunate that we do not have more information related to demographics such as gender, ethnicity, race, etc. There was an attempt to gather some of this information in the 2016 survey. Know that this section contains a small glimpse into the people of the Rust and is far from complete or representative of the ecosystem.</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/#community","title":"Community","text":"<p>Community itself is a huge category. I tried my best to break it into subcategories for things that might fit here.</p> <p>In general, think of this area as the various places where members of the community congregate (online and in-person), groups who write code, and foundations. These are a combination of chat platforms, but also places where updates are shared with the community. Here are some worth noting:</p> <ul> <li>Chat Platforms<ul> <li>Discord (35,597 members total)<ul> <li>The Rust Programming Language (25,135 members)</li> <li>Rust Programming Language Community Server (10,462 members)</li> </ul> </li> <li>Rust lang Slack (3,046 people)</li> <li>Rust Team Zulip (655 people) (mainly focused on people who work on Rust itself)</li> </ul> </li> <li>Conferences<ul> <li>FOSDEM</li> <li>RustConf</li> <li>Rusty Days</li> <li>RustFest Netherlands</li> <li>Rust + GNOME Hackfest</li> <li>Rust Latam</li> <li>RustLab</li> <li>Oxidize</li> <li>List of 2020 events on the Rust lang blog</li> </ul> </li> <li>Core contributors<ul> <li>Governance - all the different core team members associated with each team</li> <li>GitHub Rustlang org members</li> <li>GitHub committers - over 2k people have contributed to /rust repo</li> <li>Rust team alumni - people who worked on a Rust team previously</li> </ul> </li> <li>Forums<ul> <li>Users forum (14.2k)</li> <li>Internals forum (6.8k)</li> <li>r/rust -Reddit (100k people)</li> </ul> </li> <li>Meetups<ul> <li>Stats (meetups with the topic \u201crust\u201d)<ul> <li>73,706 members</li> <li>1,749 interested</li> <li>204 Meetups</li> <li>145 cities</li> <li>42 countries</li> </ul> </li> <li>Groups (not all listed, some highlights)<ul> <li>Desert Rust (Phoenix, AZ)</li> <li>Minneapolis Rust Meetup</li> <li>Rusty Bay Area Meetup</li> <li>Rust Bangalore</li> <li>Rust Berlin</li> <li>Rust in Blockchain</li> <li>Rust Los Angeles</li> <li>Rust London User Group</li> <li>Rust Dev in Mountain View Meetup</li> <li>Rust Denver</li> <li>Rust NYC</li> <li>Rust Nairobi</li> <li>Rust Paris</li> <li>San Diego Rust</li> <li>Seattle Rust Meetup</li> <li>Utah Rust</li> </ul> </li> </ul> </li> <li>Miscellaneous<ul> <li>RFCs (2.9k stars) - where technical decisions are made in regards to Rust</li> <li>This Week in Rust - weekly newsletter</li> </ul> </li> <li>Programs<ul> <li>Rust\u2019s Reach (currently on hold due to lack of funding and people) - \u201cmentorship like program between participants from URGs and Rust team members\u201d</li> <li>Rust Bridge (1 chapter) - \u201ca workshop focused on getting underrepresented people with a background in another programming language to learn Rust and join the community.\u201d</li> </ul> </li> </ul> <p>*These stats were taken on 5/19/2020</p> <p>As you can see, the community category extends itself across many platforms and mediums online. It\u2019s easy to overwhelm oneself with all the places you can go to get involved. The beautiful part is that there is no shortage of finding ways to meet others within the community.</p> <p>*For the data in the \u201cMeetups &gt; Stats\u201d category, you\u2019ll notice that it includes some meetups that are not specifically for Rust so take that number with a grain of salt.</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/#companies","title":"Companies","text":"<p>It would be impossible to list all the companies that use Rust. This is a sub-selection of notable companies (more well-known) that are using or investing in Rust, ideally along with articles where they share how they\u2019re using it or helping the ecosystem:</p> <ul> <li>Amazon<ul> <li>AWS is sponsoring the Rust programming language - AWS Open Source Blog (October 2019)</li> <li>\u201c\u2026AWS staff open-sourced a virtualization technology named Firecracker that was coded primarily in Rust\u201d - zdnet.com article (October 2019)</li> <li>\u201c_As Rust starts to take up a larger chunk of Amazon\u2019s backend code, the company is making sure the project has the means to continue to evolve and fix security issues.\u201d _-_ _zdnet.com article (October 2019)</li> <li>AWS sponsors RustConf - AWS Open Source Blog (2018 - 2020)</li> </ul> </li> <li>Apple<ul> <li>Rust for server-side Linux on Apple Cloud Traffic (March 2020)</li> </ul> </li> <li>Atlassian (makers of Jira)<ul> <li>Use Rust in the backend for analyzing terabytes of source code</li> </ul> </li> <li>Cloudflare<ul> <li>Cloudflare uses Rust in production for WebAssembly edge computing as well as a lot of foundational infrastructure (2018-2019)</li> </ul> </li> <li>Discord<ul> <li>\u201cWhy Discord is switching from Go to Rust\u201d - (February 2020) 11.9K claps</li> <li>\u201cUsing Rust to Scale Elixir for 11 Million Concurrent Users\u201d - (May 2019) 6.4K claps</li> </ul> </li> <li>Dropbox<ul> <li>Dropbox is highlighted on the /production page of the rust-lang.org website - (currently - March 2020)</li> <li>Go-ing to Rust: Optimizing Storage at Dropbox - (November 2017)</li> <li>Dropbox is mentioned on official Rust lang blog - (May 2017)</li> <li>\u201cThe Epic Story of Dropbox\u2019s Exodus From the Amazon Cloud Empire\u201d - (March 2016)</li> </ul> </li> <li>Facebook<ul> <li>Developers have named Rust their most-loved programming language five years in a row. Here\u2019s why developers at Facebook, Dropbox, and Amazon all adore it - (June 2020)</li> <li>The Relay Team is experimenting with a \u201crewrite of the Relay compiler in Rust\u201d (May 2020)</li> <li>Mononoke, the new Mercurial backend, was written from scratch in Rust</li> </ul> </li> <li>GitHub<ul> <li>GitHub donating VMs for GitHub Actions (April 2020)</li> </ul> </li> <li>Google<ul> <li>Rust makes up increasingly large parts of Google\u2019s Fuchsia operating system</li> <li>Chrome OS\u2019s virtualization infrastructure and several other components are in Rust</li> <li>Android uses Rust</li> <li>Chromium is beginning to adopt Rust</li> <li>Google released an \u201cunofficial\u201d project called <code>[tarpc](https://github.com/google/tarpc)</code> \u201cAn RPC framework for Rust\u201d</li> </ul> </li> <li>Microsoft<ul> <li>Microsoft featured on /sponsors page</li> <li>\u201cMicrosoft opens up Rust-inspired Project Verona programming language on GitHub\u201d - (Jan 2020)</li> <li>\u201cMicrosoft looks to Rust language to beat memory vulnerabilities\u201d - (Dec 2019)</li> <li>\u201cMicrosoft Exploring Rust as the Solution for Safe Software\u201d - (Nov 2019)</li> <li>Azure Pipelines sponsoring Rust - (Oct 2019)</li> <li>Microsoft looking into Rust for security reasons. - (July 2019)</li> <li>\u201cMicrosoft eyes Mozilla\u2019s Rust to obliterate C++ memory security flaws\u201d - (July 2019)</li> <li>Azure IoT Edge has been using Rust since at least 2018</li> </ul> </li> <li>Mozilla<ul> <li>Rust is used in Firefox through a project called Oxidation</li> <li>Mozilla is writing a browser written in Rust called Servo</li> <li>\u201cRust 2018 is here\u2026 but what is it?\u201d - (Dec 2018)</li> <li>\u201cMozilla binds Firefox\u2019s fate to the Rust language\u201d - (Feb 2017)</li> <li>\u201cProject for porting C to Rust gains Mozilla\u2019s backing\u201d - (Oct 2016)</li> </ul> </li> <li>npm<ul> <li>Performance critical registry service architecture is Rust</li> </ul> </li> <li>Reddit<ul> <li>Uses Rust for comment processing</li> </ul> </li> <li>Twitter<ul> <li>Build team has been using Rust in production for ~3 years and intend for it to make up a large portion of their codebase going forward</li> </ul> </li> <li>Yelp<ul> <li>Yelp is featured under the \u201cRust in production\u201d section of rust-lang.org, they talk about how they use it in this talk - (Aug 2018)</li> </ul> </li> <li>Honorable Mentions<ul> <li>There is a list of production users on the rust-lang.org website</li> <li>\u201cA Snapshot of Rust\u2019s Popularity in July 2018\u201d</li> <li>Nike using Rust</li> </ul> </li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#language","title":"Language","text":"<p>Think core library, compiler, type system. Basically all the code that makes up the language and some of the tools that help with writing code in Rust.</p> <ul> <li>Books &amp; References<ul> <li>Asynchronous Programming In Rust Book</li> <li>Command Line Applications in Rust</li> <li>The Rust Programming Language Book</li> <li>The Cargo Book - info about the rust package manager</li> <li>The Rustonomicon Book - the dark arts of unsafe Rust</li> <li>The Rust Reference Book</li> <li>Rust Compiler Error Index - book on all the rust compiler errors</li> <li>rustdoc Book - all about rustdoc and writing documentation in Rust</li> <li>std - standard library docs</li> </ul> </li> <li>Code &amp; DevTools<ul> <li>Cargo the package manager + build system</li> <li>Core language</li> <li>Rust-clippy - official linter</li> <li>Rustfmt - official formatter</li> <li>rustc - the Rust compiler (inside the core language)</li> </ul> </li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#language-frameworks","title":"Language Frameworks","text":"<p>What would a programming language be without frameworks? Thankfully, the community resource rust-web-framework-comparison made this research easy. Here is a long list:</p> <ul> <li>Client frameworks<ul> <li>actix-web (homepage / repository / api docs)</li> <li>reqwest (- / repository / documentation)</li> <li>hyper (homepage / repository / documentation)</li> <li>jsonrpc (- / repository / documentation)</li> </ul> </li> <li>Frontend frameworks (WASM)<ul> <li>stdweb ( - / repository / documentation ) A standard library for the client-side Web</li> <li>yew ( homepage / repository / documentation ) - A frontend framework inspired by Elm and React (based on stdweb)</li> <li>percy ( homepage / repository / - ) - A modular toolkit for building isomorphic web apps</li> <li>seed ( homepage / repository / - ) - A Rust framework for creating web apps</li> <li>draco ( - / repository / documentation ) - A frontend framework inspired by Redux and Elm</li> <li>smithy (homepage - / repository / - documentation ) - A front-end framework</li> <li>squark ( - / repository / documentation ) - Rust frontend framework, for web browser and more.</li> <li>willow ( homepage - / repository / - ) - A frontend framework inspired by Elm</li> <li>dodrio ( - / repository / documentation ) - A fast, bump-allocated virtual DOM library.</li> <li>dominator ( - / repository / documentation - Zero cost declarative DOM library using FRP signals for Rust!.</li> <li>mika ( homepage / repository / - ) - A signal-based framework for building front-end app, it tries to help, but may cause annoyances.</li> </ul> </li> <li>Server frameworks<ul> <li>actix-web (homepage / repository / documentation / user guide)</li> <li>gotham (homepage / repository / documentation / examples)</li> <li>iron (homepage / repository / documentation)</li> <li>nickel (homepage / repository / documentation)</li> <li>rocket (homepage / repository / documentation)</li> <li>rouille ( - / repository / documentation)</li> <li>Thruster ( - / repository / documentation / examples)</li> <li>Tide ( - / repository / documentation / examples)</li> <li>tower-web ( - / repository / documentation / examples)</li> <li>warp ( - / repository / documentation / examples)</li> </ul> </li> <li>Static site generators<ul> <li>zola (homepage / repository / documentation)</li> </ul> </li> <li>Templating frameworks<ul> <li>tera (homepage / repository / documentation)</li> <li>mustache (- / repository / documentation)</li> <li>liquid (- / repository / - )</li> <li>handlebars (- / repository / documentation)</li> <li>horrorshow (- / repository / documentation)</li> <li>maud (homepage / repository / documentation)</li> <li>askama (- / repository / documentation )</li> <li>stpl (- / repository / - )</li> <li>ructe (- / repository / documentation )</li> <li>typed-html (- / repository / documentation )</li> </ul> </li> <li>Websocket frameworks<ul> <li>websocket (homepage / repository / documentation)</li> <li>ws-rs (homepage / repository / documentation)</li> <li>tungstenite ( - / repository / documentation)</li> <li>actix-web (homepage / repository / documentation)</li> </ul> </li> </ul> <p>Again, this is a bit overwhelming for a new person learning Rust. It\u2019s difficult to know what to choose. However, it\u2019s also a benefit having the ability to try out various solutions and see what works best.</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/#learning","title":"Learning","text":"<p>Similar to the Community category, learning can be quite difficult to narrow down. I have tried my best to highlight the main areas and a few examples for each category. Know that this list is non-exhaustive and more a brief survey into this area of the ecosystem.</p> <ul> <li>Articles<ul> <li>A collection of notable Rust bloggers</li> <li>Each week, This Week in Rust shares articles</li> <li>Fearless Rust Bloggers</li> <li>Learning Rust - Pascal Precht</li> <li>Read Rust - Rust blog post aggregator</li> <li>Writing an OS in Rust</li> </ul> </li> <li>Books<ul> <li>Programming Rust - O\u2019Reilly Media</li> <li>Rust in Action - Manning</li> </ul> </li> <li>Bootcamps<ul> <li>No response on Rust users forum</li> <li>No response on Twitter</li> <li>NobleProg Rust microcourse</li> </ul> </li> <li>Classes (specifically academic, in universities)<ul> <li>Northwestern University</li> <li>Rust being taught at University of Maryland, College Park</li> <li>Stanford\u2019s Programming Languages course dedicates 3.5 weeks to Rust</li> <li>Stanford\u2019s Operating Systems course in Rust</li> <li>University of Pennsylvania</li> <li>University of Virginia (first class)</li> </ul> </li> <li>Tutorials<ul> <li>Rustlings - Small exercises to get you used to reading and writing Rust code</li> <li>rust-learning - detailed list of awesome learning materials</li> <li>Tour of Rust - Step by step guide through the features of the Rust programming language</li> <li>Courses<ul> <li>Intro to Rust - YouTube</li> <li>Rust Crash Course - YouTube</li> <li>Rust Projects - YouTube</li> <li>The Rust Programming Language - Udemy</li> <li>Using Web Assembly with Rust - egghead</li> <li>Write your First Program with Rust - egghead</li> </ul> </li> <li>Videos<ul> <li>Learning Rust - two people pair-programming and going chapter by chapter through the Rust Lang Book</li> <li>Into_rust - screencast series</li> </ul> </li> </ul> </li> <li>Workshops<ul> <li>Ferrous Systems - paid workshops for companies and teams</li> <li>RustBridge - an organization that is part of the official Rust group.</li> <li>Systems Programming with Rust (at a conference)</li> </ul> </li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#packages","title":"Packages","text":"<p>One of the most important aspects of a programming language ecosystem is a way to share code with others. In the Rust ecosystem, the most common way is through packages, more commonly referred to as \u201ccrates\u201d. Below are links to two places where you can share code (your own private registry or the public one):</p> <ul> <li>Cloudsmith - create your own private cargo registry</li> <li>crates.io - \u201cThe Rust community\u2019s crate registry\u201d</li> <li>libs.rs - \u201cFast, lightweight, opinionated, unofficial alternative to crates.io\u201d</li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#platforms","title":"Platforms","text":"<p>The objective for this section was to figure out where Rust code can run. What platforms or systems are people targeting or building for? We saw a few of these mentioned in the Frameworks section. Here are the most common ones I could find (and some examples):</p> <ul> <li>Browser<ul> <li>WebAssembly</li> <li>Wasm-bindgem</li> <li>Rust to WASM + Next</li> </ul> </li> <li>CLI Apps<ul> <li>clap</li> <li>Build binaries for Linux, macOS and Windows</li> </ul> </li> <li>Embedded Devices<ul> <li>https://www.rust-lang.org/what/embedded</li> </ul> </li> <li>Operating System<ul> <li>Writing an OS in Rust</li> </ul> </li> <li>Mobile Apps<ul> <li>Building an iOS App in Rust, Part 1: Getting Started with Rust</li> <li>Example project for building a library for iOS + Android in Rust</li> </ul> </li> <li>Server<ul> <li>Deploying to Heroku</li> </ul> </li> <li>Anywhere?<ul> <li>Rust Once, Run Everywhere</li> </ul> </li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#selling-points","title":"Selling Points","text":"<p>Everyone will have their favorite reasons for using one language over another. I tried to select articles related to the selling points, but also highlight features of the language brought up by people who advocate for it.</p> <ul> <li>Articles<ul> <li>How often does Rust change?</li> <li>Rust programming language: Seven reasons why you should learn it in 2019</li> <li>What is Rust and why is it so popular?</li> <li>Why Rust?</li> <li>Why should I use Rust?</li> </ul> </li> <li>Features<ul> <li>Borrow checker (\u201cRust has a static garbage collector\u201d)</li> <li>Community</li> <li>Ownership model</li> <li>Package manager</li> <li>Performance</li> <li>Productivity<ul> <li>Excellent documentation</li> <li>Built-in tools (cargo, fmt, clippy)</li> </ul> </li> <li>Smart memory-management</li> <li>Type system</li> </ul> </li> <li>Other<ul> <li>Used by big companies (talk about Facebook, Microsoft, Amazon, etc.)</li> </ul> </li> </ul> <p>*Note: this section also piggybacks off the Use Cases section (coming up).</p> <p>Beyond this, I would encourage you to read the results from the Rust 2019 survey which asked \u201cWhy not use Rust\u201d. Not all points relate to selling points, but it may provide insight into what would sell people on using Rust if these things were fixed.</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/#tools","title":"Tools","text":"<p>The tools used for writing and using the programming language is an aspect we sometimes forget. This affects the developer experience and can drive or hinder the ecosystem. Here are some highlights:</p> <ul> <li>Benchmarking<ul> <li>criterion - Statistics-driven Microbenchmarking</li> </ul> </li> <li>Built-in testing support</li> <li>Cargo<ul> <li>Build (macOS, Windows, Linux)</li> <li>Clippy</li> <li>Rustdoc</li> <li>rustfmt</li> </ul> </li> <li>IDE support<ul> <li>https://www.rust-lang.org/tools</li> <li>Hover over documentation in editor</li> </ul> </li> <li>Rust Playground - test code online, share with others</li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#use-cases","title":"Use Cases","text":"<p>Deriving some of the tops results from the Rust Survey 2019, here are the main industries/applications that responded in the survey and are using Rust:</p> <ul> <li>Top 10 from survey<ul> <li>Backend Web Applications</li> <li>Distributed Systems</li> <li>Embedded Devices</li> <li>Enterprise Software</li> <li>Frontend Web Applications</li> <li>Internet of Things</li> <li>IT</li> <li>Network Programming</li> <li>Security</li> <li>Technology</li> </ul> </li> <li>Other<ul> <li>Blockchain (Libra Move) Solana</li> <li>Deno - uses JavaScript engine written in Rust<ul> <li>1.0 Announcement</li> </ul> </li> </ul> </li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#summary","title":"Summary","text":"<p>Reflecting on what we have covered thus far, we can see that the Rust ecosystem is well-developed and growing. This is not a conclusive/comprehensive list of the ecosystem or the companies using it. From my knowledge, Rust is used at big companies such as Amazon, Apple, Microsoft and Google. They are all investing in the language. We\u2019ve covered the ecosystem from a bird\u2019s-eye view as we see it today. Here are the main things to walk away with:</p> <ul> <li>Overview<ul> <li>The community is ubiquitous both online and in-person</li> <li>There is no shortage of books or references to read from the official Rust groups</li> <li>Rust can be used for writing web, mobile, and CLI apps, servers embedded devices, and OS\u2019s</li> <li>Rust is fast, well-documented, type-safe, manages memory efficiently, but has a steep learning curve</li> </ul> </li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#whats-next","title":"What\u2019s next?","text":"<p>We plan to use this information when making decisions and building strategies for us to get involved with the Rust ecosystem. If you\u2019d like to collaborate with us, please reach out to me over DMs on Twitter! We would love to work with you. Thank you for reading!</p>"},{"location":"public/programming/rust/rust-lang-ecosystem/#thank-you","title":"Thank you","text":"<p>To close out, I\u2019d like to give thanks to the following people for their contributions and feedback. I appreciate all of you!</p> <ul> <li>David Tolnay</li> <li>Pedro Rittner</li> <li>Jk Jensen</li> <li>Joe Savona</li> <li>Nell Shamrell-Harrington</li> <li>Lauren Tan</li> <li>Kathy Kam</li> <li>Cami Williams</li> <li>Joel Marcey</li> </ul>"},{"location":"public/programming/rust/rust-lang-ecosystem/#join-the-newsletter","title":"Join the Newsletter","text":"<p>I send a monthly newsletter with 1 exciting thing, 1 helpful thing, and new jobs.</p> <p>Email*</p> <p>By subscribing, you agree with Revue\u2019s Terms of Service</p> <p>\u00a92022 Joe Previte</p>"},{"location":"public/programming/rust/rust-lang-research-intro/","title":"Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Rust-Lang/Part(7)","text":"<p>Dr.Gavin-Wood #Polkadot#kusama#ParaState#Substrate#Rust-Lang</p> <p>\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb\ud83d\udc69\u200d\ud83c\udfeb</p> <p>1</p> <p></p> <p></p>"},{"location":"public/programming/rust/rust-lang-research-intro/#features","title":"Features","text":"<p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#crates","title":"Crates","text":""},{"location":"public/programming/rust/rust-lang-research-intro/#alloc","title":"Alloc","text":"<p>The Rust core allocation and collections library</p> <p>This library provides smart pointers and collections for managing heap-allocated values. This library, like libcore, normally doesn\u2019t need to be used directly since its contents are re-exported in the std crate. Crates that use the #![no_std] attribute however will typically not depend on std, so they\u2019d use this crate instead.</p> <p>https://doc.rust-lang.org/alloc/index.html</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#core","title":"Core","text":"<p>The Rust Core Library</p> <p>The Rust Core Library is the dependency-free1 foundation of The Rust Standard Library. It is the portable glue between the language and its libraries, defining the intrinsic and primitive building blocks of all Rust code. It links to no upstream libraries, no system libraries, and no libc.</p> <p>The core library is minimal: it isn\u2019t even aware of heap allocation, nor does it provide concurrency or I/O. These things require platform integration, and this library is platform-agnostic.</p> <p>https://doc.rust-lang.org/core/index.html</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#crate-proc_macrocopy","title":"Crate proc_macroCopy","text":"<p>A support library for macro authors when defining new macros.</p> <p>This library, provided by the standard distribution, provides the types consumed in the interfaces of procedurally defined macro definitions such as function-like macros #[proc_macro], macro attributes #[proc_macro_attribute] and custom derive attributes#[proc_macro_derive].</p> <p>https://doc.rust-lang.org/proc_macro/index.html</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#stdthe-rust-standard-library","title":"Std(The Rust Standard Library)","text":"<p>The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem. It offers core types, like Vec and Option, library-defined operations on language primitives, standard macros, I/O and multithreading, among many other things. <p>std is available to all Rust crates by default. Therefore, the standard library can be accessed in use statements through the path std, as in use std::env.</p> <p>https://doc.rust-lang.org/std/index.html</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#test","title":"Test","text":"<p>Support code for rustc\u2019s built in unit-test and micro-benchmarking framework.</p> <p>Almost all user code will only be interested in Bencher and black_box. All other interactions (such as writing tests and benchmarks themselves) should be done via the #[test] and #[bench] attributes.</p> <p>See the Testing Chapter of the book for more details.</p> <p>https://doc.rust-lang.org/test/index.html</p> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#memory","title":"Memory","text":"<p>Rust programs have 3 memory regions where data is stored:</p> <p>Data memory - For data that is fixed in size and static (i.e. always available through life of program). Consider the text in your program (e.g. \"Hello World!\"): This text's bytes are only ever read from one place and therefore can be stored in this region. Compilers make lots of optimizations with this kind of data, and they are generally considered very fast to use since locations are known and fixed.</p> <p>Stack memory - For data that is declared as variables within a function. The location of this memory never changes for the duration of a function call; because of this compilers can optimize code so stack data is very fast to access.</p> <p>Heap memory - For data that is created while the application is running. Data in this region may be added, moved, removed, resized, etc. Because of its dynamic nature it's generally considered slower to use, but it allows for much more creative usages of memory. When data is added to this region we call it an allocation. When data is removed from this section we call it a deallocation.</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#thread","title":"Thread","text":""},{"location":"public/programming/rust/rust-lang-research-intro/#lifetime","title":"LifeTime","text":"<p>@Static</p> <p>A static variable is a memory resource created at compile-time that exists through a program start to finish. They must have their types explicitly specified so special lifetime lasting the entire program execution.</p> <p>A static lifetime is a memory resource that lasts indefinitely to the end of a program. Note that by this definition some static lifetime resources can be created at runtime.</p> <p>Lifetime specifiers always start with a ' (e.g. 'a, 'b, 'c).</p> <p>Resources with static lifetimes have a special lifetime specifier 'static.</p> <p>'static resources will never drop. If static lifetime resources contain references they must all be 'static (anything less would not live long enough). <pre><code>fn main() {\n    let mut foo = Foo { x: 42 };\n    let x = &amp;mut foo.x;\n    *x = 13;\n    // x is dropped here, allowing us to create a non-mutable reference\n    let y = do_something(&amp;foo);\n    println!(\"{} {}\", y, foo.x);\n    // y is dropped here\n    // foo is dropped here\n}\n/*\nStandard Output\n42\n*/\n</code></pre> Memory detail:</p> <p>Modifying static variables is inherently dangerous because they are globally accessable to be read from by anyone introducing the possibility of a data race.</p> <p>static X: T = T(); Global variable with 'static lifetime, single memory location.</p> <p>T: 'static Same; does esp. not mean value t will live 'static, only that it could.</p> <p>Language Sugar:</p> <p>Rvalue Static Promotion Makes references to constants 'static, e.g., &amp;42, &amp;None, &amp;mut [].</p> <p>Promote constexpr rvalues to values in static memory instead of stack slots, and expose those in the language by being able to directly create 'static references to them.</p> <p>This would allow code like let x: &amp;'static u32 = &amp;42 to work.</p> <pre><code>static PI: f64 = 3.1415;\n\nfn main() {\n    // static variables can also be scoped to a function\n    static mut SECRET: &amp;'static str = \"swordfish\";\n\n    // string literals have a 'static lifetime\n    let msg: &amp;'static str = \"Hello World!\";\n    let p: &amp;'static f64 = &amp;PI;\n    println!(\"{} {}\", msg, p);\n\n    // You can break some rules, but you must be explicit\n    unsafe {\n        // we can set SECRET to a string literal because it is also `static\n        SECRET = \"abracadabra\";\n        println!(\"{}\", SECRET);\n    }\n}\n/*\nStandard Output\nHello World! 3.1415\nabracadabra\n*/\n</code></pre> <p>@Unsafe</p> <p>If you still had access to (via unsafe) they might still look like valid S, but any attempt to use them as valid S is undefined behavior. \u2193</p> <p>https://cheats.rs/#unsafe-unsound-undefined-dark side of force</p> <p>Try to avoid \"unsafe {}\", often safer, faster solution without it. Exception: FFI.</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#arc","title":"Arc","text":"<p>@Safe</p> <p>Arc presents us with a couple of use statements that include threads and something called Arc. Arc represents a thread-safe reference-counting pointer, and Arc stands for Atomically Reference Counted. You may know of this idea from old iOS Objective-C code or something like that. <pre><code>// arc1.rs\n// Make this code compile by filling in a value for `shared_numbers` where the\n// TODO comment is and create an initial binding for `child_numbers`\n// somewhere. Try not to create any copies of the `numbers` Vec!\n// Execute `rustlings hint arc1` for hints :)\n\nuse std::sync::Arc;\nuse std::thread;\n\nfn main() {\n    let numbers: Vec&lt;_&gt; = (0..100u32).collect();\n    let shared_numbers = Arc::new(numbers);\n    let mut joinhandles = Vec::new();\n\n    for offset in 0..8 {\n        let child_numbers = shared_numbers.clone();\n        joinhandles.push(thread::spawn(move || {\n            let mut i = offset;\n            let mut sum = 0;\n            while i &lt; child_numbers.len() {\n                sum += child_numbers[i];\n                i += 5;\n            }\n            println!(\"Sum of offset {} is {}\", offset, sum);\n        }));\n    }\n    for handle in joinhandles.into_iter() {\n        handle.join().unwrap();\n    }\n}\n</code></pre></p> <ul> <li> <p>What Arc does is provides shared ownership of a value allocated in the heap. Invoking clone on Arc gives you a new Arc instance, which points to the same allocation on the heap as the original source Arc. What Arc will do is then increase the reference count, and it will not drop the value inside of the Arc until the last reference has dropped.</p> </li> <li> <p>In this code, what we need to do is set a value for shared_numbers and then also create an initial binding for child_numbers such that we can use the value inside of the multiple threads that are spawned for the range zero to eight. Note that numbers here is a Vec which we've told the Rust compiler to infer the type of with this &lt;_&gt;, and also told that the type by using a range of to 100 as u32.</p> </li> <li> <p>For shared_numbers, what we'll do is create a new Arc. Note that we also need to use new binding for child_numbers. We have a number of places we could put it, including right below shared_numbers or inside of this loop.</p> </li> <li> <p>We're going to do this inside of the loop so that we create a new clone and increase the Arc reference counter for every offset that we spawn a new thread for.</p> </li> <li> <p>Note that shared_numbers is a new Arc that contains the Vec for each offset in the range zero to eight, which we spawn a thread for child_numbers, clones shared_numbers, which increments the Arc counter and allows child_numbers to access the same data</p> </li> </ul> <p>\ud83d\udc46\ud83d\udc46\ud83d\udc46 \u270d\ufe0f\u270d\ufe0f\u270d\ufe0f</p> <p>Let's Start - to setup in 5min</p> <p>https://www.gitpod.io/docs/languages/rust#rust-in-gitpod</p> <p>Getting started with Toturial</p> <p>Introduction - Rust By Example</p> <p>Learn Rust - Rust Programming Language</p> <p>Tour of Rust - Let's go on an adventure!</p> <p>In-Depth Rust Tutorials for 2022 | egghead.io</p> <p>https://rust-lang.github.io/rustup/examples.html</p> <p>\ud83d\udcda\ud83d\udcda\ud83d\udcda</p>"},{"location":"public/programming/rust/rust-lang-research-intro/#literature","title":"Literature","text":"<p>https://doc.rust-lang.org/error-index.html</p> <p>Cargo Getting Start</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>If you liked this article or if it helped you please clap on this post to help the Read.Cash algorithm recommend it to more people. If you have any questions or remarks please feel free to leave a comment below.</p> <p>Alternatively, please feel free to send donations 0xde5D732a5AB44832E1c69b18be30834639F44A2c</p> <p>\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f</p> <p>Reseacher &amp; Organized by:</p> <p>\ud83d\ude4f#Arman-Riazi\ud83e\udd1d</p>"},{"location":"public/programming/rust/rust-learning-plan-chapter-1-notes/","title":"Rust learning plan chapter 1 notes","text":"<p>Rust Learning Plan &amp; Chapter 1 Notes Last updated: 03/06/2020</p> <p>Hello and welcome! This might be the first time we meet so I thought I\u2019d start this post off with a short introduction.</p> <p>I\u2019m Joe and previously I worked with JavaScript building web apps and mobile apps. Now, I\u2019m learning Rust both for personal reasons and work-related reasons. One of my primary focuses for this half of the year is Rust!</p> <p>Beyond that though, I am personally excited about Rust because:</p> <p>it\u2019s exciting it\u2019s type-safe (Yay, coming from TypeScript!) it\u2019s performant it has excellent documentation it has a strong community I dabbled a bit about a year ago doing some exercises on exercism but now learning Rust is a high priority.</p> <p>You might be interested in Rust because you can build: CLI tools Web apps (compile to WASM, or Web Assembly) Web servers And many other exciting things!</p> <p>For March, I decided to put together a plan to learn a little bit of Rust. The purpose is to start building projects with Rust and get involved in the community.</p> <p>Here\u2019s what the plan looks like:</p> <p>Learn enough Rust to be dangerous, measured by:</p> <p>ability to understand and explain basic concepts in Rust ability to contribute code to an open source project in the Rust community ability to build and ship a small project in Rust I\u2019ve taken these objectives and broken them out into actionable tasks. They are as follows:</p> <p>Read Chapters 1-3 of the Rust Lang Book (by Steve Klabnik and Carol Nichols, with contributions from the Rust Community) Write 3 blog posts Contribute to an open source project (bug fix or docs) Build a small web server app (bunny1 clone) This is the first blog post in the series, which covers my notes and thoughts on Chapter 1 of the Rust Lang Book. If you read Chapter 1 and would like to discuss, let\u2019s have a conversation! Tweet @ me or shoot me a DM on Twitter.</p> <p>Notes on Chapter 1 The first chapter in the Rust Lang Book is a friendly introduction to Rust. It covers enough of the basics to get started. You download Rust and then write your first program, which prints \u201cHello, World!\u201d Here are things I wrote down while reading the first chapter online:</p> <p>rustup is the preferred version manager Coming from the JavaScript world, I\u2019m used to scouring the internet for a decent node version manager. The common goto is nvm. Lucky for us, the Rust team supplies an official version manager and it\u2019s called rustup. Free, offline docs - out-of-the-box I noted this after rereading some of Chapter 1. rustup comes with a version of the docs that you can launch and read offline \ud83d\ude31 How genius is that?!</p> <p>rustup doc cargo commands are like npm commands Similar to how we use npm in the JS world for packaging and building our projects, cargo serves a similar purpose for Rust.</p> <p>Rust leans towards snake_case In JS, I used camelCase when naming things. It seems like the Rust community leans towards snake_case. This was evident during the hello world exercise. We named the project directory hello_world. My assumption may be premature.</p> <p>semicolons have meaning There is a great debate in JS - semicolons or no semicolons? While the choice is mainly conventional in JavaScript, Rust is a bit different. Most of the time, you\u2019ll use them to declare the end of an expression. Here\u2019s an example:</p> <p>// Rust example println!(\"Hello, world!\"); Like all good rules in programming languages, there is an exception! If you don\u2019t include it in a code block, it returns the last line. Here\u2019s what that looks like:</p> <p>// Rust if x &lt; 5 {     x + 1 } There is no semicolon but this will still return x plus 1. Reminds me of the arrow function implicit return in JavaScript:</p> <p>// JavaScript const firstName = () =&gt; 'Rusty' Rust has an official code formatter If you\u2019re not familiar with the Prettier, it\u2019s an opinionated code formatter. It supports a lot of different languages. I believe it\u2019s the most used one in JavaScript. A positive note about Rust is that they have an official formatter called rustfmt. And even better, the Rust book says,</p> <p>The Rust team plans to eventually include this tool with the standard Rust distribution</p> <p>Official formatting - hooray! Another thing we don\u2019t have to worry about.</p> <p>Rust uses macros I wasn\u2019t familiar with this because JavaScript does not have them. They look like functions, but according to Computer Hope, macros are \u201ca tool that allows a developer to re-use code.\u201d I thought it was like a function, but they have a note saying,</p> <p>A macro is not the same as a function. Functions require special instructions and computational overhead to safely pass arguments and return values. A macro is a way to repeat frequently-used lines of code.</p> <p>Here is an example using the println! macro in Rust:</p> <p>// Rust println!(\"Howdy, friend!\"); The \u201c!\u201d in \u201cprintln!\u201d means it\u2019s a macro After learning about macros, I asked myself, \u201cBut how do you know if it\u2019s a local function vs. macro?\u201d Then I realized, it\u2019s the !. That\u2019s the pattern to look for.</p> <p>\u201cBinary executable\u201d is fancy terms for \u201ccomputer-ready-file\u201d I\u2019ve heard the term \u201cbinary executable.\u201d I know what \u201cbinary\u201d means and I know what \u201cexecutable\u201d means, but I highlighted this anyway. In layperson terms, it means the computer can read and execute it without anyone\u2019s help.</p> <p>Compile before you run, you must When I learned JavaScript, I never fully understood the whole compiled vs interpreted lingo. Well, now I have a basic understanding. In most cases, a JavaScript engine (like V8) \u201ccompiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler.\u201d Notice though, the JS engine does this, not the developer.</p> <p>In Rust (and many other languages), there is a compile step that you, the developer, must do. So you must compile your code before you can run it.</p> <p>Ahead-of-time compilation is awesome I hadn\u2019t previously heard this phrase \u201cahead-of-time compilation\u201d but now I get what it is and why it\u2019s awesome. You compile your program and it outputs a file. Because you compiled \u201cahead of time\u201d \ud83d\ude09 you can send it to a friend who can then run it on their machine without having Rust. That\u2019s amazing! At least coming from JS/Python. With Rust, it\u2019s already ready to go!</p> <p>cargo new, what it do? Going back to our npm comparison, it is like npm init and creates a new Rust project. What makes it even better though is that it includes a .gitignore file for you. It\u2019s fantastic.</p> <p>crates are like npm packages Crates are bundled up pieces of code. Similar to the JS world, you install a package from npm, you do the same with Rust, but with crates. I love the term \u201ccrate.\u201d It\u2019s kind of fun to say and isn\u2019t an everyday term like \u201cpackages\u201d. The official crates registry is crates.io.</p> <p>The other differentiating factor is that crates.io is \u201cmanaged by members of the Crates.io and Rust core teams.\u201d I hope this means it\u2019s more sustainable and community-driven.</p> <p>Rust encourages project folder structure Coming from the JS world, you can put your files in any directory you want (most of the time). You then tell your bundler where to look. What I like about Rust is that it encourages a project folder structure out the gate. According to the book, \u201cCargo expects your source files to live inside the src directory.\u201d This is great! One less thing for us to think about. You can, of course, override this by setting the path value in your cargo.toml (I googled out of curiosity).</p> <p>cargo check - \u201cAm I doing this right?\u201d cargo check will check your source code without building it. This is a good way to iterate quickly.</p> <p>cargo build \u2014release - \u201cShip it!\u201d This one is more of a reminder for me. When you\u2019re ready to ship your code to production, add the release flag to your build step:</p> <p>cargo build --release fn: function keyword is only two letters In JavaScript, we have to use seven keystrokes to declare a function. That\u2019s a lot! But in Rust, we only need to write two: fn. How cool is that? We\u2019re five keystrokes richer in Rust.</p> <p>What\u2019s next? As previously mentioned, next up for me is Chapter 2 of the Rust Lang Book. Here, they\u2019ll walk us through programming a guessing game - hooray! I\u2019m excited about this.</p> <p>The next blog post in this series will cover my notes on building my first real project in Rust. Until then, happy coding my fellow Rustaceans! \ud83e\udd80</p> <p>P.S. - I included a glossary and cheatsheet at the end here. Enjoy!</p> <p>Glossary I covered a decent number of new words (at least for me) in this post. I find it helpful to remind myself what they each mean. Here are they are described in my own words:</p> <p>ahead-of-time compilation - compiling beforehand binary executable - a file that a computer already understands Cargo - Rust\u2019s official build system and package manager crate - a bundle of code that you can use in your project crates.io - the official Rust package registry developer advocate - someone who can talk about and write code and works with the dev community macro - it\u2019s like a global function Rustacean - a Rust community member rustup - the official Rust version manager WASM - Web Assembly Cheatsheet Most of the commands that were covered in Chapter 1:</p> <p>Install Rust with rustup curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh Update to the latest version of Rust rustup update Check your version of Rust rustc --version Open the docs for Rust locally (available offline too) rustup doc Manually compile a file rustc main.rs Check your version of cargo cargo --version Create a new Rust program cargo new"},{"location":"public/programming/rust/rust-learning-plan-chapter-1-notes/#example-for-a-project-named-hello_world","title":"Example for a project named hello_world","text":"<p>cargo new hello_world Check that Rust program compiles cargo check Build a Rust program cargo build Run a Rust program cargo run Build a Rust program for production cargo build --release</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/","title":"Rust scratch blockchain","text":""},{"location":"public/programming/rust/rust-scratch-blockchain/#welcome-to-the-home-blockchain-of-rustaceans","title":"Welcome To The Home Blockchain Of \ud83e\udd80Rustaceans","text":"<p>The repo is a prerequisite of the Substrate-Framework and it would be nicer to practice too.</p> <p>The repo is included Rust syntax, configuration and the goal of creating scratch codes like one is becuase of providing testbed environment of Blockchain.</p> <p>The Next reason is to using some features of Rust-Lang that I had wanted to implement it after learning Rust.</p> <p>Used json in the main runner of the project so that consume json transactions as a offchain blockchain.</p> <p>As you follow materials you can see (future work) which means you can add these concepts to the project. I have some idea that you can affort on it to completing future works.</p> <p>Smart Contracts, MultiSignature, RPC, Make A Better CLI, and something that you can implementing (Do not worry sice most of your works will merge to main branch. We will not create a framework or complete Blockchain because we just need to learning more and used it use-cases)</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#the-difference-between-the-current-work-and-the-prev-works","title":"The difference between the current work and the prev works","text":"<p>I have tried to use fundamental concepts correctly, for example, all of us know any block have not any copy so because of it we are calling blockchain! Unlike many repositories on GitHub(testbed/scratched projects-non productive) that almost use Copy/Clone features of Rust-Lang.  In the following, there are some features that cause a different project.</p> <p>Currently Status: Under Refactoring</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#how-to-contribute-easy","title":"How To Contribute Easy","text":"<p>[Rust 2021 A Scratch Blockchain-1] Youtube-Rust 2021 A Scratch Blockchain-1</p> <p>Rust 2021 A Scratch Blockchain-2 Youtube-Rust 2021 A Scratch Blockchain-2</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#instructions-for-working-with","title":"Instructions for working with","text":"<pre><code>DIFFICULTY={difficulty} cargo {mode} {file name}\n</code></pre> <p>{difficulty}: (optional-key-env) value default 0x00ffffffffffffffffffffffffffffff.It must be 32 byte.</p> <p>{mode}: macro, string, file/ default mode is on the macrojson mode.</p> <p>{macro, string} there is in project and you can not access or manipulate except by getting the project. serde_json support string and macro based on called library. {file} json file is external .json file that you can set it for command line</p> <p>{file name} index directory of the project sample-bolocks.json</p> <p>Example: </p> <p><pre><code>cargo build\nDIFFICULTY=0x00000fffffffffffffffffffffffffff time cargo run file sample-bolocks.json\nDIFFICULTY=0x00000fffffffffffffffffffffffffff time cargo run macrojson\nDIFFICULTY=0x00000fffffffffffffffffffffffffff time cargo run stringjson\ntime cargo run\ncargo watch -x run\n</code></pre> Using time and watch is optional and depends on your purpose</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#features","title":"Features","text":"<ul> <li> <p>[\u2713] Modular</p> </li> <li> <p>[\u2713] UnitTest(semi:future work)</p> </li> <li> <p>[\u2713] Customized Error Handling</p> </li> <li> <p>[\u2713] Json &amp; String Data Deserialized</p> </li> <li> <p>[\u2713] Closure(Functional Programming)</p> </li> <li> <p>[\u2713] Cryptography-Hashing Alogrithm SHA-256</p> </li> <li> <p>[\u2713] Configuration Files(semi- devOps)</p> </li> </ul>"},{"location":"public/programming/rust/rust-scratch-blockchain/#used-concepts","title":"Used Concepts","text":""},{"location":"public/programming/rust/rust-scratch-blockchain/#-memoizationlazyevaluation","title":"- [\u2713] Memoization\u2022Lazy\u2022Evaluation","text":"<p>We can create a struct that will hold the closure and the resulting value of calling the closure.</p> <p>The struct will execute the closure only if we need the resulting value, and it will cache the resulting value so the rest of our code doesn\u2019t have to be responsible for saving and reusing the result.</p> <p>FnOnce consumes the variables it captures from its enclosing scope, known as the closure\u2019s environment. To consume the captured variables, the closure must take ownership of these variables and move them into the closure when it is defined. The Once part of the name represents the fact that the closure can\u2019t take ownership of the same variables more than once, so it can be called only once.</p> <p>FnMut can change the environment because it mutably borrows values.</p> <p>Fn borrows values from the environment immutably. FnOnce: takes the whole value. FnMut: takes a mutable reference. Fn: takes a regular reference.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-coercion","title":"- [\u2713] Coercion","text":"<p>Deref coercion is a convenience that Rust performs on arguments to functions and methods. Deref coercion works only on types that implement the Deref trait. Deref coercion converts such a type into a reference to another type. For example, deref coercion can convert &amp;String to &amp;str because String implements the Deref trait such that it returns &amp;str.</p> <p>The number of times that Deref::deref needs to be inserted is resolved at compile time, so there is no runtime penalty for taking advantage of deref coercion! Similar to how you use the Deref trait to override the * operator on immutable references, you can use the DerefMut trait to override the * operator on mutable references.the Drop trait is almost always used when implementing a smart pointer. For example, when a Box is dropped it will deallocate the space on the heap that the box points to. <p>Note that we didn\u2019t need to call the drop method explicitly.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dstorunsizedtype","title":"- [\u2713] DST\u2022Or\u2022Unsizedtype","text":"<p>DSTs or unsized types': str(but not &amp;str-So although a &amp;T is a single value that stores the memory address of where the T is located, a &amp;str is two values: the address of the str and its length. Rust has a particular trait called the Sized trait to determine whether or not a type\u2019s size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on Sized to every generic function. </p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-operation","title":"- [\u2713] Operation","text":"<pre><code>-&gt; Methods are functions that are coupled to some object.\n</code></pre> <p>From a syntactic point of view, these are just functions that don\u2019t need to specify one of their arguments. Rather than calling open() and passing a File object in as an argument (read(f, buffer)), methods allow the main object to be implicit in the function call (f.read(buffer)) using the dot operator.</p> <p>There are a number of theoretical differences between methods and functions, but a detailed discussion of those computer science topics is available in other books. Briefly, functions are regarded as pure, meaning their behavior is determined solely by their arguments. Methods are inherently impure, given that one of their arguments is effectively a side effect. These are muddy waters, though. Functions are perfectly capable of acting on side effects themselves. Moreover, methods are implemented with functions. And, to add an exception to an exception, objects sometimes implement static methods, which do not include implicit arguments. To define methods, Rust programmers use an impl block</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-borrowchecker","title":"- [\u2713] Borrowchecker","text":"<p>The borrow checker checks that all access to data is legal, which allows Rust to prevent safety issues. Learning how this works will, at the very least, speed up your development time by helping you avoid run-ins with the compiler. More significantly though, learning to work with the borrow checker allows you to build larger software systems with confidence. It underpins the term fearless concurrency.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-borrowcheckerlifetime","title":"- [\u2713] Borrowchecker\u2022Lifetime","text":"<pre><code>-&gt; Lifetime=Timetolive=Subset of their scope\n</code></pre> <p>Make hypotheses about whether or not your experiments will pass the borrow checker before you compile reference in Rust has a lifetime, which is the scope for which that reference is valid. Most of the time, lifetimes are implicit and inferred, just like most of the time, types are inferred. We must annotate types when multiple types are possible. In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways.</p> <p>The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it\u2019s intended to reference. All references in Rust have a lifetime, even if they are not explicitly annotated. The compiler is capable of implicitly assigning lifetimes. </p> <p>A value\u2019s lifetime is the period when accessing that value is valid behavior. A function\u2019s local variables live until the function returns, while global variables might live for the life of the program.</p> <p>The notion of ownership is rather limited. An owner cleans up when its values\u2019 lifetimes end.</p> <p>Although every parameter has a lifetime, these checks are typically invisible as the compiler can infer most lifetimes by itself.</p> <p>All values bound to a given lifetime must live as long as the last access to any value bound to that lifetime.</p> <p>No lifetime annotations are required when calling a function.</p> <p>Lifetime annotations don\u2019t change how long any of the references live. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter.</p> <p>Lifetime annotations describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes.</p> <p>The lifetime annotations indicate that the references first and second must both live as long as that generic lifetime.</p> <p>Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return values are called output lifetimes.</p> <p>Although every parameter has a lifetime, these checks are typically invisible as the compiler can infer most lifetimes by itself</p> <p>All values bound to a given lifetime must live as long as the last access to any value bound to that lifetime.</p> <p>No lifetime annotations are required when calling a function.</p> <p>Using two lifetime parameters (a and b) indicates that the lifetimes of i and j are decoupled.</p> <p>fn add_with_lifetimes&lt;'a, 'b&gt;(i: &amp;'a i32, j: &amp;'b i32) -&gt; i32 {}</p> <p>Lifetime of that usage: </p> <p>the LOC('existence time' or Line of code) between when a location is first used in a certain way, and when that usage stops.</p> <p>Lifetime of that value:</p> <p>the LOC (or actual time) between when a value is created, and when that value is dropped.</p> <p>Might be useful when discussing open file descriptors, but also irrelevant here.</p> <p>Ultimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they\u2019re connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dangle","title":"- [\u2713] Dangle","text":"<p>The main aim of lifetimes is to prevent dangling references.which has an outer scope and an inner scope. In return section of a function primitive types need to define as (&amp;'a or &amp;'static)</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-generic","title":"- [\u2713] Generic","text":"<p>You might be wondering whether there is a runtime cost when using generic type parameters. The good news is that using generic types won't make your run any slower than it would with concrete types.</p> <p>Rust accomplishes this by performing monomorphization of the code using generics at compile time.  Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compile. Every programming language has tools for effectively handling the duplication of concepts.</p> <p>In Rust, one such tool is generics. Generics are abstract stand-ins for concrete types or other properties. When we\u2019re writing code, we can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running the code.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#staticdispatchpassed","title":"Static\u2022Dispatch(Passed)","text":"<pre><code>-&gt; Monomorphization\n</code></pre> <p>Dispatch is the mechanism to determine which specific version of code is actually run when it involves polymorphism. Two major forms of dispatch are static dispatch and dynamic dispatch. While Rust favors static dispatch, it also supports dynamic dispatch through a mechanism called \u2018trait objects\u2019. When Rust compiles this code, it performs monomorphization.</p> <p>The monomorphized version of the code looks like the following. The generic Option is replaced with the specific definitions created by the compiler: versions of a polymorphic function (or any polymorphic entity) during compilation is called Monomorphization. <p>Because Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics. When the code runs, it performs just as it would if we had duplicated each definition by hand. The process of monomorphization makes Rust\u2019s generics extremely efficient at runtime. This is opposed to dynamic dispatch</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dynamicdispatch","title":"- [\u2713] Dynamic\u2022Dispatch","text":"<p>The code that results from monomorphization is doing static dispatch, which is when the compiler knows what method you\u2019re calling at compile time. This is opposed to dynamic dispatch, which is when the compiler can\u2019t tell at compile time which method you\u2019re calling. In dynamic dispatch cases, the compiler emits code that at runtime will figure out which method to call.</p> <p>When we use trait objects, Rust must use dynamic dispatch. The compiler doesn\u2019t know all the types that might be used with the code that is using trait objects, so it doesn\u2019t know which method implemented on which type to call. Instead, at runtime, Rust uses the pointers inside the trait object to know which method to call. There is a runtime cost when this lookup happens that doesn\u2019t occur with static dispatch. Dynamic dispatch also prevents the compiler from choosing to inline a method\u2019s code, which in turn prevents some optimizations.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-blanketimplementation","title":"- [-] Blanket\u2022Implementation","text":"<p>Any implementation where a type appears uncovered. impl Foo for T, impl Bar for T, impl Bar&gt; for T, and impl Bar for Vec are considered blanket impls. <p>We can also conditionally implement a trait for any type that implements another trait. Implementations of a trait on any type that satisfies the trait bounds are called blanket implementations and are extensively used in the Rust standard library. For example, the standard library implements the ToString trait on any type that implements the Display trait.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-boundsyntax","title":"- [\u2713] Bound(syntax)","text":"<p>Bounds are constraints on a type or trait. For example, if a bound is placed on the argument a function takes, types passed to that function must abide by that constraint.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-trait","title":"- [\u2713] Trait","text":"<p>We can use traits to define shared behavior in an abstract way. We can use trait bounds to specify that a generic type can be any type that has certain behavior. Traits are similar to a feature often called interfaces in other languages, although with some differences.</p> <p>What is a trait? A trait is a language feature that is analogous to an interface, protocol, or contract. If you have a background in object-oriented programming, consider a trait to be an abstract base class. If you have a background in functional programming, Rust\u2019s traits are close to Haskell\u2019s type classes these also support a form of inheritance that\u2019s common in most object oriented languages. For now, though, the thing to remember is that traits represent common behavior (Or reusable codes like println!)that types opt into via the syntax impl Trait for Type.</p> <p>After the method signature, instead of providing an implementation within curly brackets, we use a semicolon.</p> <p>This interface consists of associated items, which come in three varieties: functions, types, constants.</p> <p>All traits define an implicit type parameter Self that refers to \"the type that is implementing this interface\".</p> <p>Trait functions may omit the function body by replacing it with a semicolon. This indicates that the implementation must define the function. If the trait function defines a body, this definition acts as a default for any implementation which does not override it. Similarly, associated constants may omit the equals sign and expression to indicate implementations must define the constant value. Associated types must never define the type, the type may only be specified in an implementation.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-polymorphism","title":"- [\u2713] Polymorphism","text":"<p>In a struct or enum, the data in the struct fields and the behavior in impl blocks are separated, whereas in other languages, the data and behavior combined into one concept is often labeled an object.However, trait objects are more like objects in other languages in the sense that they combine data and behavior.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-unrolling","title":"- [\u2713] Unrolling","text":"<p>It is an optimization that removes the overhead of the loop controlling code and instead generates repetitive code for each iteration of the loop.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-bindingmatch","title":"- [\u2713] Binding\u2022Match","text":"<p>The compiler automatically references the Some, and since we're borrowing, name is bound as ref name automatically as well. If we were mutating:</p> <pre><code> //https://blog.rust-lang.org/2018/05/10/Rust-1.26.html#nicer-match-bindings\n// `self` has type `&amp;List`, and `*self` has type `List`, matching on a\n// concrete type `T` is preferred over a match on a reference `&amp;T`\n// after Rust 2018 you can use self here and tail (with no ref) below as well,\n// rust will infer &amp;s and ref tail. \n</code></pre>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dataracerustaceans","title":"- [\u2717] Datarace\u2022Rustaceans","text":"<p>Note: The opposite of referencing by using &amp; is dereferencing, which is accomplished with the dereference operator, *.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-nanphilosophy","title":"[-] Nan(philosophy)","text":"<p>Floating-point types include \u201cnot a number\u201d values (represented in Rust syntax as NAN values) to handle these cases.</p> <p>NAN values poison other numbers. Almost all operations interacting with NAN return NAN. Another thing to be mindful of is that, by definition, NAN values are never equal.  Programming language design is often thought of in terms of which features you include, but the features you exclude are important too. Rust doesn\u2019t have the null feature that many other languages have. Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null. In his 2009 presentation \u201cNull References: The Billion Dollar Mistake,\u201d Tony Hoare, the inventor of null, has this to say: I call it my billion-dollar mistake. At that time, I was designing the first comprehensive type system for references in an object-oriented language. My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn\u2019t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years. </p> <p>To program defensively, make use of the is_nan() and is_finite() methods. Inducing a crash, rather than silently proceeding with a mathematical error, allows you to debug close to what has caused the problem. The following illustrates using the is_finite()  </p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-duplicationliteral","title":"- [\u2713] Duplication((literal)","text":"<p>Concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy.</p> <p>If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-semanticliteral","title":"- [\u2713] Semantic(literal)","text":"<p>Primitive types are said to possess copy semantics, whereas all other types have move semantics. Adding more functionality (e.g., reference-counting semantics rather than move semantics) to types by wrapping these in other types typically reduces their run-time performance.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-zerocostabstractionsliteral","title":"- [\u2713] Zero\u2022Cost\u2022Abstractions(literal)","text":"<p>One of the ways this manifests is by not adding extra data around values within structs.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-coherenceliteral","title":"- [\u2713] Coherence(literal)","text":"<pre><code>-&gt; Orphan = Trait\u2022External\u2022Implement\n</code></pre> <p>But we can\u2019t implement external traits on external types. For example, we can\u2019t implement the Display trait on Vec within our aggregator crate, because Display and Vec are defined in the standard library and aren\u2019t local to our aggregator crate. This restriction is part of a property of programs called coherence, and more specifically the orphan rule, so named because the parent type is not present. This rule ensures that other people\u2019s code can\u2019t break your code and vice versa.  <p>Without the rule, two crates could implement the same trait for the same type, and Rust wouldn\u2019t know which implementation to use.</p> <p>Preserves contextual coherence of trace data from tasks/function/methods when logging. </p> <p>For example new instance of a struct of course, as you probably already know, struct then you can just summerize your struct in a method.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-jargonliteral","title":"- [\u2713] Jargon(literal)","text":"<p>Functional programming jargon: \u201cto cons x onto y\u201d informally means to construct a new container instance by putting the element x at the start of this new container, followed by the container y.Other, more complex recursive data types are useful in various situations, but by starting with the cons list, we can explore how boxes let us define a recursive data type without much distraction.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-refactorliteral","title":"- [\u2713] Refactor(literal)","text":"<p>One alternative to refactoring is to simply copy values. Doing this often is typically frowned upon, however, but it can be useful in a pinch. Primitive types like integers are a good example of that. Primitive types are cheap for a CPU to duplicate\u2014so cheap, in fact, that Rust always copies these if it would otherwise worry about ownership being moved.</p> <p>Types can opt into two modes of duplication: cloning and copying.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-patternnewtype","title":"- [\u2713] Pattern\u2022Newtype","text":"<p>Using the Newtype Pattern to Implement External Traits on External Types 'thin wrapper around the type' : part of Vec is noticed. We can make a Wrapper struct that holds an instance of Vec; then we can implement Display on Wrapper and use the Vec value The downside of using this technique is that Wrapper is a new type, so it doesn\u2019t have the methods of the value it\u2019s holding. We would have to implement all the methods of Vec directly on Wrapper such that the methods delegate to self.0, which would allow us to treat Wrapper exactly like a Vec. <p>If we wanted the new type to have every method the inner type has, implementing the Deref trait (If we don\u2019t want the Wrapper type to have all the methods of the inner type\u2014for example, to restrict the Wrapper type\u2019s behavior\u2014we would have to implement just the methods we do want manually.)</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-patterndesigninteriorfuture-work","title":"- [\u2717] Pattern\u2022Design\u2022Interior(future work)","text":"<p>Interior mutability is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses unsafe code inside a data structure to bend Rust\u2019s usual rules that govern mutation and borrowing. </p> <p>RefCell type that follows the interior mutability pattern. <p>Unlike Rc, the RefCell type represents single ownership over the data it holds. So, what makes RefCell different from a type like Box? Recall the borrowing rules... <p>Similar to Rc, RefCell is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. At any given time, you can have either (but not both of) one mutable reference or any number of immutable references.References must always be valid."},{"location":"public/programming/rust/rust-scratch-blockchain/#-typewraperfuture-work","title":"- [\u2717] Type\u2022Wraper(future work)","text":"<pre><code>-&gt; Wrapper type = Reference-Counted Value = Shared Ownership = Track valid references\n</code></pre> <p>Use wrapper types, which allow more flexibility than what is available by default. These, however, incur costs at runtime to ensure that Rust\u2019s safety guarantees are maintained. Another way to phrase this is that Rust allows programmers to opt in to garbage collection.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-memleakfuture-work","title":"- [\u2717] Mem\u2022Leak(future work)","text":"<pre><code>-&gt; Managing Memory Leak\n</code></pre> <p>Rust\u2019s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a memory leak). Preventing memory leaks entirely is not one of Rust\u2019s guarantees in the same way that disallowing data races at compile time is, meaning memory leaks are memory safe in Rust.</p> <p>We can see that Rust allows memory leaks by using Rc and RefCell: it\u2019s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped."},{"location":"public/programming/rust/rust-scratch-blockchain/#-memdoublefreefuture-work","title":"- [\u2717] Mem\u2022Doublefree(future work)","text":"<p>This is a problem: when s2 and s1 (s2 is copied s1 means 2different pointer and the same data) go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-memdeallocatingorraiifuture-work","title":"- [\u2717] Mem\u2022Deallocating\u2022or\u2022RAII(future work)","text":"<p>Note: In C++, this pattern of deallocating resources at the end of an item\u2019s lifetime is sometimes called Resource Acquisition Is Initialization (RAII). The drop function in Rust will be familiar to you if you\u2019ve used RAII patterns.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-threadfuture-work","title":"- [\u2717] Thread(future work)","text":"<p>Which parts of your code on different threads will run. This can lead to problems, such as:</p> <p>Race conditions, where threads are accessing data or resources in an inconsistent order Deadlocks, where two threads are waiting for each other to finish using a resource the other thread has, preventing both threads from continuing Bugs that happen only in certain situations and are hard to reproduce and fix reliably.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-threadstrategesfuture-work","title":"- [\u2717] Thread\u2022Strateges(future work)","text":"<pre><code>-&gt; Priority Performance\n</code></pre> <p>Stealing_Join: execute code in parallel when there are idle CPUs to handle it.</p> <p>When join is called from outside the thread pool, the calling thread will block while the closures execute in the pool. When join is called within the pool, the calling thread still actively participates in the thread pool. It will begin by executing closure A (on the current thread). While it is doing that, it will advertise closure B as being available for other threads to execute. Once closure A has completed, the current thread will try to execute closure B; if however closure B has been stolen, then it will look for other work while waiting for the thief to fully execute closure B. (This is the typical work-stealing strategy). Send is require because we have jump from quick func(thread a) to part func(thread b) frequently.</p> <p>Atomic: types provide primitive shared-memory communication between threads, and are the building blocks of other concurrent types. This module defines atomic versions of a select number of primitive types, including AtomicBool, AtomicIsize, AtomicUsize, AtomicI8, AtomicU16, etc. Atomic types present operations that, when used correctly, synchronize updates between threads. Each method takes an Ordering which represents the strength of the memory barrier for that operation. These orderings are the same as the C++20 atomic orderings. For more information see the nomicon.</p> <p>Atomic variables are safe to share between threads (they implement Sync) but they do not themselves provide the mechanism for sharing and follow the threading model of Rust. The most common way to share an atomic variable is to put it into an Arc (an atomically-reference-counted shared pointer). Atomic types may be stored in static variables, initialized using the constant initializers like AtomicBool::new. Atomic statics are often used for lazy global initialization.</p> <p>Spin_Loop_Yeild   also known as busy loop and spin loop-If you want to sleep pause a thread for short amounts of time, or if your application is sensitive to timing, use a spin loop</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-unsafeexternmanglingfuture-work","title":"- [\u2717] Unsafe\u2022Extern\u2022Mangling(future work)","text":"<pre><code>&gt; Mangling is when a compiler changes the name we\u2019ve given a function to a different name that contains more information for other parts of the compilation process to consume but is less human readable. Every programming language compiler mangles names slightly differently, so for a Rust function to be nameable by other languages, we must disable the Rust compiler\u2019s name mangling.\n</code></pre>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-interiormutabilitypattern","title":"- [\u2713] Interior\u2022Mutability\u2022Pattern","text":"<p>RefCell: Lets us have many immutable borrows or one mutable borrow at any point in time. Mutating the value inside an immutable value is the interior mutability pattern. Interior mutability is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses unsafe code inside a data structure to bend Rust\u2019s usual rules that govern mutation and borrowing.  RefCell type that follows the interior mutability pattern. Unlike Rc, the RefCell type represents single ownership over the data it holds. So, what makes RefCell different from a type like Box? Recall the borrowing rules, Similar to Rc, RefCell is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. At any given time, you can have either (but not both of) one mutable reference or any number of immutable references.References must always be valid."},{"location":"public/programming/rust/rust-scratch-blockchain/#-oopstatedesignpatternfuture-work","title":"- [\u2717] OOP\u2022State\u2022DesignPattern(future work)","text":"<pre><code>-&gt; We can used it for smart contracts so we will need to implemented smart contracts\n</code></pre> <p>Using the state pattern means when the business requirements of the program change, we won\u2019t need to change the code of the value holding the state or the code that uses the value. We\u2019ll only need to update the code inside one of the state objects to change its rules or perhaps add more state objects.</p> <p>e.g Post type. This type will use the state pattern and will hold a value that will be one of three state objects representing the various states a post can be in\u2014draft, waiting for review, or published. Changing from one state to another will be managed internally within the Post type. The states change in response to the methods called by our library\u2019s users on the Post instance, but they don\u2019t have to manage the state changes directly. Also, users can\u2019t make a mistake with the states, like publishing a post before it\u2019s reviewed.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-superpowerfuture-work","title":"- [\u2717] Superpower(future work)","text":"<p>if the Rust compiler doesn\u2019t have enough information to be confident, it will reject the code. In these cases, you can use unsafe code to tell the compiler, \u201cTrust me, I know what I\u2019m doing.\u201d The downside is that you use it at your own risk:  if you use unsafe code incorrectly, problems due to memory unsafety, such as null pointer dereferencing, can occur.</p> <p>You can take five actions in unsafe Rust, called unsafe superpowers, that you can\u2019t in safe Rust. Those superpowers include the ability to:</p> <p>Dereference a raw pointer</p> <p>Call an unsafe function or method</p> <p>Access or modify a mutable static variable</p> <p>Implement an unsafe trait</p> <p>Access fields of unions</p> <p>Calling unsafe() would crash the program.</p> <p>consider unsafe to be a warning sign rather than an indicator that you\u2019re embarking on anything illegal. Unsafe means \u201cthe same level of safety offered by C at all times.\u201d </p> <p>If you still had access to (via unsafe) they might still look like valid S, but any attempt to use them as valid S is undefined behavior. \u2193 https://cheats.rs/#unsafe-unsound-undefined-dark side of force Try to avoid \"unsafe {}\", often safer, faster solution without it. Exception: FFI. People are fallible, and mistakes will happen, but by requiring these five unsafe operations to be inside blocks annotated with unsafe you\u2019ll know that any errors related to memory safety must be within an unsafe block. Keep unsafe blocks small; you\u2019ll be thankful later when you investigate memory bugs. To isolate unsafe code as much as possible, it\u2019s best to enclose unsafe code within a safe abstraction and provide a safe API, which we\u2019ll discuss later in the chapter when we examine unsafe functions and methods.</p> <p>Parts of the standard library are implemented as safe abstractions over unsafe code that has been audited. Wrapping unsafe code in a safe abstraction prevents uses of unsafe from leaking out into all the places that you or your users might want to use the functionality implemented with unsafe code, because using a safe abstraction is safe.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#contributors","title":"Contributors","text":"<p>nom is the fruit of the work of many contributors over the years, many thanks for your help!</p> <p>   Contributors </p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#welcome-to-the-home-blockchain-of-rustaceans_1","title":"Welcome To The Home Blockchain Of \ud83e\udd80Rustaceans","text":"<p>The repo is a prerequisite of the Substrate-Framework and it would be nicer to practice too.</p> <p>The repo is included Rust syntax, configuration and the goal of creating scratch codes like one is becuase of providing testbed environment of Blockchain.</p> <p>The Next reason is to using some features of Rust-Lang that I had wanted to implement it after learning Rust.</p> <p>Used json in the main runner of the project so that consume json transactions as a offchain blockchain.</p> <p>As you follow materials you can see (future work) which means you can add these concepts to the project. I have some idea that you can affort on it to completing future works.</p> <p>Smart Contracts, MultiSignature, RPC, Make A Better CLI, and something that you can implementing (Do not worry sice most of your works will merge to main branch. We will not create a framework or complete Blockchain because we just need to learning more and used it use-cases)</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#the-difference-between-the-current-work-and-the-prev-works_1","title":"The difference between the current work and the prev works","text":"<p>I have tried to use fundamental concepts correctly, for example, all of us know any block have not any copy so because of it we are calling blockchain! Unlike many repositories on GitHub(testbed/scratched projects-non productive) that almost use Copy/Clone attributes of Rust-Lang for creating block. In the following, there are some features that cause a different project.</p> <p>Currently Status: Under refactoring with contributors</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#how-to-contribute-easy_1","title":"How To Contribute Easy","text":"<p>[Rust 2021 A Scratch Blockchain-1] Youtube-Rust 2021 A Scratch Blockchain-1</p> <p>Rust 2021 A Scratch Blockchain-2 Youtube-Rust 2021 A Scratch Blockchain-2</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#documents-crate","title":"Documents Crate","text":"<p>Docs.rs</p> <p>Package Manager crates.io</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#features_1","title":"Features","text":"<ul> <li> <p>[\u2713] Modular</p> </li> <li> <p>[\u2713] Customized Error Handling</p> </li> <li> <p>[\u2713] Json &amp; String Data Deserialized</p> </li> <li> <p>[\u2713] Functional Programming(Closure)</p> </li> <li> <p>[\u2713] Cryptography-Hashing Alogrithm SHA-256</p> </li> <li> <p>[-] WebAssembly(Next future video)</p> </li> <li> <p>[-] Unit &amp; Integration Testing(structure-need more time in the future)</p> </li> <li> <p>[-] Configuration Files(devOps-need more time in the future)</p> </li> </ul>"},{"location":"public/programming/rust/rust-scratch-blockchain/#instructions-for-working-with_1","title":"Instructions for working with","text":"<pre><code>DIFFICULTY={difficulty} cargo {mode} {file name}\n</code></pre> <p>{difficulty}: (optional-key-env) value default 0x00ffffffffffffffffffffffffffffff.It must be 32 byte.</p> <p>{mode}: macro, string, file/ default mode is on the macrojson mode.</p> <p>{macro, string} there is in project and you can not access or manipulate except by getting the project. serde_json support string and macro based on called library. {file} json file is external .json file that you can set it for command line</p> <p>{file name} index directory of the project sample-bolocks.json</p> <p>Example: </p> <p><pre><code>cargo build\ncargo run\nRUST_LOG=INFO DIFFICULTY=0x00000fffffffffffffffffffffffffff time cargo run file sample-bolocks.json\nDIFFICULTY=0x00000fffffffffffffffffffffffffff time cargo run macrojson\nDIFFICULTY=0x00000fffffffffffffffffffffffffff time cargo run stringjson\ntime cargo run\ncargo watch -x run\ncargo test\n</code></pre> Using time and watch is optional and depends on your purpose</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#instructions-for-installing-bin","title":"Instructions for installing-bin","text":"<pre><code>curl -LSfs https://github.com/armanriazi/armanriazi/blob/main/install-0.sh | sh -s -- --git armanriazi/rust-scratch-blockchain\n</code></pre>"},{"location":"public/programming/rust/rust-scratch-blockchain/#how-to-consume-the-library","title":"How to consume the library","text":"<p>1. <pre><code>cargo new yourprojectname\n</code></pre> 2. Add new dependency <pre><code>[dependencies]\nblockchain-scratch-rust = \"0.3.0\"\n</code></pre> 3. To update dependencies <pre><code>cargo update\n</code></pre> 4. Your main.rs of the program <pre><code>use library_blockchain::*;\nfn main() {\n    println!(\"Hello, world!\");\n\n    library_blockchain::blockchain_executive::main();\n}\n</code></pre> 5. Due to the file sample-three-block-noerror.json in the repo you might copy it and manipulate it, in spite of that you can use generators of your database or ORMs for producing a file.json as the same as following content. Get attention to keys in the file for example we must have transaction{number} and if we write 'mytransaction 1' and run it we will get error.</p> Json File <pre><code>{\n    \"blocks\":[{    \n    \"block1\":[{\n        \"transactions\":[{\n        \"transaction1\":[{\n            \"inputs\":[{\n\n            }],    \n            \"outputs\":[{\n            \"to_addr\": \"Alice\",\n            \"value\": \"50\"                           \n            },{\n            \"to_addr\": \"Bob\",\n            \"value\": \"7\"                           \n            }]    \n        }]                        \n        }]                 \n    }] ,\n    \"block2\":[{\n        \"transactions\":[{\n        \"transaction1\":[{\n            \"inputs\":[{\n\n            }],    \n            \"outputs\":[{\n            \"to_addr\": \"Chris\",\n            \"value\": \"536\"                         \n            }]    \n        }],\n        \"transaction2\":[{\n            \"inputs\":[{\n            \"to_addr\": \"Alice\",\n            \"value\": \"50\"                           \n            },{\n            \"to_addr\": \"Bob\",\n            \"value\": \"7\"      \n            }],    \n            \"outputs\":[{\n            \"to_addr\": \"Alice\",\n            \"value\": \"49\"                           \n            },{\n            \"to_addr\": \"Bob\",\n            \"value\": \"6\"                        \n            }]    \n        }]                          \n        }]                 \n    }],\n    \"block3\":[{\n        \"transactions\":[{\n        \"transaction1\":[{\n            \"inputs\":[{                                                                    \n            }],    \n            \"outputs\":[{\n            \"to_addr\": \"Alice\",\n            \"value\": \"49\"                           \n            },{\n            \"to_addr\": \"Bob\",\n            \"value\": \"6\"                           \n            }]    \n        }]                        \n        }]                 \n    }]        \n     }] \n    }    \n</code></pre> <ol> <li>Run of one of above commands.</li> </ol> <p><pre><code>RUST_LOG=info DIFFICULTY=0x0000ffffffffffffffffffffffffffff time cargo run file sample-three-block-noerror.json\n</code></pre> 7. Everything is Ok and it is working fine.   Console Log <pre><code>    Finished dev [unoptimized + debuginfo] target(s) in 0.07s\n     Running `target/debug/consume-rust-scratch-blockchain file sample-three-block-noerror.json`\nHello, world!\n[2022-07-06T13:30:22Z INFO  library_blockchain::blockchain_executive] ------------Welcome to env_logger------------\n[2022-07-06T13:30:22Z INFO  library_blockchain::blockchain_executive] Starting Up...\n**************************************************************\nSelected mode is file!\n**BlOcKcHaIn SiGnAls:**\nBlock[0]: 17b9180cd95fef6c0e8ab81702ab9cfd835b4af373fdc7ee45d13cba69c40000 at: 1657114222903 with: 1 trx, nonce: 131263\n\n[2022-07-06T13:30:24Z INFO  library_blockchain::factory] Success updated With the block 1.\n\n**BlOcKcHaIn SiGnAls:**\nBlock[1]: eeb73730eb18ef3efbadbe7b5f3cc1a07c0d97b6c97e7df8945e61089b280000 at: 1657114224538 with: 2 trx, nonce: 257740\n\n[2022-07-06T13:30:30Z INFO  library_blockchain::factory] Success updated With the block 2.\n\n**BlOcKcHaIn SiGnAls:**\nBlock[2]: 3674f23d58002856c17816590f7e2ff195005ad477c67e704d61eead25710000 at: 1657114230226 with: 1 trx, nonce: 37407\n\n[2022-07-06T13:30:30Z INFO  library_blockchain::factory] Success updated With the block 3.\n\n7.67user 0.16system 0:08.03elapsed 97%CPU (0avgtext+0avgdata 25300maxresident)k\n2280inputs+0outputs (13major+6505minor)pagefaults 0swaps\n</code></pre> </p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#wasmfuture-work","title":"WASM(future work)","text":"<p>For consume the library we used some WASM compiling strategy:</p> <p>Bindgen</p> <p>Wasmer-LLVM</p> <p>Wasmer-Wasi</p> <p>Binary of rust-scratch-blockchain</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#used-concepts_1","title":"Used Concepts","text":""},{"location":"public/programming/rust/rust-scratch-blockchain/#-memoizationlazyevaluation_1","title":"- [\u2713] Memoization\u2022Lazy\u2022Evaluation","text":"<p>We can create a struct that will hold the closure and the resulting value of calling the closure.</p> <p>The struct will execute the closure only if we need the resulting value, and it will cache the resulting value so the rest of our code doesn\u2019t have to be responsible for saving and reusing the result.</p> <p>FnOnce consumes the variables it captures from its enclosing scope, known as the closure\u2019s environment. To consume the captured variables, the closure must take ownership of these variables and move them into the closure when it is defined. The Once part of the name represents the fact that the closure can\u2019t take ownership of the same variables more than once, so it can be called only once.</p> <p>FnMut can change the environment because it mutably borrows values.</p> <p>Fn borrows values from the environment immutably. FnOnce: takes the whole value. FnMut: takes a mutable reference. Fn: takes a regular reference.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-coercion_1","title":"- [\u2713] Coercion","text":"<p>Deref coercion is a convenience that Rust performs on arguments to functions and methods. Deref coercion works only on types that implement the Deref trait. Deref coercion converts such a type into a reference to another type. For example, deref coercion can convert &amp;String to &amp;str because String implements the Deref trait such that it returns &amp;str.</p> <p>The number of times that Deref::deref needs to be inserted is resolved at compile time, so there is no runtime penalty for taking advantage of deref coercion! Similar to how you use the Deref trait to override the * operator on immutable references, you can use the DerefMut trait to override the * operator on mutable references.the Drop trait is almost always used when implementing a smart pointer. For example, when a Box is dropped it will deallocate the space on the heap that the box points to. <p>Note that we didn\u2019t need to call the drop method explicitly.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dstorunsizedtype_1","title":"- [\u2713] DST\u2022Or\u2022Unsizedtype","text":"<p>DSTs or unsized types': str(but not &amp;str-So although a &amp;T is a single value that stores the memory address of where the T is located, a &amp;str is two values: the address of the str and its length. Rust has a particular trait called the Sized trait to determine whether or not a type\u2019s size is known at compile time. This trait is automatically implemented for everything whose size is known at compile time. In addition, Rust implicitly adds a bound on Sized to every generic function. </p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-operation_1","title":"- [\u2713] Operation","text":"<pre><code>-&gt; Methods are functions that are coupled to some object.\n</code></pre> <p>From a syntactic point of view, these are just functions that don\u2019t need to specify one of their arguments. Rather than calling open() and passing a File object in as an argument (read(f, buffer)), methods allow the main object to be implicit in the function call (f.read(buffer)) using the dot operator.</p> <p>There are a number of theoretical differences between methods and functions, but a detailed discussion of those computer science topics is available in other books. Briefly, functions are regarded as pure, meaning their behavior is determined solely by their arguments. Methods are inherently impure, given that one of their arguments is effectively a side effect. These are muddy waters, though. Functions are perfectly capable of acting on side effects themselves. Moreover, methods are implemented with functions. And, to add an exception to an exception, objects sometimes implement static methods, which do not include implicit arguments. To define methods, Rust programmers use an impl block</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-borrowchecker_1","title":"- [\u2713] Borrowchecker","text":"<p>The borrow checker checks that all access to data is legal, which allows Rust to prevent safety issues. Learning how this works will, at the very least, speed up your development time by helping you avoid run-ins with the compiler. More significantly though, learning to work with the borrow checker allows you to build larger software systems with confidence. It underpins the term fearless concurrency.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-borrowcheckerlifetime_1","title":"- [\u2713] Borrowchecker\u2022Lifetime","text":"<pre><code>-&gt; Lifetime=Timetolive=Subset of their scope\n</code></pre> <p>Make hypotheses about whether or not your experiments will pass the borrow checker before you compile reference in Rust has a lifetime, which is the scope for which that reference is valid. Most of the time, lifetimes are implicit and inferred, just like most of the time, types are inferred. We must annotate types when multiple types are possible. In a similar way, we must annotate lifetimes when the lifetimes of references could be related in a few different ways.</p> <p>The main aim of lifetimes is to prevent dangling references, which cause a program to reference data other than the data it\u2019s intended to reference. All references in Rust have a lifetime, even if they are not explicitly annotated. The compiler is capable of implicitly assigning lifetimes. </p> <p>A value\u2019s lifetime is the period when accessing that value is valid behavior. A function\u2019s local variables live until the function returns, while global variables might live for the life of the program.</p> <p>The notion of ownership is rather limited. An owner cleans up when its values\u2019 lifetimes end.</p> <p>Although every parameter has a lifetime, these checks are typically invisible as the compiler can infer most lifetimes by itself.</p> <p>All values bound to a given lifetime must live as long as the last access to any value bound to that lifetime.</p> <p>No lifetime annotations are required when calling a function.</p> <p>Lifetime annotations don\u2019t change how long any of the references live. Just as functions can accept any type when the signature specifies a generic type parameter, functions can accept references with any lifetime by specifying a generic lifetime parameter.</p> <p>Lifetime annotations describe the relationships of the lifetimes of multiple references to each other without affecting the lifetimes.</p> <p>The lifetime annotations indicate that the references first and second must both live as long as that generic lifetime.</p> <p>Lifetimes on function or method parameters are called input lifetimes, and lifetimes on return values are called output lifetimes.</p> <p>Although every parameter has a lifetime, these checks are typically invisible as the compiler can infer most lifetimes by itself</p> <p>All values bound to a given lifetime must live as long as the last access to any value bound to that lifetime.</p> <p>No lifetime annotations are required when calling a function.</p> <p>Using two lifetime parameters (a and b) indicates that the lifetimes of i and j are decoupled.</p> <p>fn add_with_lifetimes&lt;'a, 'b&gt;(i: &amp;'a i32, j: &amp;'b i32) -&gt; i32 {}</p> <p>Lifetime of that usage: </p> <p>the LOC('existence time' or Line of code) between when a location is first used in a certain way, and when that usage stops.</p> <p>Lifetime of that value:</p> <p>the LOC (or actual time) between when a value is created, and when that value is dropped.</p> <p>Might be useful when discussing open file descriptors, but also irrelevant here.</p> <p>Ultimately, lifetime syntax is about connecting the lifetimes of various parameters and return values of functions. Once they\u2019re connected, Rust has enough information to allow memory-safe operations and disallow operations that would create dangling pointers or otherwise violate memory safety.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dangle_1","title":"- [\u2713] Dangle","text":"<p>The main aim of lifetimes is to prevent dangling references.which has an outer scope and an inner scope. In return section of a function primitive types need to define as (&amp;'a or &amp;'static)</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-generic_1","title":"- [\u2713] Generic","text":"<p>You might be wondering whether there is a runtime cost when using generic type parameters. The good news is that using generic types won't make your run any slower than it would with concrete types.</p> <p>Rust accomplishes this by performing monomorphization of the code using generics at compile time.  Monomorphization is the process of turning generic code into specific code by filling in the concrete types that are used when compile. Every programming language has tools for effectively handling the duplication of concepts.</p> <p>In Rust, one such tool is generics. Generics are abstract stand-ins for concrete types or other properties. When we\u2019re writing code, we can express the behavior of generics or how they relate to other generics without knowing what will be in their place when compiling and running the code.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#staticdispatchpassed_1","title":"Static\u2022Dispatch(Passed)","text":"<pre><code>-&gt; Monomorphization\n</code></pre> <p>Dispatch is the mechanism to determine which specific version of code is actually run when it involves polymorphism. Two major forms of dispatch are static dispatch and dynamic dispatch. While Rust favors static dispatch, it also supports dynamic dispatch through a mechanism called \u2018trait objects\u2019. When Rust compiles this code, it performs monomorphization.</p> <p>The monomorphized version of the code looks like the following. The generic Option is replaced with the specific definitions created by the compiler: versions of a polymorphic function (or any polymorphic entity) during compilation is called Monomorphization. <p>Because Rust compiles generic code into code that specifies the type in each instance, we pay no runtime cost for using generics. When the code runs, it performs just as it would if we had duplicated each definition by hand. The process of monomorphization makes Rust\u2019s generics extremely efficient at runtime. This is opposed to dynamic dispatch</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dynamicdispatch_1","title":"- [\u2713] Dynamic\u2022Dispatch","text":"<p>The code that results from monomorphization is doing static dispatch, which is when the compiler knows what method you\u2019re calling at compile time. This is opposed to dynamic dispatch, which is when the compiler can\u2019t tell at compile time which method you\u2019re calling. In dynamic dispatch cases, the compiler emits code that at runtime will figure out which method to call.</p> <p>When we use trait objects, Rust must use dynamic dispatch. The compiler doesn\u2019t know all the types that might be used with the code that is using trait objects, so it doesn\u2019t know which method implemented on which type to call. Instead, at runtime, Rust uses the pointers inside the trait object to know which method to call. There is a runtime cost when this lookup happens that doesn\u2019t occur with static dispatch. Dynamic dispatch also prevents the compiler from choosing to inline a method\u2019s code, which in turn prevents some optimizations.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-blanketimplementation_1","title":"- [-] Blanket\u2022Implementation","text":"<p>Any implementation where a type appears uncovered. impl Foo for T, impl Bar for T, impl Bar&gt; for T, and impl Bar for Vec are considered blanket impls. <p>We can also conditionally implement a trait for any type that implements another trait. Implementations of a trait on any type that satisfies the trait bounds are called blanket implementations and are extensively used in the Rust standard library. For example, the standard library implements the ToString trait on any type that implements the Display trait.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-boundsyntax_1","title":"- [\u2713] Bound(syntax)","text":"<p>Bounds are constraints on a type or trait. For example, if a bound is placed on the argument a function takes, types passed to that function must abide by that constraint.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-trait_1","title":"- [\u2713] Trait","text":"<p>We can use traits to define shared behavior in an abstract way. We can use trait bounds to specify that a generic type can be any type that has certain behavior. Traits are similar to a feature often called interfaces in other languages, although with some differences.</p> <p>What is a trait? A trait is a language feature that is analogous to an interface, protocol, or contract. If you have a background in object-oriented programming, consider a trait to be an abstract base class. If you have a background in functional programming, Rust\u2019s traits are close to Haskell\u2019s type classes these also support a form of inheritance that\u2019s common in most object oriented languages. For now, though, the thing to remember is that traits represent common behavior (Or reusable codes like println!)that types opt into via the syntax impl Trait for Type.</p> <p>After the method signature, instead of providing an implementation within curly brackets, we use a semicolon.</p> <p>This interface consists of associated items, which come in three varieties: functions, types, constants.</p> <p>All traits define an implicit type parameter Self that refers to \"the type that is implementing this interface\".</p> <p>Trait functions may omit the function body by replacing it with a semicolon. This indicates that the implementation must define the function. If the trait function defines a body, this definition acts as a default for any implementation which does not override it. Similarly, associated constants may omit the equals sign and expression to indicate implementations must define the constant value. Associated types must never define the type, the type may only be specified in an implementation.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-polymorphism_1","title":"- [\u2713] Polymorphism","text":"<p>In a struct or enum, the data in the struct fields and the behavior in impl blocks are separated, whereas in other languages, the data and behavior combined into one concept is often labeled an object.However, trait objects are more like objects in other languages in the sense that they combine data and behavior.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-unrolling_1","title":"- [\u2713] Unrolling","text":"<p>It is an optimization that removes the overhead of the loop controlling code and instead generates repetitive code for each iteration of the loop.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-bindingmatch_1","title":"- [\u2713] Binding\u2022Match","text":"<p>The compiler automatically references the Some, and since we're borrowing, name is bound as ref name automatically as well. If we were mutating:</p> <pre><code> //https://blog.rust-lang.org/2018/05/10/Rust-1.26.html#nicer-match-bindings\n// `self` has type `&amp;List`, and `*self` has type `List`, matching on a\n// concrete type `T` is preferred over a match on a reference `&amp;T`\n// after Rust 2018 you can use self here and tail (with no ref) below as well,\n// rust will infer &amp;s and ref tail. \n</code></pre>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-dataracerustaceans_1","title":"- [\u2717] Datarace\u2022Rustaceans","text":"<p>Note: The opposite of referencing by using &amp; is dereferencing, which is accomplished with the dereference operator, *.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-nanphilosophy_1","title":"[-] Nan(philosophy)","text":"<p>Floating-point types include \u201cnot a number\u201d values (represented in Rust syntax as NAN values) to handle these cases.</p> <p>NAN values poison other numbers. Almost all operations interacting with NAN return NAN. Another thing to be mindful of is that, by definition, NAN values are never equal.  Programming language design is often thought of in terms of which features you include, but the features you exclude are important too. Rust doesn\u2019t have the null feature that many other languages have. Null is a value that means there is no value there. In languages with null, variables can always be in one of two states: null or not-null. In his 2009 presentation \u201cNull References: The Billion Dollar Mistake,\u201d Tony Hoare, the inventor of null, has this to say: I call it my billion-dollar mistake. At that time, I was designing the first comprehensive type system for references in an object-oriented language. My goal was to ensure that all use of references should be absolutely safe, with checking performed automatically by the compiler. But I couldn\u2019t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years. </p> <p>To program defensively, make use of the is_nan() and is_finite() methods. Inducing a crash, rather than silently proceeding with a mathematical error, allows you to debug close to what has caused the problem. The following illustrates using the is_finite()  </p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-duplicationliteral_1","title":"- [\u2713] Duplication((literal)","text":"<p>Concept of copying the pointer, length, and capacity without copying the data probably sounds like making a shallow copy.</p> <p>If we do want to deeply copy the heap data of the String, not just the stack data, we can use a common method called clone</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-semanticliteral_1","title":"- [\u2713] Semantic(literal)","text":"<p>Primitive types are said to possess copy semantics, whereas all other types have move semantics. Adding more functionality (e.g., reference-counting semantics rather than move semantics) to types by wrapping these in other types typically reduces their run-time performance.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-zerocostabstractionsliteral_1","title":"- [\u2713] Zero\u2022Cost\u2022Abstractions(literal)","text":"<p>One of the ways this manifests is by not adding extra data around values within structs.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-coherenceliteral_1","title":"- [\u2713] Coherence(literal)","text":"<pre><code>-&gt; Orphan = Trait\u2022External\u2022Implement\n</code></pre> <p>But we can\u2019t implement external traits on external types. For example, we can\u2019t implement the Display trait on Vec within our aggregator crate, because Display and Vec are defined in the standard library and aren\u2019t local to our aggregator crate. This restriction is part of a property of programs called coherence, and more specifically the orphan rule, so named because the parent type is not present. This rule ensures that other people\u2019s code can\u2019t break your code and vice versa.  <p>Without the rule, two crates could implement the same trait for the same type, and Rust wouldn\u2019t know which implementation to use.</p> <p>Preserves contextual coherence of trace data from tasks/function/methods when logging. </p> <p>For example new instance of a struct of course, as you probably already know, struct then you can just summerize your struct in a method.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-jargonliteral_1","title":"- [\u2713] Jargon(literal)","text":"<p>Functional programming jargon: \u201cto cons x onto y\u201d informally means to construct a new container instance by putting the element x at the start of this new container, followed by the container y.Other, more complex recursive data types are useful in various situations, but by starting with the cons list, we can explore how boxes let us define a recursive data type without much distraction.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-refactorliteral_1","title":"- [\u2713] Refactor(literal)","text":"<p>One alternative to refactoring is to simply copy values. Doing this often is typically frowned upon, however, but it can be useful in a pinch. Primitive types like integers are a good example of that. Primitive types are cheap for a CPU to duplicate\u2014so cheap, in fact, that Rust always copies these if it would otherwise worry about ownership being moved.</p> <p>Types can opt into two modes of duplication: cloning and copying.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-patternnewtype_1","title":"- [\u2713] Pattern\u2022Newtype","text":"<p>Using the Newtype Pattern to Implement External Traits on External Types 'thin wrapper around the type' : part of Vec is noticed. We can make a Wrapper struct that holds an instance of Vec; then we can implement Display on Wrapper and use the Vec value The downside of using this technique is that Wrapper is a new type, so it doesn\u2019t have the methods of the value it\u2019s holding. We would have to implement all the methods of Vec directly on Wrapper such that the methods delegate to self.0, which would allow us to treat Wrapper exactly like a Vec. <p>If we wanted the new type to have every method the inner type has, implementing the Deref trait (If we don\u2019t want the Wrapper type to have all the methods of the inner type\u2014for example, to restrict the Wrapper type\u2019s behavior\u2014we would have to implement just the methods we do want manually.)</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-patterndesigninteriorfuture-work_1","title":"- [\u2717] Pattern\u2022Design\u2022Interior(future work)","text":"<p>Interior mutability is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses unsafe code inside a data structure to bend Rust\u2019s usual rules that govern mutation and borrowing. </p> <p>RefCell type that follows the interior mutability pattern. <p>Unlike Rc, the RefCell type represents single ownership over the data it holds. So, what makes RefCell different from a type like Box? Recall the borrowing rules... <p>Similar to Rc, RefCell is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. At any given time, you can have either (but not both of) one mutable reference or any number of immutable references.References must always be valid."},{"location":"public/programming/rust/rust-scratch-blockchain/#-typewraperfuture-work_1","title":"- [\u2717] Type\u2022Wraper(future work)","text":"<pre><code>-&gt; Wrapper type = Reference-Counted Value = Shared Ownership = Track valid references\n</code></pre> <p>Use wrapper types, which allow more flexibility than what is available by default. These, however, incur costs at runtime to ensure that Rust\u2019s safety guarantees are maintained. Another way to phrase this is that Rust allows programmers to opt in to garbage collection.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-memleakfuture-work_1","title":"- [\u2717] Mem\u2022Leak(future work)","text":"<pre><code>-&gt; Managing Memory Leak\n</code></pre> <p>Rust\u2019s memory safety guarantees make it difficult, but not impossible, to accidentally create memory that is never cleaned up (known as a memory leak). Preventing memory leaks entirely is not one of Rust\u2019s guarantees in the same way that disallowing data races at compile time is, meaning memory leaks are memory safe in Rust.</p> <p>We can see that Rust allows memory leaks by using Rc and RefCell: it\u2019s possible to create references where items refer to each other in a cycle. This creates memory leaks because the reference count of each item in the cycle will never reach 0, and the values will never be dropped."},{"location":"public/programming/rust/rust-scratch-blockchain/#-memdoublefreefuture-work_1","title":"- [\u2717] Mem\u2022Doublefree(future work)","text":"<p>This is a problem: when s2 and s1 (s2 is copied s1 means 2different pointer and the same data) go out of scope, they will both try to free the same memory. This is known as a double free error and is one of the memory safety bugs we mentioned previously. Freeing memory twice can lead to memory corruption, which can potentially lead to security vulnerabilities.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-memdeallocatingorraiifuture-work_1","title":"- [\u2717] Mem\u2022Deallocating\u2022or\u2022RAII(future work)","text":"<p>Note: In C++, this pattern of deallocating resources at the end of an item\u2019s lifetime is sometimes called Resource Acquisition Is Initialization (RAII). The drop function in Rust will be familiar to you if you\u2019ve used RAII patterns.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-threadfuture-work_1","title":"- [\u2717] Thread(future work)","text":"<p>Which parts of your code on different threads will run. This can lead to problems, such as:</p> <p>Race conditions, where threads are accessing data or resources in an inconsistent order Deadlocks, where two threads are waiting for each other to finish using a resource the other thread has, preventing both threads from continuing Bugs that happen only in certain situations and are hard to reproduce and fix reliably.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-threadstrategesfuture-work_1","title":"- [\u2717] Thread\u2022Strateges(future work)","text":"<pre><code>-&gt; Priority Performance\n</code></pre> <p>Stealing_Join: execute code in parallel when there are idle CPUs to handle it.</p> <p>When join is called from outside the thread pool, the calling thread will block while the closures execute in the pool. When join is called within the pool, the calling thread still actively participates in the thread pool. It will begin by executing closure A (on the current thread). While it is doing that, it will advertise closure B as being available for other threads to execute. Once closure A has completed, the current thread will try to execute closure B; if however closure B has been stolen, then it will look for other work while waiting for the thief to fully execute closure B. (This is the typical work-stealing strategy). Send is require because we have jump from quick func(thread a) to part func(thread b) frequently.</p> <p>Atomic: types provide primitive shared-memory communication between threads, and are the building blocks of other concurrent types. This module defines atomic versions of a select number of primitive types, including AtomicBool, AtomicIsize, AtomicUsize, AtomicI8, AtomicU16, etc. Atomic types present operations that, when used correctly, synchronize updates between threads. Each method takes an Ordering which represents the strength of the memory barrier for that operation. These orderings are the same as the C++20 atomic orderings. For more information see the nomicon.</p> <p>Atomic variables are safe to share between threads (they implement Sync) but they do not themselves provide the mechanism for sharing and follow the threading model of Rust. The most common way to share an atomic variable is to put it into an Arc (an atomically-reference-counted shared pointer). Atomic types may be stored in static variables, initialized using the constant initializers like AtomicBool::new. Atomic statics are often used for lazy global initialization.</p> <p>Spin_Loop_Yeild   also known as busy loop and spin loop-If you want to sleep pause a thread for short amounts of time, or if your application is sensitive to timing, use a spin loop</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-unsafeexternmanglingfuture-work_1","title":"- [\u2717] Unsafe\u2022Extern\u2022Mangling(future work)","text":"<pre><code>&gt; Mangling is when a compiler changes the name we\u2019ve given a function to a different name that contains more information for other parts of the compilation process to consume but is less human readable. Every programming language compiler mangles names slightly differently, so for a Rust function to be nameable by other languages, we must disable the Rust compiler\u2019s name mangling.\n</code></pre>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-interiormutabilitypattern_1","title":"- [\u2713] Interior\u2022Mutability\u2022Pattern","text":"<p>RefCell: Lets us have many immutable borrows or one mutable borrow at any point in time. Mutating the value inside an immutable value is the interior mutability pattern. Interior mutability is a design pattern in Rust that allows you to mutate data even when there are immutable references to that data; normally, this action is disallowed by the borrowing rules. To mutate data, the pattern uses unsafe code inside a data structure to bend Rust\u2019s usual rules that govern mutation and borrowing.  RefCell type that follows the interior mutability pattern. Unlike Rc, the RefCell type represents single ownership over the data it holds. So, what makes RefCell different from a type like Box? Recall the borrowing rules, Similar to Rc, RefCell is only for use in single-threaded scenarios and will give you a compile-time error if you try using it in a multithreaded context. At any given time, you can have either (but not both of) one mutable reference or any number of immutable references.References must always be valid."},{"location":"public/programming/rust/rust-scratch-blockchain/#-oopstatedesignpatternfuture-work_1","title":"- [\u2717] OOP\u2022State\u2022DesignPattern(future work)","text":"<pre><code>-&gt; We can used it for smart contracts so we will need to implemented smart contracts\n</code></pre> <p>Using the state pattern means when the business requirements of the program change, we won\u2019t need to change the code of the value holding the state or the code that uses the value. We\u2019ll only need to update the code inside one of the state objects to change its rules or perhaps add more state objects.</p> <p>e.g Post type. This type will use the state pattern and will hold a value that will be one of three state objects representing the various states a post can be in\u2014draft, waiting for review, or published. Changing from one state to another will be managed internally within the Post type. The states change in response to the methods called by our library\u2019s users on the Post instance, but they don\u2019t have to manage the state changes directly. Also, users can\u2019t make a mistake with the states, like publishing a post before it\u2019s reviewed.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#-superpowerfuture-work_1","title":"- [\u2717] Superpower(future work)","text":"<p>if the Rust compiler doesn\u2019t have enough information to be confident, it will reject the code. In these cases, you can use unsafe code to tell the compiler, \u201cTrust me, I know what I\u2019m doing.\u201d The downside is that you use it at your own risk:  if you use unsafe code incorrectly, problems due to memory unsafety, such as null pointer dereferencing, can occur.</p> <p>You can take five actions in unsafe Rust, called unsafe superpowers, that you can\u2019t in safe Rust. Those superpowers include the ability to:</p> <p>Dereference a raw pointer</p> <p>Call an unsafe function or method</p> <p>Access or modify a mutable static variable</p> <p>Implement an unsafe trait</p> <p>Access fields of unions</p> <p>Calling unsafe() would crash the program.</p> <p>consider unsafe to be a warning sign rather than an indicator that you\u2019re embarking on anything illegal. Unsafe means \u201cthe same level of safety offered by C at all times.\u201d </p> <p>If you still had access to (via unsafe) they might still look like valid S, but any attempt to use them as valid S is undefined behavior. \u2193 https://cheats.rs/#unsafe-unsound-undefined-dark side of force Try to avoid \"unsafe {}\", often safer, faster solution without it. Exception: FFI. People are fallible, and mistakes will happen, but by requiring these five unsafe operations to be inside blocks annotated with unsafe you\u2019ll know that any errors related to memory safety must be within an unsafe block. Keep unsafe blocks small; you\u2019ll be thankful later when you investigate memory bugs. To isolate unsafe code as much as possible, it\u2019s best to enclose unsafe code within a safe abstraction and provide a safe API, which we\u2019ll discuss later in the chapter when we examine unsafe functions and methods.</p> <p>Parts of the standard library are implemented as safe abstractions over unsafe code that has been audited. Wrapping unsafe code in a safe abstraction prevents uses of unsafe from leaking out into all the places that you or your users might want to use the functionality implemented with unsafe code, because using a safe abstraction is safe.</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#contributors_1","title":"Contributors","text":"<p>nom is the fruit of the work of many contributors over the years, many thanks for your help!</p> <p>   Contributors </p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#thanks","title":"Thanks","text":"<p>Convert string to u128</p>"},{"location":"public/programming/rust/rust-scratch-blockchain/#solved-issues","title":"Solved Issues","text":"<p>Convert-string-to-u128</p>"},{"location":"public/programming/rust/rust/","title":"Rust Programming","text":""},{"location":"public/programming/rust/rust/#certificate-2023","title":"Certificate 2023","text":"Expert Priod By Supported By Inquiry Documents Become-A-Rust-Professional 138H educative.io/profile/view/5215295720652800 educative.io 1, 2, 3, 4 Boundled Substrate-For-Analog(Rust, Java General Code) Hands-On Lab Karat Karat, TripleByte 1 G"},{"location":"public/programming/rust/rust/#rust-language","title":"Rust-Language","text":"<p>Savvy</p> RepositoriesRelation pagePublicationResearch <ul> <li> <p>Awesome Rust </p> </li> <li> <p>Rust-Scratch-Blockchain</p> </li> <li> <p>Rust-Web-Programming</p> </li> <li> <p>Rust-All-In-One projects </p> </li> <li> <p>Rust-Survey-Json</p> </li> <li> <p>Rust-Fundamental-Finance</p> </li> <li> <p>Rust-All-In-One-non private ver 0.1.0</p> </li> </ul> <ul> <li>Rust Blockchain Framework(Substrate)</li> </ul> <ul> <li>Amazon_Ultimate Rust Systems Programming Architecting</li> <li> <p>Rust-All-In-One(Available to purchase | En edition)</p> </li> <li> <p>Rust Programming 3 Parts Multimedia | Fa edition </p> </li> </ul> <ul> <li> <p>Highlighted Deep Dive Into Polkadot/Substrate/Kusama/Rust-Lang</p> </li> <li> <p>Rust-Lang-Ecosystem</p> </li> <li> <p>Rust-lang-Hello-World</p> </li> </ul>"},{"location":"public/programming/rust/rust/#rust-all-in-one-private","title":"Rust-All-In-One-Private","text":"<code>How to learn quickly ?</code> <p>I have the pleasure of introducing a repository that has more than 800 samples and has collected more than seven significant references. I made a customised online book that contains md-files, and you can search for any gathered concept.</p> <p>I was wondering if you wanted to contact me. To gain access online, books with codes have a value of $100.</p>"},{"location":"public/programming/rust/rust/#videos","title":"Videos","text":"<p>[[Rust 2021 A Scratch Blockchain-1]]</p> <p>[[Rust 2021 A Scratch Blockchain-2]]</p> <p>Read Me</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/","title":"Armanriazi ethereum in real estate","text":""},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#a-guide-to-demoing-the-real-estate-contract","title":"A guide to demoing the real-estate contract","text":""},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#prerequisites","title":"Prerequisites","text":"<p>This documentation has been intended for readers with a basic understanding on the Solidity smart contract programming language and on basic web developing tools. In order to run, the demo requires the following software to be installed. For verified functionality, the specified versions are recommended:</p> <p>Ubuntu 16.04.2 LTS</p> <p>TestRPC, version 3.0.4</p> <p>Truffle, version 3.2.1</p> <p>Node.js, version 7.9.0</p> <p>Running an Ethereum client</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#run-a-deterministic-testrpc-session","title":"Run a deterministic TestRPC session","text":"<p>At first, an Ethereum client needs to be run</p> <pre><code>testrpc -d\n</code></pre>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#deploy-the-contract","title":"Deploy the contract","text":"<p>For demoing purposes, TestRPC is a good choice for a client, for a number of reasons. First ly, TestRPC creates a new blockchain instance and transactions can be paid with tokens of the said blockchain. The creator of the TestRPC session gains access to the tokens for free and therefore transactions can be made without a cost. Secondly, by default, TestRPC is configured in such a way that there is no block time\u2014instead, blocks are created on demand, whenever transactions occur. This type of a configuration is well suited for quick testing and demoing. Finally, TestRPC can be run in deterministic mode. This means that a smart contract\u2019s address, for example, can be known already before deploying it in the blockchain. This makes it possi ble to reference the address in scripts made for testing or demoing purposes. Deploying the smart contracts The smart contracts written in Solidity need to be compiled and deployed to the blockchain. This can be achieved by using a development environment for Ethereum called Truffle. A sim ple migration script needs to be created for Truffle, after which the contracts can be deployed using the following command: <pre><code>truffle migrate\n</code></pre></p>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#open-the-status-view-in-browser","title":"Open the status view  in browser","text":"<p>Without a graphical user interface, none of the process steps can be visually observed in any way. Therefore, a simple web-browser-based status viewer has been added to the demo application. It shows the changes in the status of the different entities as a crude HTML table. The status viewer can be accessed by opening the web page index.html in any web browser. Open <code>scripts/status/index.html</code> in browser.</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#run-the-issuer-script-that-creates-real-estates-owners-and-agents-in-the-contract","title":"Run the issuer script that creates real estates, owners and agents in the contract.","text":"<p>Creating the assets and the agents, and establishing ownership For the demo, agents are needed in order to facilitate a workflow between them. Furthermore, for the purposes of facilitating the sale of a share in a housing association, the ownership of assets and documents needs to be assigned to these parties. In our demo, we utilize an approach where a master key holder has the power to establish ownerships to the system participants. We establish a master key holder that is allowed to create owners for shares of stock, property agents and shares of stock in housing companies in the application. By running the script 0-issuer.js, we create a number of owners, agents and a number of shares of stock, and we assign the first owner to each created share of stock.</p> <pre><code>cd scripts/\nnode 0-issuer\n</code></pre>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#initiate-the-sale-of-a-real-estate","title":"Initiate the sale of a real estate","text":"<p>The process of selling a share of stock in a housing company usually starts with the seller contacting a property agent or agents for a listing offer. In the case of our demo application, the seller can announce a solicitation for listing offers by initiating a transaction in the smart contract designed to facilitate the workflow. For the purposes of the demo, the smart contract should therefore be populated with at least one request for listing offers. The script 1-initiateSale.js is used for this purpose</p> <pre><code>node 1-initiateSale\n</code></pre>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#open-ipfs-web-user-interface","title":"Open IPFS web user interface","text":"<p>Uploading documents to the IPFS Selling a share of stocks in a housing corporation requires a housing manager\u2019s certificate to be drafted.2 In order to draft the certificate, the building manager must check the validity of the required information by combining data from several public and private information pools, e.g. the title and the mortgage register of the National Land Survey, the trade register of the Finnish Patent and Registration Office, the housing company debt report of the creditor banks, the property management planning report of the housing company in question, and so on. In our demo application\u2019s workflow, the data required for the housing manager\u2019s certificate are requested from the information pools. The pools directly store the requested files in the Interplanetary File System (IPFS) and enter the associated hash values into the smart contract facilitating the workflow.3 To emulate this in our demo, the hashes of three random documents followed by the hash of the housing manager\u2019s certificate are recorded into the blockchain. We first run the following command to set up a local IPFS node.</p> <pre><code>ipfs daemon\n</code></pre> <p>We then open the web user interface at http://localhost:5001/webui in browser, drag-and-drop the information pool documents to the web user interface to upload them, and make note of the hash values of the documents</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#upload-three-documents-related-to-the-real-estate","title":"Upload three documents related to the real estate","text":"<p>Upload the document to IPFS by drag-and-drop in the web UI. See what the hash of the document is and announce it in the smart contract. As the next step, the command above is executed three times, each time replacing  with the hash of a different document. We then run the following command once to upload the actual housing manager\u2019s certificate, compiled from the already uploaded documents: <pre><code>node 2-uploadDocument &lt;document hash&gt;\n</code></pre>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#upload-confirmation-letter","title":"Upload confirmation letter","text":"<p>As the next step, the command above is executed three times, each time replacing  with the hash of a different document. We then run the following command once to up load the actual housing manager\u2019s certificate, compiled from the already uploaded documents: <pre><code>node 3-uploadConfirmationLetter &lt;document hash&gt;\n</code></pre>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#create-offers-to-sell-the-property-as-a-real-estate-agentbroker","title":"Create offers to sell the property as a real estate agent/broker","text":"<p>Create offers from real estate agents to sell the property When the housing manager\u2019s certificate has been received, the real estate can be sold. In the workflow of our demo application, real estate agents compete for who gets to sell the real estate by making offers to the seller of the real estate, specifying a fee (e.g. a percentual cut) that they\u2019ll sell it for.</p> <pre><code>node 4-makeAgentOffer &lt;fee&gt;\n</code></pre>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#as-the-owner-of-the-real-estate-accept-one-of-the-agent-offers","title":"As the owner of the real estate, accept one of the agent offers","text":"<p>To emulate this market behavior, we run the command above any number of times, each time changing the fee variable to differentiate between offers. Accepting a real estate agents offer As the last step of the workflow modelled in our demo application, the seller of the share of stocks in a housing company chooses one of the listing offers made by one of the agents. This is emulated by executing the command below, along with the proper offer ID from the status viewer window.</p> <pre><code>node 5-chooseAgentOffer &lt;offer id&gt;\n</code></pre>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#smart-contract","title":"Smart Contract","text":"<p>The logic of the smart contract facilitating the workflow is defined in the Solidity file RealEstateMarket.sol. The contract defines the public methods for initiating sales, creating housing manager certificates, as well as creating listing offers and accepting them.</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-in-real-estate/#gui","title":"GUI","text":"<p>The status viewer is a web page which is useful for observing changes in the blockchain while running the demo. It shows the status of the workflow process, with all the contributions to it by the various participants. The status viewer can be run by opening the file index.html in any web browser.</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-market/","title":"Sample-SmartContrat-Solidity-By-Ethereum","text":""},{"location":"public/programming/solidity/armanriazi-ethereum-market/#github","title":"Github","text":"<p>armanriazi-ethereum-market</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-market/#online","title":"Online","text":"<p>https://armanriazi-ethereum-market.herokuapp.com/</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-market/#smart-contract","title":"Smart Contract","text":"<p>https://kovan.etherscan.io/tx/0x32c257bef96e0f16acad445cb664efa02b2f7683d80dfa5d6f8340c334b4c311</p>"},{"location":"public/programming/solidity/armanriazi-ethereum-market/#i-made-it-with-for-you","title":"I Made it with \u2764\ufe0f for you","text":""},{"location":"public/programming/solidity/solidity/","title":"Solidity","text":"<p>armanriazi-ethereum-in-real-estate</p> <p>armanriazi-ethereum-market</p>"},{"location":"public/university/master-license/","title":"Achievement-Certificates","text":"Expert Priod By Supported By Inquiry Documents Master Of Science-Information Technology 5Y Azad Najafabad University IAUN 1500007081743684272588654 Academic Degree And Score Details","tags":["achievements","me","i","armanriazi","riazi","experience","skill","career","recuit","degree","master"]},{"location":"public/university/master/","title":"About University","text":"Aerial <p>Master</p> About universityInquiry-Tracking <ul> <li> <p>Ranking of IAUN</p> </li> <li> <p>Computer &amp; BigData</p> </li> </ul> <ul> <li>Inquiry and documents with score details Master-License</li> </ul>","tags":["cloud","container","caas","virtualization","devops","master","science","armanriazi","java","university","github"]},{"location":"public/university/master/#article-and-code-repository","title":"Article and Code Repository","text":"","tags":["cloud","container","caas","virtualization","devops","master","science","armanriazi","java","university","github"]},{"location":"public/university/master/#abstract","title":"Abstract<sup>1</sup>","text":"<p>Nowadays with the development of technology, we watch an increase in the number of users using cloud computing services. The process of increasing demand, the need for intelligent supply and demand cycle, better resource management, better utilization of resources is necessary. The results indicate competition from the cycle leads to a complex challenge for selecting and scheduling tasks to provide composite services in the cloud. One of the most important issues in this field is load balancing. How to choose idle resources from a set of resources, overcoming compositional constraints, determines the importance of scheduling and resource allocation. These are NP-Hard issues. State-of-the-art architecture in the field of cloud computing for the implementation of Scientific Workflows that can be implemented in a distributed manner is becoming increasingly considered in other sciences related to cloud computing. The distinction and competition of cloud service providers to publish services with more profit and better quality to customers are summarized in features such as \"Scalability, Stability, High availability, Fault tolerance\". By providing new solutions and services for using specialists in other sciences, we can see the utilization of cloud computing Infrastructure and services in the fields of industry, commerce, health, and emergency applications. The possibility of conducting scientific workflows using virtual machines\" and containers is a goal that has been addressed in the proposed architecture. The load balancing in the form of containers at the level of virtual machines using the ant colony optimization(ACO) algorithm is one of the important goals and issues that have been covered and solutions for utilization as much as possible has been explained. According to previous studies, there is no comprehensive or stable architecture that can balance scientific workflows using the algorithm ACO at the container virtualization level. By providing a simulator environment and testing several samples with different parameters then estimated the efficiency of the ACO and default algorithm of CloudSIM e.g., first-come-first-serve (FCFS). In the case of fifty, hundred samples of \"montage\" scientific workflow, which is considered as the average load rate, balancing the workload of the containers on the virtual machine with the ACO has better results than the FCFS. If the value of the beta parameter of the ACO is assigned by zero, the algorithm will be trapped to the local optimal. In the case of a thousand sample, which is interpreted as a large amount of workload, if a \"cybershake\" workflow is used finally the results will be the same in all performance evaluation indicators. The results indicate that on average, the ACO has desired performance of almost 50% better than FCFS in the most of scenarios regarding proposed architecture and using cybershake and montage workflows.</p> <p>Keywords: [[Cloud]]Computing, #ContainerAllocation, [[Workflow]], #ACO , [[Container]] Allocation, #DevOps, [[Load_Balancer]], [[Scheduler]]</p> Info <p>Getting Project-OpenSource</p> <p></p> <p>Experimental Research: CloudSim-Workflow-Function-Container-Plus (Toward ServerMix)</p> <p>Pros:</p> <ul> <li> Simulation of cost and performance</li> <li> Scalability: Container is very scalable than the virtual machines</li> <li> Elasticity: with separating logical code and data</li> <li> Decrease overhead</li> <li> Decrease the start time of tasks</li> <li> Fixed data dependency</li> <li> Resource management</li> <li> Workflow Engine management</li> <li> Resource Management</li> </ul> <p>Cons:</p> <ul> <li> Lack of clean code and more refactoring.</li> <li> Exclude of design patterns, modular</li> <li> Not using Maven and Unit Test</li> </ul> <p>Concepts:</p> <ul> <li> Workflow: correspond with Function Composition on the simulation environment.</li> <li> Function as a Service(FaaS): Lambda or Cloud Function on the production environment.</li> <li> Cloudlet\u00a0: the task of the client or job of workflow</li> <li> ACO Scheduler: Ant colony optimization</li> <li> Serverfull: include virtual machine/on-premises</li> <li> Serverless: no server, Event-driven, Provisioning, Scalability, FaaS</li> <li> [x] ServerMix: <code>The proposed model included both of them. In implementing simulation we did not use FaaS or Lambda functions but we have some situations and marks of the Serverless as a kind of theoretical because we implemented with the capability of elasticity that is one of the Serverless features. on the other hand, we are going to need event-driven and arrow functions in this java program.</code> </li> </ul> <p>Target: Running Montage workflow base on the container. We have two repo for implementing: Container base on Vm: (Cloudsim-Workflow-Function-Container),(Cloudsim-Workflow-Function-Container-ACO)  Container base on host:(CloudSim-Workflow-Function-Container-Plus), (Cloudsim-Workflow-Function-Container-ACO)</p> <p></p> <p> Part of class diagram: ContainerCloudsim class\u00a0diagram</p> <p> Sequential diagram of WFC architecture:</p> <p> Proposed Architecture: WFC has transparency and clarity on architecture and implemented java code.</p> <p>Prerequisites: Resolve project libraries include: commons-math3\u20133.2 | 3\u20136.1, flanagan, jdom-2.0.0, opencsv-2.3 (maybe) Results with montage Num.X: Season 6</p> <p>Contact me: Let me know how can I help you with developing and researching. I am eager to your suggestion</p>","tags":["cloud","container","caas","virtualization","devops","master","science","armanriazi","java","university","github"]},{"location":"public/university/master/#references","title":"References","text":"<p>[1]  Malawski, M., Gajek, A., Zima, A., Balis, B., &amp; Figiela, K. (2020). Serverless execution of scientific workflows: Experiments with hyperflow, aws lambda and google cloud functions. Future Generation Computer Systems, 110, 502-514.</p> <p>[2]  Kavitha, Kadarla, and S. C. Sharma. \"Performance analysis of ACO\u2010based improved virtual machine allocation in cloud for IoT\u2010enabled healthcare.\" Concurrency and Computation: Practice and Experience 32, nov. 21 (2020): e5613.</p> <p>[3]  Leitner, Philipp, Erik Wittern, Josef Spillner, and Waldemar Hummer. \"A mixed-method empirical study of Function-as-a-Service software development in industrial practice.\" Journal of Systems and Software 149 (2019): 340-359.</p> <p>[4] Shafiei, Hossein, Ahmad Khonsari, and Payam Mousavi. \"Serverless computing: A survey of opportunities, challenges and applications.\" arXiv preprint arXiv:1911.01296 (2019).</p> <p>[5]  Garc\u00eda-L\u00f3pez, Pedro, Marc S\u00e1nchez-Artigas, Simon Shillaker, Peter Pietzuch, David Breitgand, Gil Vernik, Pierre Sutra, Tristan Tarrant, and Ana Juan Ferrer. \"Servermix: Tradeoffs and challenges of serverless data analytics.\" arXiv preprint arXiv:1907.11465 (2019).</p> <p>[6]  P\u00e9rez A, Molt\u00f3 G, Caballer M, Calatrava A. Serverless computing for container-based architectures. Future Generation Computer Systems. 2018 Jun 1;83:50-9.</p> <p>[7] Spillner, Josef. \"Snafu: Function-as-a-service (faas) runtime design and implementation.\" arXiv preprint arXiv:1703.07562 (2017).</p> <p>[8] Jiang, Qingye, Young Choon Lee, and Albert Y. Zomaya. \"Serverless execution of scientific workflows.\" In International Conference on Service-Oriented Computing, pp. 706-721. Springer, Cham, 2017.</p> <p>[9]  Chen, Weiwei, and Ewa Deelman. \"Workflowsim: A toolkit for simulating scientific workflows in distributed environments.\" In 2012 IEEE 8<sup>th</sup> international conference on E-science, pp. 1-8. IEEE, 2012.</p> <p>[10] Piraghaj, Sareh Fotuhi, Amir Vahid Dastjerdi, Rodrigo N. Calheiros, and Rajkumar Buyya. \"ContainerCloudSim: An environment for modeling and simulation of containers in cloud data centers.\" Software: Practice and Experience 47, no. 4 (2017): 505-521.</p> <p>[11] He, Zhenxiang, Jiankang Dong, Zhengjiang Li, and Wenjuan Guo. \"Research on Task Scheduling Strategy Optimization Based onACO in Cloud Computing Environment.\" In 2020 IEEE 5<sup>th</sup> Information Technology and Mechatronics Engineering Conference (ITOEC), pp. 1615-1619. IEEE, 2020.</p> <p>[12] Balis, Bartosz. \"HyperFlow: A model of computation, programming approach and enactment engine for complex distributed workflows.\" Future Generation Computer Systems 55 (2016): 147-162.</p> <p>[13] Kacsuk, Peter, J\u00f3zsef Kov\u00e1cs, and Zolt\u00e1n Farkas. \"The flowbster cloud-oriented workflow system to process large scientific data sets.\" Journal of Grid Computing 16, no. 1 (2018): 55-83.</p> <p>[14] Jonas, Eric, Johann Schleier-Smith, Vikram Sreekanti, Chia-Che Tsai, Anurag Khandelwal, Qifan Pu, Vaishaal Shankar et al. \"Cloud programming simplified: A berkeley view on serverless computing.\" arXiv preprint arXiv:1902.03383 (2019).</p> <p>[15] Wickremasinghe, B., Calheiros, R. N., &amp; Buyya, R. (2010, April). Cloudanalyst: A cloudsim-based visual modeller for analysing cloud computing environments and applications. In 2010 24<sup>th</sup> IEEE international conference on advanced information networking and applications (pp. 446-452). IEEE.</p> <p>[16] Soltani, Boubaker, Afifa Ghenai, and Nadia Zeghib. \"Towards distributed containerized serverless architecture in multi cloud environment.\" Procedia computer science 134 (2018): 121-128.</p> <p>[17] Sturm, Rick, Carol Pollard, and Julie Craig. \"The NIST definition of cloud computing.\" In Proc. Appl. Perform. Manage.(APM) Digit. Enterprise, pp. 267-269. 2017.</p> <p>[18] Karmel, Anil, Ramaswamy Chandramouli, and Michaela Iorga. Nist definition of microservices, application containers and system virtual machines. No. NIST Special Publication (SP) 800-180 (Draft). National Institute of Standards and Technology, 2016. </p> <p>[19] Casalicchio, Emiliano. \"Autonomic Orchestration of Containers: Problem Definition and Research Challenges.\" In VALUETOOLS. 2016.</p> <p>[20] Cord\u00f3n Garc\u00eda, Oscar, Francisco Herrera Triguero, and Thomas St\u00fctzle. \"A review on the ant colony optimization metaheuristic: Basis, models and new trends.\" Mathware &amp; soft computing. 2002 Vol. 9 N\u00fam. 2 [-3] (2002).</p> <p>[21] Choe, Tae-Young. \"Dynamic Task Scheduling Algorithm based on Ant Colony Scheme.\" (2015).</p> <p>[22] Fl\u00f3rez, Edson, Wilfredo G\u00f3mez, and Lola Bautista. \"An ant colony optimization algorithm for job shop scheduling problem.\" arXiv preprint arXiv:1309.5110 (2013).</p> <p>[23] Katiyar, Sapna, N. Ibraheem, and Abdul Quaiyum Ansari. \"Ant colony optimization: a tutorial review.\" In National Conference on Advances in Power and Control, pp. 99-110. 2015.</p> <p>[24] Lin, Miao, Jianqing Xi, Weihua Bai, and Jiayin Wu. \"Ant colony algorithm for multi-objective optimization of container-based microservice scheduling in cloud.\" IEEE Access 7 (2019): 83088-83100.</p> <p>[25] Rani, Rama, and Ritu Garg. \"Power and temperature-aware workflow scheduling considering deadline constraint in cloud.\" Arabian Journal for Science and Engineering 45, no. 12 (2020): 10775-10791.</p> <p>[26] Gutjahr, Walter J. \"ACO algorithms with guaranteed convergence to the optimal solution.\" Information processing letters 82, no. 3 (2002): 145-153.</p> <ol> <li> <p>A. Riazi [Using ACO Algorithm to Improve Performance for  Container-based Scientific Workflows] - ScieNFT 2023 November NFTID: 163\u00a0\u21a9</p> </li> </ol>","tags":["cloud","container","caas","virtualization","devops","master","science","armanriazi","java","university","github"]},{"location":"tags/","title":"Tags","text":"<p>If you want to get Updated-graph image, send me an Email to armanriyazi.github.io@gmail.com  (Title: armanriazi_github_io _ Graph)</p> <p></p> <p>If you want to get Updated-mind-mapping image, send me an Email to armanriyazi.github.io@gmail.com  (Title: armanriazi_github_io _ MindMapping) </p> <p>If you want to get Commands(Ubuntu, Devops, Blockchain CLIs) in a compact, send me an Email to armanriyazi.github.io@gmail.com  (Title: armanriazi_github_io _ Commands)</p> <p>Following is a list of relevant tags:</p>"},{"location":"tags/#angular","title":"Angular","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#aspnetcore","title":"Asp.Netcore","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#container","title":"Container","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#devops","title":"DevOps","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#graphql","title":"GraphQl","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#jquery","title":"JQuery","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#js","title":"Js","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#kubernetes","title":"Kubernetes","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#mongodb","title":"MongoDB","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#orchestration","title":"Orchestration","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#rancher","title":"Rancher","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#sql","title":"Sql","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#sqlserver","title":"SqlServer","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#about","title":"about","text":"<ul> <li>About Me</li> <li>Reach Me</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> </ul>"},{"location":"tags/#achievements","title":"achievements","text":"<ul> <li>achievements</li> <li>publications</li> <li>master degree license</li> </ul>"},{"location":"tags/#api","title":"api","text":"<ul> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#armanriazi","title":"armanriazi","text":"<ul> <li>About Me</li> <li>achievements</li> <li>Reach Me</li> <li>publications</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> <li>master degree license</li> <li>About University</li> </ul>"},{"location":"tags/#articles","title":"articles","text":"<ul> <li>publications</li> </ul>"},{"location":"tags/#broker","title":"broker","text":"<ul> <li>Message Brokers</li> </ul>"},{"location":"tags/#build","title":"build","text":"<ul> <li>Ocw runtime</li> </ul>"},{"location":"tags/#csharp","title":"cSharp","text":"<ul> <li>Programming projects(archived)</li> </ul>"},{"location":"tags/#caas","title":"caas","text":"<ul> <li>Rancher</li> <li>About University</li> </ul>"},{"location":"tags/#career","title":"career","text":"<ul> <li>About Me</li> <li>achievements</li> <li>Reach Me</li> <li>publications</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>master degree license</li> </ul>"},{"location":"tags/#cicd","title":"cicd","text":"<ul> <li>CICD</li> <li>Kubernetes</li> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#cloud","title":"cloud","text":"<ul> <li>Cloud</li> <li>Message Brokers</li> <li>Virualization</li> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> <li>About University</li> </ul>"},{"location":"tags/#codebase","title":"codebase","text":"<ul> <li>Arman Riazi</li> </ul>"},{"location":"tags/#compile","title":"compile","text":"<ul> <li>Libc rust</li> </ul>"},{"location":"tags/#connect","title":"connect","text":"<ul> <li>Reach Me</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> </ul>"},{"location":"tags/#contact","title":"contact","text":"<ul> <li>Reach Me</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> </ul>"},{"location":"tags/#container_1","title":"container","text":"<ul> <li>Docker</li> <li>Rancher</li> <li>About University</li> </ul>"},{"location":"tags/#corda","title":"corda","text":"<ul> <li>Corda-R3</li> </ul>"},{"location":"tags/#couchdb","title":"couchdb","text":"<ul> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#crowdloan","title":"crowdloan","text":"<ul> <li>Crowdloan research intro</li> </ul>"},{"location":"tags/#degree","title":"degree","text":"<ul> <li>master degree license</li> </ul>"},{"location":"tags/#devops_1","title":"devops","text":"<ul> <li>Hyperledger</li> <li>CICD</li> <li>Cloud</li> <li>DevOps</li> <li>Docker</li> <li>Elastic-Search</li> <li>Kubernetes</li> <li>Rancher</li> <li>Virualization</li> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> <li>About University</li> </ul>"},{"location":"tags/#docker","title":"docker","text":"<ul> <li>Docker</li> </ul>"},{"location":"tags/#elastic","title":"elastic","text":"<ul> <li>Elastic-Search</li> </ul>"},{"location":"tags/#esxi","title":"esxi","text":"<ul> <li>Virualization</li> </ul>"},{"location":"tags/#ethereum_ecosystem","title":"ethereum_ecosystem","text":"<ul> <li>Solidity</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>SmartContract</li> </ul>"},{"location":"tags/#ewasm","title":"ewasm","text":"<ul> <li>ParaState</li> <li>WASM</li> </ul>"},{"location":"tags/#experience","title":"experience","text":"<ul> <li>About Me</li> <li>achievements</li> <li>publications</li> <li>master degree license</li> </ul>"},{"location":"tags/#expressjs","title":"expressjs","text":"<ul> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#faucet","title":"faucet","text":"<ul> <li>Arman Riazi</li> </ul>"},{"location":"tags/#feedback","title":"feedback","text":"<ul> <li>Feedback</li> <li>Start-Up</li> </ul>"},{"location":"tags/#github","title":"github","text":"<ul> <li>Programming projects(archived)</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>SmartContract</li> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> <li>Arman Riazi</li> <li>About University</li> </ul>"},{"location":"tags/#hyperledger","title":"hyperledger","text":"<ul> <li>Hyperledger</li> </ul>"},{"location":"tags/#i","title":"i","text":"<ul> <li>About Me</li> <li>achievements</li> <li>Reach Me</li> <li>publications</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> <li>master degree license</li> </ul>"},{"location":"tags/#ibm","title":"ibm","text":"<ul> <li>Hyperledger</li> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#iot","title":"iot","text":"<ul> <li>Secondstate research intro</li> </ul>"},{"location":"tags/#java","title":"java","text":"<ul> <li>Corda-R3</li> <li>About University</li> </ul>"},{"location":"tags/#kafka","title":"kafka","text":"<ul> <li>Message Brokers</li> </ul>"},{"location":"tags/#kovan","title":"kovan","text":"<ul> <li>Arman Riazi</li> </ul>"},{"location":"tags/#kubernetes_1","title":"kubernetes","text":"<ul> <li>Kubernetes</li> <li>Rancher</li> </ul>"},{"location":"tags/#kusama","title":"kusama","text":"<ul> <li>Polka research intro</li> <li>Substrate framework research intro</li> <li>Substrate setup research intro</li> <li>Crowdloan research intro</li> </ul>"},{"location":"tags/#libc","title":"libc","text":"<ul> <li>Libc rust</li> </ul>"},{"location":"tags/#llvm","title":"llvm","text":"<ul> <li>Ewasm research intro</li> </ul>"},{"location":"tags/#magazine","title":"magazine","text":"<ul> <li>Magazine</li> </ul>"},{"location":"tags/#master","title":"master","text":"<ul> <li>master degree license</li> <li>About University</li> </ul>"},{"location":"tags/#me","title":"me","text":"<ul> <li>About Me</li> <li>achievements</li> <li>Reach Me</li> <li>publications</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> <li>master degree license</li> </ul>"},{"location":"tags/#message","title":"message","text":"<ul> <li>Message Brokers</li> </ul>"},{"location":"tags/#music","title":"music","text":"<ul> <li>Music Videos</li> </ul>"},{"location":"tags/#node","title":"node","text":"<ul> <li>Substrate setup research intro</li> </ul>"},{"location":"tags/#nodejs","title":"nodejs","text":"<ul> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#ocw","title":"ocw","text":"<ul> <li>Ocw runtime</li> </ul>"},{"location":"tags/#paper","title":"paper","text":"<ul> <li>publications</li> </ul>"},{"location":"tags/#parastate","title":"parastate","text":"<ul> <li>Parastate research intro</li> </ul>"},{"location":"tags/#polkadot","title":"polkadot","text":"<ul> <li>Polka research intro</li> <li>Substrate framework research intro</li> </ul>"},{"location":"tags/#polkadot_ecosystem","title":"polkadot_ecosystem","text":"<ul> <li>ParaState</li> <li>Polkadot</li> <li>Arman Riazi</li> <li>Parastate research intro</li> <li>Polka research intro</li> <li>Substrate framework research intro</li> <li>Substrate setup research intro</li> <li>Crowdloan research intro</li> <li>Ewasm research intro</li> </ul>"},{"location":"tags/#pos","title":"pos","text":"<ul> <li>Parastate research intro</li> </ul>"},{"location":"tags/#programming","title":"programming","text":"<ul> <li>Arman Riazi</li> </ul>"},{"location":"tags/#project","title":"project","text":"<ul> <li>ParaState</li> <li>Polkadot</li> <li>Arman Riazi</li> </ul>"},{"location":"tags/#publications","title":"publications","text":"<ul> <li>publications</li> </ul>"},{"location":"tags/#publisher","title":"publisher","text":"<ul> <li>publications</li> </ul>"},{"location":"tags/#rabbitmq","title":"rabbitmq","text":"<ul> <li>Message Brokers</li> </ul>"},{"location":"tags/#rancher_1","title":"rancher","text":"<ul> <li>Rancher</li> </ul>"},{"location":"tags/#reactjs","title":"reactjs","text":"<ul> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#recuit","title":"recuit","text":"<ul> <li>About Me</li> <li>achievements</li> <li>Reach Me</li> <li>publications</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>master degree license</li> </ul>"},{"location":"tags/#research","title":"research","text":"<ul> <li>ParaState</li> <li>Polkadot</li> </ul>"},{"location":"tags/#restapi","title":"restapi","text":"<ul> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#riazi","title":"riazi","text":"<ul> <li>About Me</li> <li>achievements</li> <li>Reach Me</li> <li>publications</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> <li>master degree license</li> </ul>"},{"location":"tags/#rpc","title":"rpc","text":"<ul> <li>Substrate setup research intro</li> </ul>"},{"location":"tags/#runtime","title":"runtime","text":"<ul> <li>Ocw runtime</li> </ul>"},{"location":"tags/#rust","title":"rust","text":"<ul> <li>Substrate setup research intro</li> <li>Arman Riazi</li> </ul>"},{"location":"tags/#sample","title":"sample","text":"<ul> <li>ParaState</li> <li>Polkadot</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>SmartContract</li> <li>ReactJS ExpressJS CouchDB</li> <li>NodeJS ExpressJS CouchDB</li> </ul>"},{"location":"tags/#science","title":"science","text":"<ul> <li>About University</li> </ul>"},{"location":"tags/#search","title":"search","text":"<ul> <li>Elastic-Search</li> </ul>"},{"location":"tags/#secondstate","title":"secondstate","text":"<ul> <li>Secondstate research intro</li> </ul>"},{"location":"tags/#simulation","title":"simulation","text":"<ul> <li>Corda-R3</li> </ul>"},{"location":"tags/#skill","title":"skill","text":"<ul> <li>About Me</li> <li>achievements</li> <li>publications</li> <li>master degree license</li> </ul>"},{"location":"tags/#smartcontract","title":"smartcontract","text":"<ul> <li>Solidity</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>Arman Riazi</li> <li>SmartContract</li> </ul>"},{"location":"tags/#social","title":"social","text":"<ul> <li>Reach Me</li> <li>Future Participants</li> <li>Contact me</li> <li>Free of charge(Domain Design Design | Software Engineer)</li> <li>Feedback</li> <li>Start-Up</li> </ul>"},{"location":"tags/#substrate","title":"substrate","text":"<ul> <li>ParaState</li> <li>Polkadot</li> <li>Arman Riazi</li> <li>Polka research intro</li> <li>Substrate framework research intro</li> <li>Substrate setup research intro</li> <li>Crowdloan research intro</li> <li>Ewasm research intro</li> </ul>"},{"location":"tags/#university","title":"university","text":"<ul> <li>About University</li> </ul>"},{"location":"tags/#virtualization","title":"virtualization","text":"<ul> <li>Virualization</li> <li>About University</li> </ul>"},{"location":"tags/#vsphere","title":"vsphere","text":"<ul> <li>Virualization</li> </ul>"},{"location":"tags/#wasm","title":"wasm","text":"<ul> <li>SecondState</li> <li>WASM</li> <li>Ewasm research intro</li> </ul>"},{"location":"tags/#webassembly","title":"webassembly","text":"<ul> <li>Ewasm research intro</li> </ul>"},{"location":"tags/#whitepapaer","title":"whitepapaer","text":"<ul> <li>Polka research intro</li> </ul>"}]}